{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the ICOS Carbon Portal Python Library ICOS The Integrated Carbon Observation System, ICOS, is a European-wide greenhouse gas research infrastructure. ICOS produces standardised data on greenhouse gas concentrations in the atmosphere, as well as on carbon fluxes between the atmosphere, the earth and oceans. This information is being used by scientists as well as by decision-makers in predicting and mitigating climate change. The high-quality and open ICOS data is based on the measurements from 134 stations across 12 European countries. For more information please visit https://www.icos-cp.eu/ . This library provides easy access to data hosted at the ICOS Carbon Portal ( https://data.icos-cp.eu/ ). By using this library you can load data files directly into memory. The approach of this library is to free you from downloading and maintaining a local copy of data files and if you choose to use our Jupyter Hub services, you don't even need computational power. If you would rather stick to the conventional download the data approach, to store and use the data locally, we suggest you go to the data portal website to find and \"download\" the data. Please be aware, that by either downloading data or accessing data directly through this library, you agree and accept, that all ICOS data is provided under a CC BY 4.0 licence ( licence.pdf ) The ICOS Carbon Portal provides persistent digital object identifiers for each data set or file to improve the FAIR-ness of data and to give all the users easy to use tools for provenance, citation and reproducibility, etc. Hence you only need to store a list of PID's (persistent digital object identifiers), or you can use one of the built-in SPARQL queries, to reproduce always the same result, regardless of the computer you run it on. You can share your code with colleagues, without the need of moving data around. You bring the software to the data, rather than data to the software. This is especially true if you create a Jupyter Notebook hosted at the Carbon Portal.","title":"About"},{"location":"#welcome-to-the-icos-carbon-portal-python-library","text":"","title":"Welcome to the ICOS Carbon Portal Python Library"},{"location":"#icos","text":"The Integrated Carbon Observation System, ICOS, is a European-wide greenhouse gas research infrastructure. ICOS produces standardised data on greenhouse gas concentrations in the atmosphere, as well as on carbon fluxes between the atmosphere, the earth and oceans. This information is being used by scientists as well as by decision-makers in predicting and mitigating climate change. The high-quality and open ICOS data is based on the measurements from 134 stations across 12 European countries. For more information please visit https://www.icos-cp.eu/ . This library provides easy access to data hosted at the ICOS Carbon Portal ( https://data.icos-cp.eu/ ). By using this library you can load data files directly into memory. The approach of this library is to free you from downloading and maintaining a local copy of data files and if you choose to use our Jupyter Hub services, you don't even need computational power. If you would rather stick to the conventional download the data approach, to store and use the data locally, we suggest you go to the data portal website to find and \"download\" the data. Please be aware, that by either downloading data or accessing data directly through this library, you agree and accept, that all ICOS data is provided under a CC BY 4.0 licence ( licence.pdf ) The ICOS Carbon Portal provides persistent digital object identifiers for each data set or file to improve the FAIR-ness of data and to give all the users easy to use tools for provenance, citation and reproducibility, etc. Hence you only need to store a list of PID's (persistent digital object identifiers), or you can use one of the built-in SPARQL queries, to reproduce always the same result, regardless of the computer you run it on. You can share your code with colleagues, without the need of moving data around. You bring the software to the data, rather than data to the software. This is especially true if you create a Jupyter Notebook hosted at the Carbon Portal.","title":"ICOS"},{"location":"changelog/","text":"Changelog 0.1.7 add licence attribute to Dobj() handle single str input to station.getList() stats report distinguish between intern/external usage remove _checkdata flag from station.info() update documentation 0.1.6 2021/03/29 add sparql queries for availability table typos and additions to documentation move changelog to separate file 0.1.5 2020/10/20 fix bug introduced with v 0.1.4 datasets with optional columns where not loaded if data object specifications mismatched the list of columns 0.1.4 -2020/10/16 - add support for regex columns 0.1.3 2020/10/01 Add module 'collection' to support loading data products. See Modules / collection Change behaviour of Dobj to keep data persistent. The pandas data frame is now persistent stored as pandas dataframe in the object. Older versions did query the server every time for the data. A new attribute is available: Dobj.data which returns the pandas dataframe. This change in behaviour is controlled with Dobj._datapersistent = True (default), and can be reverted by setting it to False. A new attribute Dobj.id is available (which is equivalent to Dobj.dobj) but is more human understandable. Dobj.id retrieves or sets the PID/URI. 0.1.2 2020/07/15 first public version to pypi.org","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#017","text":"add licence attribute to Dobj() handle single str input to station.getList() stats report distinguish between intern/external usage remove _checkdata flag from station.info() update documentation","title":"0.1.7"},{"location":"changelog/#016","text":"2021/03/29 add sparql queries for availability table typos and additions to documentation move changelog to separate file","title":"0.1.6"},{"location":"changelog/#015","text":"2020/10/20 fix bug introduced with v 0.1.4 datasets with optional columns where not loaded if data object specifications mismatched the list of columns","title":"0.1.5"},{"location":"changelog/#014","text":"-2020/10/16 - add support for regex columns","title":"0.1.4"},{"location":"changelog/#013","text":"2020/10/01 Add module 'collection' to support loading data products. See Modules / collection Change behaviour of Dobj to keep data persistent. The pandas data frame is now persistent stored as pandas dataframe in the object. Older versions did query the server every time for the data. A new attribute is available: Dobj.data which returns the pandas dataframe. This change in behaviour is controlled with Dobj._datapersistent = True (default), and can be reverted by setting it to False. A new attribute Dobj.id is available (which is equivalent to Dobj.dobj) but is more human understandable. Dobj.id retrieves or sets the PID/URI.","title":"0.1.3"},{"location":"changelog/#012","text":"2020/07/15 first public version to pypi.org","title":"0.1.2"},{"location":"examples/","text":"Examples The following paragraphs explain how to use the library in worked examples. If you would like to run the library live and play around with data sets without installation: We have a public Jupyter Hub running Python3 notebooks, where the library is preinstalled. The examples from this page are available in the folder pylib_examples https://exploredata.icos-cp.eu/ user: name@organisation password: get in touch to get the password Digital Object For the example below, we assume that you know how to get hold of the PID/URI used at the Carbon Portal. You can read more about this in the Modules section. Each object in the data portal has a unique and persistent identification in form of an URI. The following examples will use the URI https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc ICOS Atmosphere Level 2 data, Norunda, release 2019-1. Go to the landing page to find more information about this data set. Data Object from icoscp.cpb.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') Information (meta data) is automatically stored in the data frames with the object, accessible with Dobj.info command. More about the content of info and other attributes are in the modules section . For example to list all the columns available in the data set: dobj.colNames Column Name 0 Flag 1 NbPoints 2 Stdev 3 TIMESTAMP 4 ch4 or get the citation string for this object: dobj.citation \"ICOS RI, 2019. ICOS ATC CH4 Release, Norunda (59.0 m), 2017-04-01\u20132019-04-30, https://hdl.handle.net/11676/lNJPHqvsMuTAh-3DOvJejgYc\" DataFrame Extracting the data as pandas data frame: from icoscp.cpb.dobj import Dobj uri = 'https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc' do = Dobj(uri) if do.valid: display(do.data.head()) else: print('no preview data available') Printing the first 10 rows of the data (data.head(10)) should yield the following table: id Flag NbPoints Stdev TIMESTAMP ch4 0 N 0 -9.990 2017-04-01 00:00:00 NaN 1 N 0 -9.990 2017-04-01 01:00:00 NaN 2 O 9 0.079 2017-04-01 02:00:00 1948.660034 3 O 16 1.070 2017-04-01 03:00:00 1950.900024 4 O 17 0.817 2017-04-01 04:00:00 1953.229980 5 O 16 0.271 2017-04-01 05:00:00 1956.319946 6 O 16 0.590 2017-04-01 06:00:00 1957.810059 7 O 16 0.736 2017-04-01 07:00:00 1960.550049 8 O 16 0.429 2017-04-01 08:00:00 1962.540039 9 O 17 0.861 2017-04-01 09:00:00 1965.349976 Since version 0.1.3 a simplified access to the data is possible with: do.data So instead of data = do.get() to 'extract' the pandas data frame you can directly use the data frame to print the first 10 rows, which will give you the same result as above: do.data.head(10) Minimalistic Plot This first example shows how to extract a data file and create a plot. It is the easiest way to load the data into a Pandas DataFrame in your Python environment. The DataFrame contains the following columNames: Flag, NbPoints, Stdev, TIMESTAMP, ch4. Let's load the data and create a plot for measured methane concentrations over time. import matplotlib.pyplot as plt from icoscp.cpb.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') dobj.data.plot(x='TIMESTAMP', y='ch4', grid=True) plt.show() Plot with Title and Units To get a useful plot, at least we should have a title and the unit of measurement is absolutely paramount: import matplotlib.pyplot as plt from icoscp.cpb.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') dobj.get() # extract information from the dobj meta data # look at dobj.info() for a full list unit = dobj.info[1].unit[dobj.info[1]['colName'] =='ch4'].values[0] title = dobj.info[0].specLabel[0] title = dobj.info[2].stationName[0] + ' (' + dobj.info[2].stationId[0] + ')' title = title + '\\n' + dobj.info[0].specLabel[0] plot = dobj.data.plot(x='TIMESTAMP', y='ch4', grid=True, title=title) plot.set(ylabel=unit) plt.show() Stations Station Id's The function to get the station id's might be something you will use a lot. Based on a station id you can get all the dobj id's (PID/URI) and hence access to the data. So if you have no idea whatsoever what stations are available, you came to the right place: from icoscp.station import station stationList = station.getIdlist() # returns a Pandas DataFrame stationList.columns # what information do we get back? ['uri', 'id', 'name', 'country', 'lat', 'lon', 'elevation', 'project','theme'] stationList.head(5) uri id name ... project theme ... SE-Sto Abisko-Stordalen Palsa Bog ... ICOS ES ... IT-Noe Arca di Noe - Le Prigionette ... ICOS ES ... UK-AMo Auchencorth Moss ... ICOS ES ... FR-Aur Aurade ... ICOS ES ... 11BE BE-SOOP-Belgica ... ICOS OS Now you have basic information about a station, but most important you got the station id as well. NOTE: to create a station object you need to provide the station id as is CaseSensitiv A station Object Let's create a station object and have a look what information is provided with the function .info() . Each entry from \"info\" is an attribute and can be extracted with \"myStation.attribute\". In the following example you can access the station name with myStation.name from icoscp.station import station myStation = station.get('SE-Nor') myStation.info() { 'stationId': 'SE-Nor', 'name': 'Norunda', 'theme': 'ES', 'icosclass': '2', 'siteType': 'Forest', 'lat': 60.0865, 'lon': 17.4795, 'eas': None, 'eag': '36', 'firstName': 'Meelis', 'lastName': 'M\u00f6lder', 'email': 'meelis.molder@nateko.lu.se', 'country': 'SE', 'project': ['ICOS'], 'uri': ['http://meta.icos-cp.eu/resources/stations/ES_SE-Nor']} myStation.products() # return DataFrame with all products available from this station id specification 0 Drought 2018 Archive Product 1 Ecosystem meteo time series (ICOS Sweden) 2 Ecosystem fluxes time series (ICOS Sweden) 3 Ecosystem eco time series (ICOS Sweden) 4 Drought 2018 FLUXNET Product 5 ICOS ETC Archive Product 6 ICOS ETC FLUXNET Product All the dobj URI's (ultimately containing the data itself) can be retrieved with \"myStation.data()\" let see what columns are provided. The most important information will be the 'dobj' column. This contains the link to the data and can be used to extract the data. from icoscp.station import station myStation = station.get('SE-Nor') myStation.data().columns ['station', 'dobj', 'spec', 'timeStart', 'timeEnd', 'specLabel','samplingheight', 'datalevel', 'bytes'] myStation.data(level='2') # return a DataFrame with Level 2 data objects for the station station dobj spec ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/KfJjYyksI2nxCiJU36UfYVY_ .../dought2018ArchiveProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/L-in6TpOcGjmXruwi3ESD9G2 .../drought2018FluxnetProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/mBPKiB9tIQZQGrsy8ehAinvz .../etcArchiveProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/XA_Ifq7BKqS0tkQd4dGVEFnM .../etcFluxnetProduct This is not the full output, just an excerpt..... most important is the dobj column. You can use the content of the column 'dobj' to extract data. Now we put everything together from icoscp.cpb.dobj import Dobj from icoscp.station import station myStation = station.get('SE-Nor') myDobj = Dobj(myStation.data().dobj[1]) # this would be the second record from above table (drought2018FluxnetProduct) data = myDobj.get() data.columns ['GPP_DT_VUT_REF', 'GPP_NT_VUT_REF', 'H_F_MDS', 'H_F_MDS_QC', 'LE_F_MDS','LE_F_MDS_QC', 'NEE_VUT_REF', 'NEE_VUT_REF_QC', 'RECO_DT_VUT_REF','RECO_NT_VUT_REF', 'SW_IN_F', 'SW_IN_F_QC', 'TA_F', 'TA_F_QC','TIMESTAMP', 'TIMESTAMP_END', 'VPD_F', 'VPD_F_QC'] List of Stations There is a built in function to extract a list of stations. Be aware that if you extract all ICOS stations, a lot of information is gathered and retrieved. At the time of writing there are over a 100 stations and in can take up to a minute to extract all. from icoscp.station import station icosStations = station.getList() for s in icosStations: print(s.stationId, s.name, s.lat, s.lon) SE-Sto Abisko-Stordalen Palsa Bog 68.35596 19.04521 IT-Noe Arca di Noe - Le Prigionette 40.60617 8.15117 UK-AMo Auchencorth Moss 55.7925 -3.24362 FR-Aur Aurade 43.54965 1.106103 ... Collections Find a collection from icoscp.collection import collection collection.getIdList() Output is a pandas data frame, where each row contains information about a collection. The column collection or doi can be used to create a collection representation. The column dobj contains a list of all associated digital objects (the data) and the column count tells you how many data files are associated. collection doi title description dobj count https://meta.icos-cp.eu/collections/WM5ShdLFqP... 10.18160/P7E9-EKEA Ambient atmospheric methane observations from ... This dataset for historic ambient CH4 mole fra... [https://meta.icos-cp.eu/objects/pWqX-lRUsilS_... 30 Create a collection representation with the information from above, you can use either the collection or doi to initialize a collection representation and print some information. Have a look at Modules / collection for a full list of attributes. myCollection = collection.get('10.18160/ry7n-3r04') myCollection.info() {'id': 'https://meta.icos-cp.eu/collections/n7cIMHIyqHJKBeF_3jjgptHP', 'doi': '10.18160/ry7n-3r04', 'citation': 'Ramonet, M. (2019). ICOS Atmosphere Level 2 data, Puy de Dome, release 2019-1 (1.0). ICOS ERIC- Carbon Portal. https://doi.org/10.18160/RY7N-3R04\\n', 'title': 'ICOS Atmosphere Level 2 data, Puy de Dome, release 2019-1', 'description': 'ICOS Atmospheric Greenhouse Gas Mole Fractions of CO2, CH4, CO and Meteorological Observations, period 2016-08-25 to 2019-04-30, Puy de Dome, final quality controlled Level 2 data, release 2019-1'} A more in depth example and how to plot data from the collection can be found on https://exploredata.icos-cp.eu","title":"Examples"},{"location":"examples/#examples","text":"The following paragraphs explain how to use the library in worked examples. If you would like to run the library live and play around with data sets without installation: We have a public Jupyter Hub running Python3 notebooks, where the library is preinstalled. The examples from this page are available in the folder pylib_examples https://exploredata.icos-cp.eu/ user: name@organisation password: get in touch to get the password","title":"Examples"},{"location":"examples/#digital-object","text":"For the example below, we assume that you know how to get hold of the PID/URI used at the Carbon Portal. You can read more about this in the Modules section. Each object in the data portal has a unique and persistent identification in form of an URI. The following examples will use the URI https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc ICOS Atmosphere Level 2 data, Norunda, release 2019-1. Go to the landing page to find more information about this data set.","title":"Digital Object"},{"location":"examples/#data-object","text":"from icoscp.cpb.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') Information (meta data) is automatically stored in the data frames with the object, accessible with Dobj.info command. More about the content of info and other attributes are in the modules section . For example to list all the columns available in the data set: dobj.colNames Column Name 0 Flag 1 NbPoints 2 Stdev 3 TIMESTAMP 4 ch4 or get the citation string for this object: dobj.citation \"ICOS RI, 2019. ICOS ATC CH4 Release, Norunda (59.0 m), 2017-04-01\u20132019-04-30, https://hdl.handle.net/11676/lNJPHqvsMuTAh-3DOvJejgYc\"","title":"Data Object"},{"location":"examples/#dataframe","text":"Extracting the data as pandas data frame: from icoscp.cpb.dobj import Dobj uri = 'https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc' do = Dobj(uri) if do.valid: display(do.data.head()) else: print('no preview data available') Printing the first 10 rows of the data (data.head(10)) should yield the following table: id Flag NbPoints Stdev TIMESTAMP ch4 0 N 0 -9.990 2017-04-01 00:00:00 NaN 1 N 0 -9.990 2017-04-01 01:00:00 NaN 2 O 9 0.079 2017-04-01 02:00:00 1948.660034 3 O 16 1.070 2017-04-01 03:00:00 1950.900024 4 O 17 0.817 2017-04-01 04:00:00 1953.229980 5 O 16 0.271 2017-04-01 05:00:00 1956.319946 6 O 16 0.590 2017-04-01 06:00:00 1957.810059 7 O 16 0.736 2017-04-01 07:00:00 1960.550049 8 O 16 0.429 2017-04-01 08:00:00 1962.540039 9 O 17 0.861 2017-04-01 09:00:00 1965.349976 Since version 0.1.3 a simplified access to the data is possible with: do.data So instead of data = do.get() to 'extract' the pandas data frame you can directly use the data frame to print the first 10 rows, which will give you the same result as above: do.data.head(10)","title":"DataFrame"},{"location":"examples/#minimalistic-plot","text":"This first example shows how to extract a data file and create a plot. It is the easiest way to load the data into a Pandas DataFrame in your Python environment. The DataFrame contains the following columNames: Flag, NbPoints, Stdev, TIMESTAMP, ch4. Let's load the data and create a plot for measured methane concentrations over time. import matplotlib.pyplot as plt from icoscp.cpb.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') dobj.data.plot(x='TIMESTAMP', y='ch4', grid=True) plt.show()","title":"Minimalistic Plot"},{"location":"examples/#plot-with-title-and-units","text":"To get a useful plot, at least we should have a title and the unit of measurement is absolutely paramount: import matplotlib.pyplot as plt from icoscp.cpb.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') dobj.get() # extract information from the dobj meta data # look at dobj.info() for a full list unit = dobj.info[1].unit[dobj.info[1]['colName'] =='ch4'].values[0] title = dobj.info[0].specLabel[0] title = dobj.info[2].stationName[0] + ' (' + dobj.info[2].stationId[0] + ')' title = title + '\\n' + dobj.info[0].specLabel[0] plot = dobj.data.plot(x='TIMESTAMP', y='ch4', grid=True, title=title) plot.set(ylabel=unit) plt.show()","title":"Plot with Title and Units"},{"location":"examples/#stations","text":"","title":"Stations"},{"location":"examples/#station-ids","text":"The function to get the station id's might be something you will use a lot. Based on a station id you can get all the dobj id's (PID/URI) and hence access to the data. So if you have no idea whatsoever what stations are available, you came to the right place: from icoscp.station import station stationList = station.getIdlist() # returns a Pandas DataFrame stationList.columns # what information do we get back? ['uri', 'id', 'name', 'country', 'lat', 'lon', 'elevation', 'project','theme'] stationList.head(5) uri id name ... project theme ... SE-Sto Abisko-Stordalen Palsa Bog ... ICOS ES ... IT-Noe Arca di Noe - Le Prigionette ... ICOS ES ... UK-AMo Auchencorth Moss ... ICOS ES ... FR-Aur Aurade ... ICOS ES ... 11BE BE-SOOP-Belgica ... ICOS OS Now you have basic information about a station, but most important you got the station id as well. NOTE: to create a station object you need to provide the station id as is CaseSensitiv","title":"Station Id's"},{"location":"examples/#a-station-object","text":"Let's create a station object and have a look what information is provided with the function .info() . Each entry from \"info\" is an attribute and can be extracted with \"myStation.attribute\". In the following example you can access the station name with myStation.name from icoscp.station import station myStation = station.get('SE-Nor') myStation.info() { 'stationId': 'SE-Nor', 'name': 'Norunda', 'theme': 'ES', 'icosclass': '2', 'siteType': 'Forest', 'lat': 60.0865, 'lon': 17.4795, 'eas': None, 'eag': '36', 'firstName': 'Meelis', 'lastName': 'M\u00f6lder', 'email': 'meelis.molder@nateko.lu.se', 'country': 'SE', 'project': ['ICOS'], 'uri': ['http://meta.icos-cp.eu/resources/stations/ES_SE-Nor']} myStation.products() # return DataFrame with all products available from this station id specification 0 Drought 2018 Archive Product 1 Ecosystem meteo time series (ICOS Sweden) 2 Ecosystem fluxes time series (ICOS Sweden) 3 Ecosystem eco time series (ICOS Sweden) 4 Drought 2018 FLUXNET Product 5 ICOS ETC Archive Product 6 ICOS ETC FLUXNET Product All the dobj URI's (ultimately containing the data itself) can be retrieved with \"myStation.data()\" let see what columns are provided. The most important information will be the 'dobj' column. This contains the link to the data and can be used to extract the data. from icoscp.station import station myStation = station.get('SE-Nor') myStation.data().columns ['station', 'dobj', 'spec', 'timeStart', 'timeEnd', 'specLabel','samplingheight', 'datalevel', 'bytes'] myStation.data(level='2') # return a DataFrame with Level 2 data objects for the station station dobj spec ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/KfJjYyksI2nxCiJU36UfYVY_ .../dought2018ArchiveProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/L-in6TpOcGjmXruwi3ESD9G2 .../drought2018FluxnetProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/mBPKiB9tIQZQGrsy8ehAinvz .../etcArchiveProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/XA_Ifq7BKqS0tkQd4dGVEFnM .../etcFluxnetProduct This is not the full output, just an excerpt..... most important is the dobj column. You can use the content of the column 'dobj' to extract data. Now we put everything together from icoscp.cpb.dobj import Dobj from icoscp.station import station myStation = station.get('SE-Nor') myDobj = Dobj(myStation.data().dobj[1]) # this would be the second record from above table (drought2018FluxnetProduct) data = myDobj.get() data.columns ['GPP_DT_VUT_REF', 'GPP_NT_VUT_REF', 'H_F_MDS', 'H_F_MDS_QC', 'LE_F_MDS','LE_F_MDS_QC', 'NEE_VUT_REF', 'NEE_VUT_REF_QC', 'RECO_DT_VUT_REF','RECO_NT_VUT_REF', 'SW_IN_F', 'SW_IN_F_QC', 'TA_F', 'TA_F_QC','TIMESTAMP', 'TIMESTAMP_END', 'VPD_F', 'VPD_F_QC']","title":"A station Object"},{"location":"examples/#list-of-stations","text":"There is a built in function to extract a list of stations. Be aware that if you extract all ICOS stations, a lot of information is gathered and retrieved. At the time of writing there are over a 100 stations and in can take up to a minute to extract all. from icoscp.station import station icosStations = station.getList() for s in icosStations: print(s.stationId, s.name, s.lat, s.lon) SE-Sto Abisko-Stordalen Palsa Bog 68.35596 19.04521 IT-Noe Arca di Noe - Le Prigionette 40.60617 8.15117 UK-AMo Auchencorth Moss 55.7925 -3.24362 FR-Aur Aurade 43.54965 1.106103 ...","title":"List of Stations"},{"location":"examples/#collections","text":"","title":"Collections"},{"location":"examples/#find-a-collection","text":"from icoscp.collection import collection collection.getIdList() Output is a pandas data frame, where each row contains information about a collection. The column collection or doi can be used to create a collection representation. The column dobj contains a list of all associated digital objects (the data) and the column count tells you how many data files are associated. collection doi title description dobj count https://meta.icos-cp.eu/collections/WM5ShdLFqP... 10.18160/P7E9-EKEA Ambient atmospheric methane observations from ... This dataset for historic ambient CH4 mole fra... [https://meta.icos-cp.eu/objects/pWqX-lRUsilS_... 30","title":"Find a collection"},{"location":"examples/#create-a-collection-representation","text":"with the information from above, you can use either the collection or doi to initialize a collection representation and print some information. Have a look at Modules / collection for a full list of attributes. myCollection = collection.get('10.18160/ry7n-3r04') myCollection.info() {'id': 'https://meta.icos-cp.eu/collections/n7cIMHIyqHJKBeF_3jjgptHP', 'doi': '10.18160/ry7n-3r04', 'citation': 'Ramonet, M. (2019). ICOS Atmosphere Level 2 data, Puy de Dome, release 2019-1 (1.0). ICOS ERIC- Carbon Portal. https://doi.org/10.18160/RY7N-3R04\\n', 'title': 'ICOS Atmosphere Level 2 data, Puy de Dome, release 2019-1', 'description': 'ICOS Atmospheric Greenhouse Gas Mole Fractions of CO2, CH4, CO and Meteorological Observations, period 2016-08-25 to 2019-04-30, Puy de Dome, final quality controlled Level 2 data, release 2019-1'} A more in depth example and how to plot data from the collection can be found on https://exploredata.icos-cp.eu","title":"Create a collection representation"},{"location":"faq/","text":"Things, which have popped up while using this library, and might be of interest Q&A Q: dobj.station returns None A: The attribute of dobj.station is set only AFTER you have called dobj.data. Not very intuitive and will be rectified in a future release. Q: Collection data not available A: Collection is loosely assembled and may contain any kind of files and information. For example it is possible to gather pdf documents and NetCDF and some tabular files in a collection. These files will be presented to you, because they are within the collection. BUT only tabular files (where a preview is available in the data portal) can be accessed directly. With other words, you can NOT expect that you can 'load' all files listed in a collection. Good to Know Stations are associated with the stationID. This means that at the moment a combined station, certified for Ecosystem AND Atmosphere, has two different stationId's and hence to access ALL data for such a station you need provide a list of stationId's to find a complete set of data products. Example Norunda, Sweden (stationId \"SE-Nor\" for Ecosystem, stationId \"NOR\" for Atmosphere).","title":"FAQ"},{"location":"faq/#qa","text":"Q: dobj.station returns None A: The attribute of dobj.station is set only AFTER you have called dobj.data. Not very intuitive and will be rectified in a future release. Q: Collection data not available A: Collection is loosely assembled and may contain any kind of files and information. For example it is possible to gather pdf documents and NetCDF and some tabular files in a collection. These files will be presented to you, because they are within the collection. BUT only tabular files (where a preview is available in the data portal) can be accessed directly. With other words, you can NOT expect that you can 'load' all files listed in a collection.","title":"Q&amp;A"},{"location":"faq/#good-to-know","text":"Stations are associated with the stationID. This means that at the moment a combined station, certified for Ecosystem AND Atmosphere, has two different stationId's and hence to access ALL data for such a station you need provide a list of stationId's to find a complete set of data products. Example Norunda, Sweden (stationId \"SE-Nor\" for Ecosystem, stationId \"NOR\" for Atmosphere).","title":"Good to Know"},{"location":"install/","text":"Installation This library is in active development and may change at any time. We do our best to keep the function calls and parameters consistent, but without a guarantee. You can follow the development on Github . Create an issue to leave comments, suggestions or if you find something not working as expected. The library has not been tested on many different operating systems and environments, hence we appreciate you telling us what is good and bad. The library is developed with Python 3.7.x and we assume that any recent Python distribution should work. If you have any trouble running the library, we are very keen to know why. Please get in touch. Pip official release The recommended way of installation is by using pip: pip install icoscp The installation should take care of any dependencies, but to successfully access any data object from the ICOS Carbon Portal you need to have a working internet connection. We would encourage you to use a virtual environment for python to test this library. For example with mini-conda https://docs.conda.io/en/latest/miniconda.html you can create a new environment with: conda create -n icos python activate icos pip install icoscp Manaual installation If you would like to install the latest version (branch from Github), you can download / fork the repo navigate (change directory) to the library folder and start the installation with: pip install . or python setup.py install or without downloading directly from our github master branch - pip install git+https://github.com/ICOS-Carbon-Portal/pylib.git Dependencies The following modules are required by the library: requests pandas tqdm","title":"Installation"},{"location":"install/#installation","text":"This library is in active development and may change at any time. We do our best to keep the function calls and parameters consistent, but without a guarantee. You can follow the development on Github . Create an issue to leave comments, suggestions or if you find something not working as expected. The library has not been tested on many different operating systems and environments, hence we appreciate you telling us what is good and bad. The library is developed with Python 3.7.x and we assume that any recent Python distribution should work. If you have any trouble running the library, we are very keen to know why. Please get in touch.","title":"Installation"},{"location":"install/#pip-official-release","text":"The recommended way of installation is by using pip: pip install icoscp The installation should take care of any dependencies, but to successfully access any data object from the ICOS Carbon Portal you need to have a working internet connection. We would encourage you to use a virtual environment for python to test this library. For example with mini-conda https://docs.conda.io/en/latest/miniconda.html you can create a new environment with: conda create -n icos python activate icos pip install icoscp","title":"Pip official release"},{"location":"install/#manaual-installation","text":"If you would like to install the latest version (branch from Github), you can download / fork the repo navigate (change directory) to the library folder and start the installation with: pip install . or python setup.py install or without downloading directly from our github master branch - pip install git+https://github.com/ICOS-Carbon-Portal/pylib.git","title":"Manaual installation"},{"location":"install/#dependencies","text":"The following modules are required by the library: requests pandas tqdm","title":"Dependencies"},{"location":"modules/","text":"Content The following modules are available in the library to find and access data hosted at the Carbon Portal. After a successful installation into your python environment you should be able to load the modules with: from icoscp.cpb.dobj import Dobj from icoscp.station import station from icoscp.collection import collection from icoscp.sparql.runsparql import RunSparql from icoscp.sparql import sparqls Dobj This is the basic module to load a d igital obj ect (data set) into memory. You need to know a valid persistent identifier (PID/URL) to access the data. Either you can browse the data portal to find PID's or you can use the 'station' package to find PID's programatically (see section station ). In essence each data object is linked to a unique and persistent identifier in the form of a URL. Hence each data object has an on-line landing page. If you select any data object on https://data.icos-cp.eu and then navigate to the PID link (which looks like 11676/j7-Lxlln8_ysi4DEV8qine_v ) you end up on the 'landing' page of the document. If you look at the address bar of your browser, you will see an URL similar to https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v . To access the data you need to know this URL or the last part of the URL (j7-Lxlln8_ysi4DEV8qine_v). Load the module with: from icoscp.cpb.dobj import Dobj classmethod Dobj(digitalObject='') You can initialise a Dobj with a PID. The following two statements yield the same result. myDobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') myDobj = Dobj('j7-Lxlln8_ysi4DEV8qine_v') or create an 'empty' instance and the set the identifier later: myDobj = Dobj() myDobj.dobj = \"j7-Lxlln8_ysi4DEV8qine_v\" Attributes: Dobj.citation Citation string Return STR Dobj.licence Licence associated with the dataset. Return DICT Dobj.colNames Available column names. This information is part of the Dobj.info, which holds all the available meta data. Return pandas.core.series.Series Dobj.dateTimeConvert = True Set or retrieve. Default True . The binary data representation provides a UTC Timestamp as Unixtimestamp. By default this is converted to a DateTimeObject ( pandas._libs.tslibs.timestamps.Timestamp ). If you prefer to have the raw Unixtimestamp ( numpy.float64 ), set Dobj.dateTimeConvert = False prior to issue the .get() command. Return BOOL Dobj.dobj = PID See Dobj.id Dobj.id = PID Set or retrieve the PID for the Dobj, default is empty (\"\"). If a PID is set, an automatic chekck is performed to find the meta data for the object. If this is successful, the 'valid' property is set to True Return STR Dobj.data Retrieve the actual data for the PID, the same as .get() . Return Pandas DataFrame Dobj.get() Retrieve the actual data for the PID. The same as .data Return Pandas DataFrame Dobj.valid True if PID is set and found at the ICOS Carbon Portal Return BOOL All Dobj related meta data is available in the following properties. Dobj.info This will return a list of three pandas data frames which contain meta data. info[0] -> information about the dobj like, url, specification, number of rows, related file name. info[1] -> information about the data like colName, value type, unit, kind info[2] -> information about the station, where the data was obtained. Name, id, lat, lon etc.. Return LIST[Pandas DataFrame] Dobj.lat Latitude for station Return FLOAT Dobj.lon Longitute for station Return FLOAT Dobj.elevation Elevation above sea level for station. Be aware, this is NOT the sampling height for the data points. Return FLOAT Dobj.station Station name Return STR Dobj.size() The real size of the dobj in [bytes, KB, MB, TB]. Since this object may contain the data, it is no longer just a pointer to data. Return TUPLE (int32, STR), where int32 represents the size and STR the unit. Example output looks like: (4.353, 'MB') Station The station module provides a search facility to explore ICOS stations and find associated data objects and data products. There is a lot of information available abouthe the ICOS stations, partner countries, measured variables and much more in the ICOS Handbook . load the module with: from icoscp.station import station classmethod station.Station() The station object is primarily a data structure to store the associated meta data. The meta data is provided with specific and complex Sparql queries. It is possible to instantiate this class on its own, but we recommend to use the convenience functions station.getIdList() station.get('StationID') station.getList() as described further below to create the station object. Once you have a created valid station object a list attributes are available: Attributes: Station.country Country code Return STR Station.data(level=None) All associated data object for the station are returned. ICOS distinguishes data in terms of how processed they are. - Data level 1: Near Real Time Data (NRT) or Internal Work data (IW). - Data level 2: The final quality checked ICOS RI data set, published by the CFs, to be distributed through the Carbon Portal. This level is the ICOS-data product and free available for users. - Data level 3: All kinds of elaborated products by scientific communities that rely on ICOS data products are called Level 3 data. Return Pandas DataFrame Station.eag Elevation above ground , if available. Please note, this is a general information about the height of the tower. This is NOT a sampling height and it is not guranteed to be accurate. Return FLOAT Station.eas Elevation above sea level in meter. Return FLOAT Station.icosclass Classification for certified ICOS stations. Please consult the ICOS Handbook for further information about the Class 1&2 certificate. Return STR Station.firstName PI (Principal Investigator) First Name. Return STR Station.lastName PI (Principal Investigator) last name Return STR Station.email PI (Principal Investigator) email address Return STR Station.lat Latitude for the station. Return FLOAT Station.lon Longitude for the station. Return FLOAT Station.name Returns the full name for the station. Return STR Station.project ICOS Carbon Portal is a data portal from and for the ICOS community. However, the data portal does host more than ICOS data. The station association is listed here (if available) Return LIST Station.stationId Set or retrieve the StationId Return STR Station.theme For ICOS stations a 'theme' is provided. Please note that, a station may belong to more than one theme, but with different themes. For example the stationId \"NOR\" (Norunda, Sweden), will give you access to the atmospheric data products, whereas the stationId \"SE-Nor\" will return the Ecosystem data products. AS for Atmospheric Stations ES for Ecosystem Stations OS for Ocean Stations Return STR Station.uri Link to the landing page for the station. Because a station ID may be associated with more than one 'project' this returns a list of URI's Return LIST Station.valid True if stationId is found. Return BOOL Convenience functions The following three functions are recommend to get information about the available stations at the Carbon Portal and how to get a valid station object (or list of): station.getIdList() station.getIdList(project='ICOS', sort='name') This returns a DataFrame with columns: ['uri', 'id', 'name', 'country', 'lat', 'lon', 'elevation', 'project', 'theme'] By default ICOS certified stations are returned. If project is set to 'all', all known stations (to the Carbon Portal) are returned. By default the DataFrame is sorted by name. You can provide any column name as sorting parameter. The 'id' of the record, can be used to instantiate a station. Hence it is easy to adjust and filter these records and use the column 'id' as input for station.get() Return Pandas DataFrame station.get() station.get('stationID') Provide a valid station id (see getIdList()) to create a Station object. NOTE: stationId is CaseSensitive. Return Station Object station.getList() station.getList(theme=['AS','ES','OS'], ids=None) This is the easiest way to get a list of ICOS stations. By default a full list of all certified ICOS stations is returned. You can filter the output by provided a list of themes OR you can provide a list of station id's. NOTE: If you provide a list of id's, the theme filter is ignored. station.getList(['as', 'os']) list with ICOS atmospheric and ocean stations station.getList(ids=['NOR', 'HTM', 'HUN']) list with stations NOR (Norunda), HTM (Hyltemossa), HUN (Hegyhatsal) Return LIST[Station Objects] Collection This module supports to load a collection of digital objects. Data products ( https://www.icos-cp.eu/data-products ) or collections are an assembly for a specific theme, or project. For example the ICOS community assembled data to provide a base for the Drought anomaly in 2018. This dataset was then used to study the impact of this extreme event, which ultimately led to a series of publications available as 'theme issue' in The Royal Society . Subsequently the data sets are now public available at the ICOS Carbon Portal ( Drought-2018 ecosystem eddy covariance flux product for 52 stations and Drought-2018 atmospheric CO2 Mole Fraction product for 48 stations (96 sample heights) . Load the module with: from icoscp.collection import collection classmethod Collection(coll) (where coll represents a pandas data frame, similar to the output from .getIdList()). BUT only similar. We do NOT Recommend to instantiate this class directly. Please use the function .get(CollectionId) . The Purpose of the class documentation is to provide you a list of attributes available, after the .get(CollectionId) return a collection object. Attributes: Collection.id This is the ICOS URI (PID). A link to the landing page on the ICOS data portal. Return STR Collection.doi If available, the official DOI in form of '10.18160/ry7n-3r04'. Return Str Collection.citation For convenience the citation string provided from https://citation.crosscite.org/ is stored in this attribute. If you like to have a different format, please have a look at .getCitation description below. Return STR Collection.title Return STR Collection.description Return STR Collection.info() For convenience all the attributes above (id, doi, citation, title, description) . You can choose the output format with fmt=[\"dict\" | \"pandas\" | \"html\"]. The default is \"dict\". info(self, fmt='dict') Return FMT, default DICT Collection.datalink This returns a list of PID/URI of digital objects associated with the collection. Return LIST[STR] Collection.data This returns a list of Dobj associated to the collection. Please refer to the module Digital Object above. Return LIST[Dobj] Collection.getCitation() Collection.getCitation(format='apa', lang='en-GB')** If the collection has a DOI, you will get a citation string from https://citation.crosscite.org/ . You may provide any style & language parameters found on the website. Our default style is apa and language en-GB , which is stored in the attribute collection.citation . Use the function getCitation(), if you need a specific format & language adaption. Example to get a Bibtex styled citation: .getCitation('bibtex','de-CH') Convenience functions The following functions are recommended to get information about the available collections as well as creating an instance of a collection. collection.getIdList() collection.getIdList() This will return a pandas data frame, listing all available collections at the data portal. The data frame contains the following columns: ['collection', 'doi', 'title', 'description', 'dobj', 'count'] . We would recommend that you pay close attention to the count . We have collections with many data objects associated. If you just want to play around, select a collection with less than 10 objects. collection contains the PID/URI for the collection. This is the ID you need to provide for the .get(CollectionId) function. Please be aware that you need to provide the full URI. Example: .get('https://meta.icos-cp.eu/collections/n7cIMHIyqHJKBeF_3jjgptHP') dobj contains a list (LIST[STR]) of all PID/URI associated data objects. count tells you how many data objects are associated with this collection. Returns a pandas data frame collection.get() collection.get(CollectionId) Create a collection object. See the class method above for the attributes available in the collection object. The CollectionId must be either the full ICOS URI of the collection landing page or the DOI (if one is available). Not all collections have a DOI. Both information can be extracted with the function .getIdList() .The following to lines to create 'myCollection' yield the same result : myCollection = get('https://meta.icos-cp.eu/collections/n7cIMHIyqHJKBeF_3jjgptHP') myCollection = get('10.18160/ry7n-3r04') Returns Collection Sparql At the ICOS Carbon Portal we store all data and meta data as linked data in a triple store. For more information about this approach refer to Semantic Web , Resource Description Framework (RDF) , and Triple Stores . This module is a simple interface to the SPARQL endpoint at the Carbon Portal. You can write your own queries and use the module to query the database or use some of the provided built in queries. Load the module with: from icoscp.sparql.runsparql import RunSparql classmethod RunSparql(sparql_query='', output_format='txt') sparql_query needs to be a valid query. You can test a query directly at the online SPARQL endpoint at https://meta.icos-cp.eu/sparqlclient/?type=CSV . The ouput format is by default (txt/json) but you can adjust with the following formats ['json', 'csv', 'dict', 'pandas', 'array', 'html']. Attributes: RunSparql.data If a query is set and the method .run() was executed, it returns the result from the SPARQL endpoint. If no data is available the method returns False (BOOL). Return BOOL | STR RunSparql.query = 'query' Retrieve or set the query. Return STR RunSparql.format = 'fmt' Retrieve or set the output format. fmt = 'json', 'csv', 'dict', 'pandas', 'array', 'html' Return STR RunSparql.run() This method actually executes the query and formats the result to the output format. If the sparql query is not executable because of syntax errors, for example, a TUPLE is returned (False, 'Bad Request') Return TUPLE | FMT","title":"Modules"},{"location":"modules/#content","text":"The following modules are available in the library to find and access data hosted at the Carbon Portal. After a successful installation into your python environment you should be able to load the modules with: from icoscp.cpb.dobj import Dobj from icoscp.station import station from icoscp.collection import collection from icoscp.sparql.runsparql import RunSparql from icoscp.sparql import sparqls","title":"Content"},{"location":"modules/#dobj","text":"This is the basic module to load a d igital obj ect (data set) into memory. You need to know a valid persistent identifier (PID/URL) to access the data. Either you can browse the data portal to find PID's or you can use the 'station' package to find PID's programatically (see section station ). In essence each data object is linked to a unique and persistent identifier in the form of a URL. Hence each data object has an on-line landing page. If you select any data object on https://data.icos-cp.eu and then navigate to the PID link (which looks like 11676/j7-Lxlln8_ysi4DEV8qine_v ) you end up on the 'landing' page of the document. If you look at the address bar of your browser, you will see an URL similar to https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v . To access the data you need to know this URL or the last part of the URL (j7-Lxlln8_ysi4DEV8qine_v). Load the module with: from icoscp.cpb.dobj import Dobj classmethod Dobj(digitalObject='') You can initialise a Dobj with a PID. The following two statements yield the same result. myDobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') myDobj = Dobj('j7-Lxlln8_ysi4DEV8qine_v') or create an 'empty' instance and the set the identifier later: myDobj = Dobj() myDobj.dobj = \"j7-Lxlln8_ysi4DEV8qine_v\"","title":"Dobj"},{"location":"modules/#dobjcitation","text":"Citation string Return STR","title":"Dobj.citation"},{"location":"modules/#dobjlicence","text":"Licence associated with the dataset. Return DICT","title":"Dobj.licence"},{"location":"modules/#dobjcolnames","text":"Available column names. This information is part of the Dobj.info, which holds all the available meta data. Return pandas.core.series.Series","title":"Dobj.colNames"},{"location":"modules/#dobjdatetimeconvert-true","text":"Set or retrieve. Default True . The binary data representation provides a UTC Timestamp as Unixtimestamp. By default this is converted to a DateTimeObject ( pandas._libs.tslibs.timestamps.Timestamp ). If you prefer to have the raw Unixtimestamp ( numpy.float64 ), set Dobj.dateTimeConvert = False prior to issue the .get() command. Return BOOL","title":"Dobj.dateTimeConvert = True"},{"location":"modules/#dobjdobj-pid","text":"See Dobj.id","title":"Dobj.dobj = PID"},{"location":"modules/#dobjid-pid","text":"Set or retrieve the PID for the Dobj, default is empty (\"\"). If a PID is set, an automatic chekck is performed to find the meta data for the object. If this is successful, the 'valid' property is set to True Return STR","title":"Dobj.id = PID"},{"location":"modules/#dobjdata","text":"Retrieve the actual data for the PID, the same as .get() . Return Pandas DataFrame","title":"Dobj.data"},{"location":"modules/#dobjget","text":"Retrieve the actual data for the PID. The same as .data Return Pandas DataFrame","title":"Dobj.get()"},{"location":"modules/#dobjvalid","text":"True if PID is set and found at the ICOS Carbon Portal Return BOOL All Dobj related meta data is available in the following properties.","title":"Dobj.valid"},{"location":"modules/#dobjinfo","text":"This will return a list of three pandas data frames which contain meta data. info[0] -> information about the dobj like, url, specification, number of rows, related file name. info[1] -> information about the data like colName, value type, unit, kind info[2] -> information about the station, where the data was obtained. Name, id, lat, lon etc.. Return LIST[Pandas DataFrame]","title":"Dobj.info"},{"location":"modules/#dobjlat","text":"Latitude for station Return FLOAT","title":"Dobj.lat"},{"location":"modules/#dobjlon","text":"Longitute for station Return FLOAT","title":"Dobj.lon"},{"location":"modules/#dobjelevation","text":"Elevation above sea level for station. Be aware, this is NOT the sampling height for the data points. Return FLOAT","title":"Dobj.elevation"},{"location":"modules/#dobjstation","text":"Station name Return STR","title":"Dobj.station"},{"location":"modules/#dobjsize","text":"The real size of the dobj in [bytes, KB, MB, TB]. Since this object may contain the data, it is no longer just a pointer to data. Return TUPLE (int32, STR), where int32 represents the size and STR the unit. Example output looks like: (4.353, 'MB')","title":"Dobj.size()"},{"location":"modules/#station","text":"The station module provides a search facility to explore ICOS stations and find associated data objects and data products. There is a lot of information available abouthe the ICOS stations, partner countries, measured variables and much more in the ICOS Handbook . load the module with: from icoscp.station import station classmethod station.Station() The station object is primarily a data structure to store the associated meta data. The meta data is provided with specific and complex Sparql queries. It is possible to instantiate this class on its own, but we recommend to use the convenience functions station.getIdList() station.get('StationID') station.getList() as described further below to create the station object. Once you have a created valid station object a list attributes are available:","title":"Station"},{"location":"modules/#stationcountry","text":"Country code Return STR","title":"Station.country"},{"location":"modules/#stationdatalevelnone","text":"All associated data object for the station are returned. ICOS distinguishes data in terms of how processed they are. - Data level 1: Near Real Time Data (NRT) or Internal Work data (IW). - Data level 2: The final quality checked ICOS RI data set, published by the CFs, to be distributed through the Carbon Portal. This level is the ICOS-data product and free available for users. - Data level 3: All kinds of elaborated products by scientific communities that rely on ICOS data products are called Level 3 data. Return Pandas DataFrame","title":"Station.data(level=None)"},{"location":"modules/#stationeag","text":"Elevation above ground , if available. Please note, this is a general information about the height of the tower. This is NOT a sampling height and it is not guranteed to be accurate. Return FLOAT","title":"Station.eag"},{"location":"modules/#stationeas","text":"Elevation above sea level in meter. Return FLOAT","title":"Station.eas"},{"location":"modules/#stationicosclass","text":"Classification for certified ICOS stations. Please consult the ICOS Handbook for further information about the Class 1&2 certificate. Return STR","title":"Station.icosclass"},{"location":"modules/#stationfirstname","text":"PI (Principal Investigator) First Name. Return STR","title":"Station.firstName"},{"location":"modules/#stationlastname","text":"PI (Principal Investigator) last name Return STR","title":"Station.lastName"},{"location":"modules/#stationemail","text":"PI (Principal Investigator) email address Return STR","title":"Station.email"},{"location":"modules/#stationlat","text":"Latitude for the station. Return FLOAT","title":"Station.lat"},{"location":"modules/#stationlon","text":"Longitude for the station. Return FLOAT","title":"Station.lon"},{"location":"modules/#stationname","text":"Returns the full name for the station. Return STR","title":"Station.name"},{"location":"modules/#stationproject","text":"ICOS Carbon Portal is a data portal from and for the ICOS community. However, the data portal does host more than ICOS data. The station association is listed here (if available) Return LIST","title":"Station.project"},{"location":"modules/#stationstationid","text":"Set or retrieve the StationId Return STR","title":"Station.stationId"},{"location":"modules/#stationtheme","text":"For ICOS stations a 'theme' is provided. Please note that, a station may belong to more than one theme, but with different themes. For example the stationId \"NOR\" (Norunda, Sweden), will give you access to the atmospheric data products, whereas the stationId \"SE-Nor\" will return the Ecosystem data products. AS for Atmospheric Stations ES for Ecosystem Stations OS for Ocean Stations Return STR","title":"Station.theme"},{"location":"modules/#stationuri","text":"Link to the landing page for the station. Because a station ID may be associated with more than one 'project' this returns a list of URI's Return LIST","title":"Station.uri"},{"location":"modules/#stationvalid","text":"True if stationId is found. Return BOOL","title":"Station.valid"},{"location":"modules/#convenience-functions","text":"The following three functions are recommend to get information about the available stations at the Carbon Portal and how to get a valid station object (or list of):","title":"Convenience functions"},{"location":"modules/#stationgetidlist","text":"station.getIdList(project='ICOS', sort='name') This returns a DataFrame with columns: ['uri', 'id', 'name', 'country', 'lat', 'lon', 'elevation', 'project', 'theme'] By default ICOS certified stations are returned. If project is set to 'all', all known stations (to the Carbon Portal) are returned. By default the DataFrame is sorted by name. You can provide any column name as sorting parameter. The 'id' of the record, can be used to instantiate a station. Hence it is easy to adjust and filter these records and use the column 'id' as input for station.get() Return Pandas DataFrame","title":"station.getIdList()"},{"location":"modules/#stationget","text":"station.get('stationID') Provide a valid station id (see getIdList()) to create a Station object. NOTE: stationId is CaseSensitive. Return Station Object","title":"station.get()"},{"location":"modules/#stationgetlist","text":"station.getList(theme=['AS','ES','OS'], ids=None) This is the easiest way to get a list of ICOS stations. By default a full list of all certified ICOS stations is returned. You can filter the output by provided a list of themes OR you can provide a list of station id's. NOTE: If you provide a list of id's, the theme filter is ignored. station.getList(['as', 'os']) list with ICOS atmospheric and ocean stations station.getList(ids=['NOR', 'HTM', 'HUN']) list with stations NOR (Norunda), HTM (Hyltemossa), HUN (Hegyhatsal) Return LIST[Station Objects]","title":"station.getList()"},{"location":"modules/#collection","text":"This module supports to load a collection of digital objects. Data products ( https://www.icos-cp.eu/data-products ) or collections are an assembly for a specific theme, or project. For example the ICOS community assembled data to provide a base for the Drought anomaly in 2018. This dataset was then used to study the impact of this extreme event, which ultimately led to a series of publications available as 'theme issue' in The Royal Society . Subsequently the data sets are now public available at the ICOS Carbon Portal ( Drought-2018 ecosystem eddy covariance flux product for 52 stations and Drought-2018 atmospheric CO2 Mole Fraction product for 48 stations (96 sample heights) . Load the module with: from icoscp.collection import collection classmethod Collection(coll) (where coll represents a pandas data frame, similar to the output from .getIdList()). BUT only similar. We do NOT Recommend to instantiate this class directly. Please use the function .get(CollectionId) . The Purpose of the class documentation is to provide you a list of attributes available, after the .get(CollectionId) return a collection object.","title":"Collection"},{"location":"modules/#collectionid","text":"This is the ICOS URI (PID). A link to the landing page on the ICOS data portal. Return STR","title":"Collection.id"},{"location":"modules/#collectiondoi","text":"If available, the official DOI in form of '10.18160/ry7n-3r04'. Return Str","title":"Collection.doi"},{"location":"modules/#collectioncitation","text":"For convenience the citation string provided from https://citation.crosscite.org/ is stored in this attribute. If you like to have a different format, please have a look at .getCitation description below. Return STR","title":"Collection.citation"},{"location":"modules/#collectiontitle","text":"Return STR","title":"Collection.title"},{"location":"modules/#collectiondescription","text":"Return STR","title":"Collection.description"},{"location":"modules/#collectioninfo","text":"For convenience all the attributes above (id, doi, citation, title, description) . You can choose the output format with fmt=[\"dict\" | \"pandas\" | \"html\"]. The default is \"dict\". info(self, fmt='dict') Return FMT, default DICT","title":"Collection.info()"},{"location":"modules/#collectiondatalink","text":"This returns a list of PID/URI of digital objects associated with the collection. Return LIST[STR]","title":"Collection.datalink"},{"location":"modules/#collectiondata","text":"This returns a list of Dobj associated to the collection. Please refer to the module Digital Object above. Return LIST[Dobj]","title":"Collection.data"},{"location":"modules/#collectiongetcitation","text":"Collection.getCitation(format='apa', lang='en-GB')** If the collection has a DOI, you will get a citation string from https://citation.crosscite.org/ . You may provide any style & language parameters found on the website. Our default style is apa and language en-GB , which is stored in the attribute collection.citation . Use the function getCitation(), if you need a specific format & language adaption. Example to get a Bibtex styled citation: .getCitation('bibtex','de-CH')","title":"Collection.getCitation()"},{"location":"modules/#convenience-functions_1","text":"The following functions are recommended to get information about the available collections as well as creating an instance of a collection.","title":"Convenience functions"},{"location":"modules/#collectiongetidlist","text":"collection.getIdList() This will return a pandas data frame, listing all available collections at the data portal. The data frame contains the following columns: ['collection', 'doi', 'title', 'description', 'dobj', 'count'] . We would recommend that you pay close attention to the count . We have collections with many data objects associated. If you just want to play around, select a collection with less than 10 objects. collection contains the PID/URI for the collection. This is the ID you need to provide for the .get(CollectionId) function. Please be aware that you need to provide the full URI. Example: .get('https://meta.icos-cp.eu/collections/n7cIMHIyqHJKBeF_3jjgptHP') dobj contains a list (LIST[STR]) of all PID/URI associated data objects. count tells you how many data objects are associated with this collection. Returns a pandas data frame","title":"collection.getIdList()"},{"location":"modules/#collectionget","text":"collection.get(CollectionId) Create a collection object. See the class method above for the attributes available in the collection object. The CollectionId must be either the full ICOS URI of the collection landing page or the DOI (if one is available). Not all collections have a DOI. Both information can be extracted with the function .getIdList() .The following to lines to create 'myCollection' yield the same result : myCollection = get('https://meta.icos-cp.eu/collections/n7cIMHIyqHJKBeF_3jjgptHP') myCollection = get('10.18160/ry7n-3r04') Returns Collection","title":"collection.get()"},{"location":"modules/#sparql","text":"At the ICOS Carbon Portal we store all data and meta data as linked data in a triple store. For more information about this approach refer to Semantic Web , Resource Description Framework (RDF) , and Triple Stores . This module is a simple interface to the SPARQL endpoint at the Carbon Portal. You can write your own queries and use the module to query the database or use some of the provided built in queries. Load the module with: from icoscp.sparql.runsparql import RunSparql classmethod RunSparql(sparql_query='', output_format='txt') sparql_query needs to be a valid query. You can test a query directly at the online SPARQL endpoint at https://meta.icos-cp.eu/sparqlclient/?type=CSV . The ouput format is by default (txt/json) but you can adjust with the following formats ['json', 'csv', 'dict', 'pandas', 'array', 'html'].","title":"Sparql"},{"location":"modules/#runsparqldata","text":"If a query is set and the method .run() was executed, it returns the result from the SPARQL endpoint. If no data is available the method returns False (BOOL). Return BOOL | STR","title":"RunSparql.data"},{"location":"modules/#runsparqlquery-query","text":"Retrieve or set the query. Return STR","title":"RunSparql.query = 'query'"},{"location":"modules/#runsparqlformat-fmt","text":"Retrieve or set the output format. fmt = 'json', 'csv', 'dict', 'pandas', 'array', 'html' Return STR","title":"RunSparql.format = 'fmt'"},{"location":"modules/#runsparqlrun","text":"This method actually executes the query and formats the result to the output format. If the sparql query is not executable because of syntax errors, for example, a TUPLE is returned (False, 'Bad Request') Return TUPLE | FMT","title":"RunSparql.run()"}]}