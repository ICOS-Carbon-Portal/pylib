{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the ICOS Carbon Portal Python Library ICOS The Integrated Carbon Observation System, ICOS, is a European-wide greenhouse gas research infrastructure. ICOS produces standardised data on greenhouse gas concentrations in the atmosphere, as well as on carbon fluxes between the atmosphere, the earth and oceans. This information is being used by scientists as well as by decision-makers in predicting and mitigating climate change. The ICOS Station Network consists of over 140 measurement stations in three domains located in 14 countries in Europe. For more information please visit https://www.icos-cp.eu/ . This library provides easy access to data hosted at the ICOS Carbon Portal ( https://data.icos-cp.eu/ ). By using this library you can load data files directly into memory. The approach of this library is to free you from downloading and maintaining a local copy of data files and if you choose to use our Jupyter Hub services, you don't even need computational power. If you would rather stick to the conventional \"download the data approach\", to store and use the data locally, we suggest you go to the data portal website to find and \"download\" the data. Please be aware, that by either downloading data or accessing data directly through this library, you agree and accept, that all ICOS data is provided under a CC BY 4.0 licence ( licence.pdf ) The ICOS Carbon Portal provides persistent digital object identifiers for each data set or file to improve the FAIR-ness of data and to give all the users easy to use tools for provenance, citation and reproducibility, etc. Hence you only need to store a list of PID's (persistent digital object identifiers), or you can use one of the built-in SPARQL queries, to reproduce always the same result, regardless of the computer you run it on. You can share your code with colleagues, without the need of moving data around. You bring the software to the data, rather than data to the software. This is especially true if you create a Jupyter Notebook hosted at the Carbon Portal.","title":"About"},{"location":"#welcome-to-the-icos-carbon-portal-python-library","text":"","title":"Welcome to the ICOS Carbon Portal Python Library"},{"location":"#icos","text":"The Integrated Carbon Observation System, ICOS, is a European-wide greenhouse gas research infrastructure. ICOS produces standardised data on greenhouse gas concentrations in the atmosphere, as well as on carbon fluxes between the atmosphere, the earth and oceans. This information is being used by scientists as well as by decision-makers in predicting and mitigating climate change. The ICOS Station Network consists of over 140 measurement stations in three domains located in 14 countries in Europe. For more information please visit https://www.icos-cp.eu/ . This library provides easy access to data hosted at the ICOS Carbon Portal ( https://data.icos-cp.eu/ ). By using this library you can load data files directly into memory. The approach of this library is to free you from downloading and maintaining a local copy of data files and if you choose to use our Jupyter Hub services, you don't even need computational power. If you would rather stick to the conventional \"download the data approach\", to store and use the data locally, we suggest you go to the data portal website to find and \"download\" the data. Please be aware, that by either downloading data or accessing data directly through this library, you agree and accept, that all ICOS data is provided under a CC BY 4.0 licence ( licence.pdf ) The ICOS Carbon Portal provides persistent digital object identifiers for each data set or file to improve the FAIR-ness of data and to give all the users easy to use tools for provenance, citation and reproducibility, etc. Hence you only need to store a list of PID's (persistent digital object identifiers), or you can use one of the built-in SPARQL queries, to reproduce always the same result, regardless of the computer you run it on. You can share your code with colleagues, without the need of moving data around. You bring the software to the data, rather than data to the software. This is especially true if you create a Jupyter Notebook hosted at the Carbon Portal.","title":"ICOS"},{"location":"changelog/","text":"Changelog 0.1.15 cpb module Dobj change to read metadata from http request. Instead of using sparql queries, a http request is used to load the same meta data as available from the website. Add new script to extract metadata from server metadata.py . Add new property .meta returns a dictionary based on the meta data available from the landing page of a data object containing a very rich set of information. An example: https://meta.icos-cp.eu/objects/M8STRfcQfU4Yj7Uy0snHvlve/meta.json Add new property: .previous Return the pid/url of the previous version of this file if available. Add new property: .next -> Return the pid/url of the next version of this file if available. Add new property: .variables Return a PandasDataFrame with metadata for all variables ['name', 'unit', 'type', 'format']. Add new property: .alt Returns altitude of station, the same as .elevation . Remove properties: ._info1 , ._info2 , ._info3 from Dobj. Change .info (consisted of info 1,2,3,) and return .meta instead. Change .station : Returns a dictionary with a subset of .meta describing the station. Change of .colNames : returns now a list of strings with all variable names instead of a pandas core series. License is extracted dynamically from the metadata per object. Add new method get_citation(format='plain') . Returns the citation by default as plain string, the same as .citation (property) which internally calls this method. Argument options are ('bibtex', 'ris', 'plain') -> .citation('bibtex'|'ris'|'plain') . print(Dobj) output of __str__ changed to plain citation string, instead of pid. References to server calls moved to const.py . Rename file dtype_dict.py to dtype.py for better readability. add simple unit test and implement initial assertions for the cpb module. Access to data .data [property] will always return all columns. .get(columns=None) [method] returns all data by default. Provides the possibility to extract specific columns from the data set. Expected is a list of column names, which then returns only the selected columns. Non valid entries are removed from the list (if only non valid entries are provided, an empty list by default returns all columns). Please be aware, that .get() will ALWAYS return ALL columns if executed on the Carbon Portal server. Valid entries can be obtained with .colNames or `.variables['name']. .getColumns(columns=None) , this is exactly the same as .get(columns='None'). We keep this function for compatibility to previous versions. Other changes add icon argument to station.getIdList() function. regenerate STILT module's static stations.json . resolve deprecation warnings from numpy calls. implement stiltstation.find() by project . add outfmt='avail' argument to stiltstation.find() function to generate an availability table for STILT stations . fix stiltstation.find(outfmt='list') . fix print(stiltobj) by removing country information. Country information can still be retrieved using the .info attribute of the StilStation object. 0.1.14 update get_ts() to case-insensitive and include co2.bio.gee and co2.bio.resp in the co2 results correctly redirect nominatim requests when icos nominatim is unable to reverse geocode. 0.1.13 rework directory listing of STILT stations and ignore queued but empty stations 0.1.12 fix stiltstation.find() to return all STILT stations switch to ICOS reverse geocoder as default precompute all known stations to speed up search functions if possible, use ICOS station's latitude/longitude when reverse geocoding a STILT station for precision 0.1.11 rework process of requesting stilt stations add a progress bar when requesting stilt stations update user information when using the stilt module add stilt data reporting to the back-end 0.1.10 adjust pylib version reported to the back-end include non-code files to distribution inform users when wrongly accessing the Stilt module locally 0.1.9 add Stilt module and documentation add local country information add folium map extension to getIdList() function 0.1.8 change licence on https://pypi.org/project/icoscp/ to https://www.icos-cp.eu/data-services/about-data-portal/data-license adjust portal use internal flag 0.1.7 add licence attribute to Dobj() handle single str input to station.getList() stats report distinguish between intern/external usage remove _checkdata flag from station.info() update documentation 0.1.6 2021/03/29 add sparql queries for availability table typos and additions to documentation move changelog to separate file 0.1.5 2020/10/20 fix bug introduced with v 0.1.4 datasets with optional columns where not loaded if data object specifications mismatched the list of columns 0.1.4 -2020/10/16 - add support for regex columns 0.1.3 2020/10/01 Add module 'collection' to support loading data products. See Modules / collection Change behaviour of Dobj to keep data persistent. The pandas data frame is now persistent stored as pandas dataframe in the object. Older versions did query the server every time for the data. A new attribute is available: Dobj.data which returns the pandas dataframe. This change in behaviour is controlled with Dobj._datapersistent = True (default), and can be reverted by setting it to False. A new attribute Dobj.id is available (which is equivalent to Dobj.dobj) but is more human understandable. Dobj.id retrieves or sets the PID/URI. 0.1.2 2020/07/15 first public version to pypi.org","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#0115","text":"","title":"0.1.15"},{"location":"changelog/#cpb-module","text":"Dobj change to read metadata from http request. Instead of using sparql queries, a http request is used to load the same meta data as available from the website. Add new script to extract metadata from server metadata.py . Add new property .meta returns a dictionary based on the meta data available from the landing page of a data object containing a very rich set of information. An example: https://meta.icos-cp.eu/objects/M8STRfcQfU4Yj7Uy0snHvlve/meta.json Add new property: .previous Return the pid/url of the previous version of this file if available. Add new property: .next -> Return the pid/url of the next version of this file if available. Add new property: .variables Return a PandasDataFrame with metadata for all variables ['name', 'unit', 'type', 'format']. Add new property: .alt Returns altitude of station, the same as .elevation . Remove properties: ._info1 , ._info2 , ._info3 from Dobj. Change .info (consisted of info 1,2,3,) and return .meta instead. Change .station : Returns a dictionary with a subset of .meta describing the station. Change of .colNames : returns now a list of strings with all variable names instead of a pandas core series. License is extracted dynamically from the metadata per object. Add new method get_citation(format='plain') . Returns the citation by default as plain string, the same as .citation (property) which internally calls this method. Argument options are ('bibtex', 'ris', 'plain') -> .citation('bibtex'|'ris'|'plain') . print(Dobj) output of __str__ changed to plain citation string, instead of pid. References to server calls moved to const.py . Rename file dtype_dict.py to dtype.py for better readability. add simple unit test and implement initial assertions for the cpb module.","title":"cpb module"},{"location":"changelog/#access-to-data","text":".data [property] will always return all columns. .get(columns=None) [method] returns all data by default. Provides the possibility to extract specific columns from the data set. Expected is a list of column names, which then returns only the selected columns. Non valid entries are removed from the list (if only non valid entries are provided, an empty list by default returns all columns). Please be aware, that .get() will ALWAYS return ALL columns if executed on the Carbon Portal server. Valid entries can be obtained with .colNames or `.variables['name']. .getColumns(columns=None) , this is exactly the same as .get(columns='None'). We keep this function for compatibility to previous versions.","title":"Access to data"},{"location":"changelog/#other-changes","text":"add icon argument to station.getIdList() function. regenerate STILT module's static stations.json . resolve deprecation warnings from numpy calls. implement stiltstation.find() by project . add outfmt='avail' argument to stiltstation.find() function to generate an availability table for STILT stations . fix stiltstation.find(outfmt='list') . fix print(stiltobj) by removing country information. Country information can still be retrieved using the .info attribute of the StilStation object.","title":"Other changes"},{"location":"changelog/#0114","text":"update get_ts() to case-insensitive and include co2.bio.gee and co2.bio.resp in the co2 results correctly redirect nominatim requests when icos nominatim is unable to reverse geocode.","title":"0.1.14"},{"location":"changelog/#0113","text":"rework directory listing of STILT stations and ignore queued but empty stations","title":"0.1.13"},{"location":"changelog/#0112","text":"fix stiltstation.find() to return all STILT stations switch to ICOS reverse geocoder as default precompute all known stations to speed up search functions if possible, use ICOS station's latitude/longitude when reverse geocoding a STILT station for precision","title":"0.1.12"},{"location":"changelog/#0111","text":"rework process of requesting stilt stations add a progress bar when requesting stilt stations update user information when using the stilt module add stilt data reporting to the back-end","title":"0.1.11"},{"location":"changelog/#0110","text":"adjust pylib version reported to the back-end include non-code files to distribution inform users when wrongly accessing the Stilt module locally","title":"0.1.10"},{"location":"changelog/#019","text":"add Stilt module and documentation add local country information add folium map extension to getIdList() function","title":"0.1.9"},{"location":"changelog/#018","text":"change licence on https://pypi.org/project/icoscp/ to https://www.icos-cp.eu/data-services/about-data-portal/data-license adjust portal use internal flag","title":"0.1.8"},{"location":"changelog/#017","text":"add licence attribute to Dobj() handle single str input to station.getList() stats report distinguish between intern/external usage remove _checkdata flag from station.info() update documentation","title":"0.1.7"},{"location":"changelog/#016","text":"2021/03/29 add sparql queries for availability table typos and additions to documentation move changelog to separate file","title":"0.1.6"},{"location":"changelog/#015","text":"2020/10/20 fix bug introduced with v 0.1.4 datasets with optional columns where not loaded if data object specifications mismatched the list of columns","title":"0.1.5"},{"location":"changelog/#014","text":"-2020/10/16 - add support for regex columns","title":"0.1.4"},{"location":"changelog/#013","text":"2020/10/01 Add module 'collection' to support loading data products. See Modules / collection Change behaviour of Dobj to keep data persistent. The pandas data frame is now persistent stored as pandas dataframe in the object. Older versions did query the server every time for the data. A new attribute is available: Dobj.data which returns the pandas dataframe. This change in behaviour is controlled with Dobj._datapersistent = True (default), and can be reverted by setting it to False. A new attribute Dobj.id is available (which is equivalent to Dobj.dobj) but is more human understandable. Dobj.id retrieves or sets the PID/URI.","title":"0.1.3"},{"location":"changelog/#012","text":"2020/07/15 first public version to pypi.org","title":"0.1.2"},{"location":"examples/","text":"Examples The following paragraphs explain how to use the library in worked examples. If you would like to run the library live and play around with data sets without installation: We have a public Jupyter Hub running Python3 notebooks, where the library is preinstalled. There you will find several examples in the folder pylib_examples https://exploredata.icos-cp.eu/ user: name@organisation password: get in touch to get the password Digital Object For the example below, we assume that you know how to get hold of the PID/URI used at the Carbon Portal. You can read more about this in the Modules section. Each object in the data portal has a unique and persistent identification in form of an URI. The following examples will use the URI https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc which is an ICOS Atmosphere Level 2 data set from Norunda, release 2019-1. Go to the landing page to find more information about this data set. Data Object from icoscp.cpb.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') Information (meta data) is automatically stored in a dictionary (the json -file from the landing page) with the object, accessible with Dobj.meta . More about the content of meta and other attributes are in the modules section . Common used properties are as well available directly. Following are a few examples: dobj.colNames ['TIMESTAMP', 'Flag', 'NbPoints', 'ch4', 'Stdev'] or get the citation string for this object: dobj.citation \"Lehner, I., M\u00f6lder, M., ICOS RI, 2019. ICOS ATC CH4 Release, Norunda (59.0 m), 2017-04-01\u20132019-04-30, https://hdl.handle.net/11676/lNJPHqvsMuTAh-3DOvJejgYc\" DataFrame Extracting the data as pandas data frame: from icoscp.cpb.dobj import Dobj uri = 'https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc' do = Dobj(uri) if do.valid: display(do.data.head(10)) else: print('no preview data available') Printing the first 10 rows of the data ( data.head(10) ) should yield the following table: id Flag NbPoints Stdev TIMESTAMP ch4 0 N 0 -9.990 2017-04-01 00:00:00 NaN 1 N 0 -9.990 2017-04-01 01:00:00 NaN 2 O 9 0.079 2017-04-01 02:00:00 1948.660034 3 O 16 1.070 2017-04-01 03:00:00 1950.900024 4 O 17 0.817 2017-04-01 04:00:00 1953.229980 5 O 16 0.271 2017-04-01 05:00:00 1956.319946 6 O 16 0.590 2017-04-01 06:00:00 1957.810059 7 O 16 0.736 2017-04-01 07:00:00 1960.550049 8 O 16 0.429 2017-04-01 08:00:00 1962.540039 9 O 17 0.861 2017-04-01 09:00:00 1965.349976 Minimalistic Plot This first example shows how to extract a data file and create a plot. It is the easiest way to load the data into a Pandas DataFrame in your Python environment. The DataFrame contains the following columNames: Flag, NbPoints, Stdev, TIMESTAMP, ch4. Let's load the data and create a plot for measured methane concentrations over time. from icoscp.cpb.dobj import Dobj pid = 'https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc' dobj = Dobj(pid) dobj.data.plot(x='TIMESTAMP', y='ch4', grid=True) Plot with Title and Units To get a useful plot, at the very least we should have a title and the unit of measurement: import matplotlib.pyplot as plt from icoscp.cpb.dobj import Dobj pid = 'https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc' dobj = Dobj(pid) # extract information from the dobj meta data # look at dobj.meta for a full list of metadata unit = dobj.variables[dobj.variables.name == 'ch4'].unit.values[0] name = dobj.station['org']['name'] uri = dobj.station['org']['self']['uri'] title = f\"{name} \\n {uri}\" plot = dobj.data.plot(x='TIMESTAMP', y='ch4', grid=True, title=title) plot.set(ylabel=unit) plt.show() Stations Station Id's The function to get the station id's might be something you will use a lot. Based on a station id you can get all the dobj id's (PID/URI) and hence access to the data. So if you have no idea whatsoever what stations are available, you came to the right place: from icoscp.station import station stationList = station.getIdList() # returns a Pandas DataFrame stationList.columns # what information do we get back? Index(['uri', 'id', 'name', 'country', 'lat', 'lon', 'elevation', 'project', 'theme'], dtype='object') stationList.head(5) uri id name ... project theme ... SE-Sto Abisko-Stordalen Palsa Bog ... ICOS ES ... IT-Noe Arca di Noe - Le Prigionette ... ICOS ES ... UK-AMo Auchencorth Moss ... ICOS ES ... FR-Aur Aurade ... ICOS ES ... 11BE BE-SOOP-Belgica ... ICOS OS Now you have basic information about a station, but most important you got the station id as well. NOTE: to create a station object you need to provide the station id as is CaseSensitiv A station Object Let's create a station object and have a look what information is provided with the function .info() . Each entry from \"info\" is an attribute and can be extracted with \"myStation.attribute\". In the following example you can access the station name with myStation.name from icoscp.station import station myStation = station.get('SE-Nor') myStation.info() { 'stationId': 'SE-Nor', 'name': 'Norunda', 'theme': 'ES', 'icosclass': '2', 'siteType': 'Forest', 'lat': 60.0865, 'lon': 17.4795, 'eas': None, 'eag': '36', 'firstName': 'Meelis', 'lastName': 'M\u00f6lder', 'email': 'meelis.molder@nateko.lu.se', 'country': 'SE', 'project': ['ICOS'], 'uri': ['http://meta.icos-cp.eu/resources/stations/ES_SE-Nor']} myStation.products() # return DataFrame with all products available from this station id specification 0 Drought 2018 Archive Product 1 Ecosystem meteo time series (ICOS Sweden) 2 Ecosystem fluxes time series (ICOS Sweden) 3 Ecosystem eco time series (ICOS Sweden) 4 Drought 2018 FLUXNET Product 5 ICOS ETC Archive Product 6 ICOS ETC FLUXNET Product All the dobj URI's (ultimately containing the data itself) can be retrieved with \"myStation.data()\" let see what columns are provided. The most important information will be the 'dobj' column. This contains the link to the data and can be used to extract the data. from icoscp.station import station myStation = station.get('SE-Nor') myStation.data().columns Index(['station', 'dobj', 'spec', 'timeStart', 'timeEnd', 'specLabel', 'samplingheight', 'datalevel', 'bytes'], dtype='object') myStation.data(level='2') # return a DataFrame with Level 2 data objects for the station station dobj spec ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/KfJjYyksI2nxCiJU36UfYVY_ .../dought2018ArchiveProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/L-in6TpOcGjmXruwi3ESD9G2 .../drought2018FluxnetProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/mBPKiB9tIQZQGrsy8ehAinvz .../etcArchiveProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/XA_Ifq7BKqS0tkQd4dGVEFnM .../etcFluxnetProduct This is not the full output, just an excerpt. List of Stations There is a built in function to extract a list of stations. Be aware that if you extract all ICOS stations, a lot of information is gathered and retrieved. At the time of writing there are over a 100 stations and in can take up to a minute to extract all. from icoscp.station import station icosStations = station.getList() for s in icosStations: print(s.stationId, s.name, s.lat, s.lon) SE-Sto Abisko-Stordalen Palsa Bog 68.35596 19.04521 IT-Noe Arca di Noe - Le Prigionette 40.60617 8.15117 UK-AMo Auchencorth Moss 55.7925 -3.24362 FR-Aur Aurade 43.54965 1.106103 ... Collections Find a collection from icoscp.collection import collection collection.getIdList() Output is a pandas data frame, where each row contains information about a collection. The column collection or doi can be used to create a collection representation. The column dobj contains a list of all associated digital objects (the data) and the column count tells you how many data files are associated. collection doi title description dobj count https://meta.icos-cp.eu/collections/WM5ShdLFqP... 10.18160/P7E9-EKEA Ambient atmospheric methane observations from ... This dataset for historic ambient CH4 mole fra... [https://meta.icos-cp.eu/objects/pWqX-lRUsilS_... 30 Create a collection representation with the information from above, you can use either the collection or doi to initialize a collection representation and print some information. Have a look at Modules / collection for a full list of attributes. myCollection = collection.get('10.18160/P7E9-EKEA') myCollection.info() {'id': 'https://meta.icos-cp.eu/collections/WM5ShdLFqPSI0coyVa57G1_Z', 'doi': '10.18160/P7E9-EKEA', 'citation': 'Integrated Non-CO2 Observing System (INGOS). (2018). Ambient atmospheric methane observations from the ICOS/InGOS network 2000-2015. ICOS ERIC - Carbon Portal. https://doi.org/10.18160/P7E9-EKEA\\n', 'title': 'Ambient atmospheric methane observations from the ICOS/InGOS network 2000-2015', 'description': 'This dataset for historic ambient CH4 mole fractions is an important outcome of the FP7 InGOS project (http://www.ingos-infrastructure.eu, Grant Agreement Number 284274). Data from 17 stations have been reprocessed for the period 2000-2015; in some cases involving re-integration of chromatograms and in all cases re-calibrating the time series using updated assigned values for standard gases and target gases. All data have been brought to the same concentration scale (NOAA-2006A). Data have been flagged for identified periods with instrumental or sampling problems. Next to added estimations for measurement uncertainty based on repeatability of the working standards also error estimates are added that represent uncertainty due to lab internal scale consistency, monthly reproducibility, scale transfer and where available comparison with concurrent flask sampling.'} A more in depth example and how to plot data from the collection can be found on https://exploredata.icos-cp.eu","title":"Examples"},{"location":"examples/#examples","text":"The following paragraphs explain how to use the library in worked examples. If you would like to run the library live and play around with data sets without installation: We have a public Jupyter Hub running Python3 notebooks, where the library is preinstalled. There you will find several examples in the folder pylib_examples https://exploredata.icos-cp.eu/ user: name@organisation password: get in touch to get the password","title":"Examples"},{"location":"examples/#digital-object","text":"For the example below, we assume that you know how to get hold of the PID/URI used at the Carbon Portal. You can read more about this in the Modules section. Each object in the data portal has a unique and persistent identification in form of an URI. The following examples will use the URI https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc which is an ICOS Atmosphere Level 2 data set from Norunda, release 2019-1. Go to the landing page to find more information about this data set.","title":"Digital Object"},{"location":"examples/#data-object","text":"from icoscp.cpb.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') Information (meta data) is automatically stored in a dictionary (the json -file from the landing page) with the object, accessible with Dobj.meta . More about the content of meta and other attributes are in the modules section . Common used properties are as well available directly. Following are a few examples: dobj.colNames ['TIMESTAMP', 'Flag', 'NbPoints', 'ch4', 'Stdev'] or get the citation string for this object: dobj.citation \"Lehner, I., M\u00f6lder, M., ICOS RI, 2019. ICOS ATC CH4 Release, Norunda (59.0 m), 2017-04-01\u20132019-04-30, https://hdl.handle.net/11676/lNJPHqvsMuTAh-3DOvJejgYc\"","title":"Data Object"},{"location":"examples/#dataframe","text":"Extracting the data as pandas data frame: from icoscp.cpb.dobj import Dobj uri = 'https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc' do = Dobj(uri) if do.valid: display(do.data.head(10)) else: print('no preview data available') Printing the first 10 rows of the data ( data.head(10) ) should yield the following table: id Flag NbPoints Stdev TIMESTAMP ch4 0 N 0 -9.990 2017-04-01 00:00:00 NaN 1 N 0 -9.990 2017-04-01 01:00:00 NaN 2 O 9 0.079 2017-04-01 02:00:00 1948.660034 3 O 16 1.070 2017-04-01 03:00:00 1950.900024 4 O 17 0.817 2017-04-01 04:00:00 1953.229980 5 O 16 0.271 2017-04-01 05:00:00 1956.319946 6 O 16 0.590 2017-04-01 06:00:00 1957.810059 7 O 16 0.736 2017-04-01 07:00:00 1960.550049 8 O 16 0.429 2017-04-01 08:00:00 1962.540039 9 O 17 0.861 2017-04-01 09:00:00 1965.349976","title":"DataFrame"},{"location":"examples/#minimalistic-plot","text":"This first example shows how to extract a data file and create a plot. It is the easiest way to load the data into a Pandas DataFrame in your Python environment. The DataFrame contains the following columNames: Flag, NbPoints, Stdev, TIMESTAMP, ch4. Let's load the data and create a plot for measured methane concentrations over time. from icoscp.cpb.dobj import Dobj pid = 'https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc' dobj = Dobj(pid) dobj.data.plot(x='TIMESTAMP', y='ch4', grid=True)","title":"Minimalistic Plot"},{"location":"examples/#plot-with-title-and-units","text":"To get a useful plot, at the very least we should have a title and the unit of measurement: import matplotlib.pyplot as plt from icoscp.cpb.dobj import Dobj pid = 'https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc' dobj = Dobj(pid) # extract information from the dobj meta data # look at dobj.meta for a full list of metadata unit = dobj.variables[dobj.variables.name == 'ch4'].unit.values[0] name = dobj.station['org']['name'] uri = dobj.station['org']['self']['uri'] title = f\"{name} \\n {uri}\" plot = dobj.data.plot(x='TIMESTAMP', y='ch4', grid=True, title=title) plot.set(ylabel=unit) plt.show()","title":"Plot with Title and Units"},{"location":"examples/#stations","text":"","title":"Stations"},{"location":"examples/#station-ids","text":"The function to get the station id's might be something you will use a lot. Based on a station id you can get all the dobj id's (PID/URI) and hence access to the data. So if you have no idea whatsoever what stations are available, you came to the right place: from icoscp.station import station stationList = station.getIdList() # returns a Pandas DataFrame stationList.columns # what information do we get back? Index(['uri', 'id', 'name', 'country', 'lat', 'lon', 'elevation', 'project', 'theme'], dtype='object') stationList.head(5) uri id name ... project theme ... SE-Sto Abisko-Stordalen Palsa Bog ... ICOS ES ... IT-Noe Arca di Noe - Le Prigionette ... ICOS ES ... UK-AMo Auchencorth Moss ... ICOS ES ... FR-Aur Aurade ... ICOS ES ... 11BE BE-SOOP-Belgica ... ICOS OS Now you have basic information about a station, but most important you got the station id as well. NOTE: to create a station object you need to provide the station id as is CaseSensitiv","title":"Station Id's"},{"location":"examples/#a-station-object","text":"Let's create a station object and have a look what information is provided with the function .info() . Each entry from \"info\" is an attribute and can be extracted with \"myStation.attribute\". In the following example you can access the station name with myStation.name from icoscp.station import station myStation = station.get('SE-Nor') myStation.info() { 'stationId': 'SE-Nor', 'name': 'Norunda', 'theme': 'ES', 'icosclass': '2', 'siteType': 'Forest', 'lat': 60.0865, 'lon': 17.4795, 'eas': None, 'eag': '36', 'firstName': 'Meelis', 'lastName': 'M\u00f6lder', 'email': 'meelis.molder@nateko.lu.se', 'country': 'SE', 'project': ['ICOS'], 'uri': ['http://meta.icos-cp.eu/resources/stations/ES_SE-Nor']} myStation.products() # return DataFrame with all products available from this station id specification 0 Drought 2018 Archive Product 1 Ecosystem meteo time series (ICOS Sweden) 2 Ecosystem fluxes time series (ICOS Sweden) 3 Ecosystem eco time series (ICOS Sweden) 4 Drought 2018 FLUXNET Product 5 ICOS ETC Archive Product 6 ICOS ETC FLUXNET Product All the dobj URI's (ultimately containing the data itself) can be retrieved with \"myStation.data()\" let see what columns are provided. The most important information will be the 'dobj' column. This contains the link to the data and can be used to extract the data. from icoscp.station import station myStation = station.get('SE-Nor') myStation.data().columns Index(['station', 'dobj', 'spec', 'timeStart', 'timeEnd', 'specLabel', 'samplingheight', 'datalevel', 'bytes'], dtype='object') myStation.data(level='2') # return a DataFrame with Level 2 data objects for the station station dobj spec ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/KfJjYyksI2nxCiJU36UfYVY_ .../dought2018ArchiveProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/L-in6TpOcGjmXruwi3ESD9G2 .../drought2018FluxnetProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/mBPKiB9tIQZQGrsy8ehAinvz .../etcArchiveProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/XA_Ifq7BKqS0tkQd4dGVEFnM .../etcFluxnetProduct This is not the full output, just an excerpt.","title":"A station Object"},{"location":"examples/#list-of-stations","text":"There is a built in function to extract a list of stations. Be aware that if you extract all ICOS stations, a lot of information is gathered and retrieved. At the time of writing there are over a 100 stations and in can take up to a minute to extract all. from icoscp.station import station icosStations = station.getList() for s in icosStations: print(s.stationId, s.name, s.lat, s.lon) SE-Sto Abisko-Stordalen Palsa Bog 68.35596 19.04521 IT-Noe Arca di Noe - Le Prigionette 40.60617 8.15117 UK-AMo Auchencorth Moss 55.7925 -3.24362 FR-Aur Aurade 43.54965 1.106103 ...","title":"List of Stations"},{"location":"examples/#collections","text":"","title":"Collections"},{"location":"examples/#find-a-collection","text":"from icoscp.collection import collection collection.getIdList() Output is a pandas data frame, where each row contains information about a collection. The column collection or doi can be used to create a collection representation. The column dobj contains a list of all associated digital objects (the data) and the column count tells you how many data files are associated. collection doi title description dobj count https://meta.icos-cp.eu/collections/WM5ShdLFqP... 10.18160/P7E9-EKEA Ambient atmospheric methane observations from ... This dataset for historic ambient CH4 mole fra... [https://meta.icos-cp.eu/objects/pWqX-lRUsilS_... 30","title":"Find a collection"},{"location":"examples/#create-a-collection-representation","text":"with the information from above, you can use either the collection or doi to initialize a collection representation and print some information. Have a look at Modules / collection for a full list of attributes. myCollection = collection.get('10.18160/P7E9-EKEA') myCollection.info() {'id': 'https://meta.icos-cp.eu/collections/WM5ShdLFqPSI0coyVa57G1_Z', 'doi': '10.18160/P7E9-EKEA', 'citation': 'Integrated Non-CO2 Observing System (INGOS). (2018). Ambient atmospheric methane observations from the ICOS/InGOS network 2000-2015. ICOS ERIC - Carbon Portal. https://doi.org/10.18160/P7E9-EKEA\\n', 'title': 'Ambient atmospheric methane observations from the ICOS/InGOS network 2000-2015', 'description': 'This dataset for historic ambient CH4 mole fractions is an important outcome of the FP7 InGOS project (http://www.ingos-infrastructure.eu, Grant Agreement Number 284274). Data from 17 stations have been reprocessed for the period 2000-2015; in some cases involving re-integration of chromatograms and in all cases re-calibrating the time series using updated assigned values for standard gases and target gases. All data have been brought to the same concentration scale (NOAA-2006A). Data have been flagged for identified periods with instrumental or sampling problems. Next to added estimations for measurement uncertainty based on repeatability of the working standards also error estimates are added that represent uncertainty due to lab internal scale consistency, monthly reproducibility, scale transfer and where available comparison with concurrent flask sampling.'} A more in depth example and how to plot data from the collection can be found on https://exploredata.icos-cp.eu","title":"Create a collection representation"},{"location":"faq/","text":"Things, which have popped up while using this library, and might be of interest Q&A Q1: The new meta data available in a digital object has many nested dictionaries. Can I print all the keys to get an overview of what information is available? A: You can use the following code, to print all keys from a nested dictionary. The example extracts the station information associated with the data object. This information is a 'subset' from the metadata do.meta['specificInfo']['acquisition']['station'] or, yielding the same information, through the convenience property: do.station . from icoscp.cpb.dobj import Dobj do = Dobj('j7-Lxlln8_ysi4DEV8qine_v') def get_keys(dictionary): result = [] for key, value in dictionary.items(): if type(value) is dict: new_keys = get_keys(value) result.append(key) for innerkey in new_keys: result.append(f'{key}/{innerkey}') else: result.append(key) return result metadata = do.station keys = get_keys(metadata) print(keys) output of all keys for the station metadata: 'id', 'location', 'location/alt', 'location/label', 'location/lat', 'location/lon', 'org', 'org/name', 'org/self', 'org/self/comments', 'org/self/label', 'org/self/uri', 'pictures', 'responsibleOrganization', 'responsibleOrganization/name', 'responsibleOrganization/self', 'responsibleOrganization/self/comments', 'responsibleOrganization/self/label', 'responsibleOrganization/self/uri', 'responsibleOrganization/website', 'specificInfo', 'specificInfo/_type', 'specificInfo/countryCode', 'specificInfo/discontinued', 'specificInfo/documentation', 'specificInfo/labelingDate', 'specificInfo/stationClass', 'specificInfo/theme', 'specificInfo/theme/icon', 'specificInfo/theme/markerIcon', 'specificInfo/theme/self', 'specificInfo/theme/self/comments', 'specificInfo/theme/self/label', 'specificInfo/theme/self/uri', 'specificInfo/timeZoneOffset', 'specificInfo/wigosId' Q2: dobj.station returns None A: The attribute of dobj.station is set only AFTER you have called dobj.data. Not very intuitive and will be rectified in a future release. update (>=version 0.1.15): The full meta data information about a digital object is available immediately. Q3: Collection data not available A: Collection is loosely assembled and may contain any kind of files and information. For example it is possible to gather pdf documents and NetCDF and some tabular files in a collection. These files will be presented to you, because they are within the collection. BUT only tabular files (where a preview is available in the data portal) can be accessed directly. With other words, you can NOT expect that you can 'load' all files listed in a collection. Q4: I have loaded a dataset, but found out that .next returns a PID. Hence I am not looking at the newest data. How can I retrieve the latest/newest version? A: The following code snippet will loop through the pid, returning the newest version: from icoscp.cpb.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') while dobj.valid: if dobj.next: dobj = Dobj(dobj.next) else: break # now dobj is the newest version Good to Know Stations are associated with the stationID. This means that at the moment a combined station, certified for Ecosystem AND Atmosphere, has two different stationId's and hence to access ALL data for such a station you need provide a list of stationId's to find a complete set of data products. Example Norunda, Sweden (stationId \"SE-Nor\" for Ecosystem, stationId \"NOR\" for Atmosphere).","title":"FAQ"},{"location":"faq/#qa","text":"","title":"Q&amp;A"},{"location":"faq/#q1","text":"The new meta data available in a digital object has many nested dictionaries. Can I print all the keys to get an overview of what information is available? A: You can use the following code, to print all keys from a nested dictionary. The example extracts the station information associated with the data object. This information is a 'subset' from the metadata do.meta['specificInfo']['acquisition']['station'] or, yielding the same information, through the convenience property: do.station . from icoscp.cpb.dobj import Dobj do = Dobj('j7-Lxlln8_ysi4DEV8qine_v') def get_keys(dictionary): result = [] for key, value in dictionary.items(): if type(value) is dict: new_keys = get_keys(value) result.append(key) for innerkey in new_keys: result.append(f'{key}/{innerkey}') else: result.append(key) return result metadata = do.station keys = get_keys(metadata) print(keys) output of all keys for the station metadata: 'id', 'location', 'location/alt', 'location/label', 'location/lat', 'location/lon', 'org', 'org/name', 'org/self', 'org/self/comments', 'org/self/label', 'org/self/uri', 'pictures', 'responsibleOrganization', 'responsibleOrganization/name', 'responsibleOrganization/self', 'responsibleOrganization/self/comments', 'responsibleOrganization/self/label', 'responsibleOrganization/self/uri', 'responsibleOrganization/website', 'specificInfo', 'specificInfo/_type', 'specificInfo/countryCode', 'specificInfo/discontinued', 'specificInfo/documentation', 'specificInfo/labelingDate', 'specificInfo/stationClass', 'specificInfo/theme', 'specificInfo/theme/icon', 'specificInfo/theme/markerIcon', 'specificInfo/theme/self', 'specificInfo/theme/self/comments', 'specificInfo/theme/self/label', 'specificInfo/theme/self/uri', 'specificInfo/timeZoneOffset', 'specificInfo/wigosId'","title":"Q1:"},{"location":"faq/#q2","text":"dobj.station returns None A: The attribute of dobj.station is set only AFTER you have called dobj.data. Not very intuitive and will be rectified in a future release. update (>=version 0.1.15): The full meta data information about a digital object is available immediately.","title":"Q2:"},{"location":"faq/#q3","text":"Collection data not available A: Collection is loosely assembled and may contain any kind of files and information. For example it is possible to gather pdf documents and NetCDF and some tabular files in a collection. These files will be presented to you, because they are within the collection. BUT only tabular files (where a preview is available in the data portal) can be accessed directly. With other words, you can NOT expect that you can 'load' all files listed in a collection.","title":"Q3:"},{"location":"faq/#q4","text":"I have loaded a dataset, but found out that .next returns a PID. Hence I am not looking at the newest data. How can I retrieve the latest/newest version? A: The following code snippet will loop through the pid, returning the newest version: from icoscp.cpb.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') while dobj.valid: if dobj.next: dobj = Dobj(dobj.next) else: break # now dobj is the newest version","title":"Q4:"},{"location":"faq/#good-to-know","text":"Stations are associated with the stationID. This means that at the moment a combined station, certified for Ecosystem AND Atmosphere, has two different stationId's and hence to access ALL data for such a station you need provide a list of stationId's to find a complete set of data products. Example Norunda, Sweden (stationId \"SE-Nor\" for Ecosystem, stationId \"NOR\" for Atmosphere).","title":"Good to Know"},{"location":"install/","text":"Installation This library is in active development and may change at any time. We do our best to keep the function calls and parameters consistent, but without a guarantee. You can follow the development on Github . Create an issue to leave comments, suggestions or if you find something not working as expected. The library has not been tested on many different operating systems and environments, hence we appreciate you telling us what is good and bad. The library is developed with Python 3.x and we assume that any recent Python distribution should work. If you have any trouble running the library, we are very keen to know why. Please get in touch ( jupyter-info@icos-cp.eu ) Pip official release The recommended way of installation is by using pip: pip install icoscp The installation should take care of any dependencies, but to successfully access any data object from the ICOS Carbon Portal you need to have a working internet connection. We would encourage you to use a virtual environment for python to test this library. For example with mini-conda https://docs.conda.io/en/latest/miniconda.html you can create a new environment with: conda create -n icos python activate icos pip install icoscp Manual installation If you would like to install the latest version (branch from Github), you can download / fork the repo navigate to the library folder and start the installation with: pip install . or python setup.py install Cutting Edge Install directly from our github master branch. Please be aware that this is not reflecting the official release of the library, but includes the latest development. Hence you should think of this as an alpha or beta version of the new release: pip install git+https://github.com/ICOS-Carbon-Portal/pylib.git Dependencies The following modules are required by the library: - requests - pandas - tqdm - folium","title":"Installation"},{"location":"install/#installation","text":"This library is in active development and may change at any time. We do our best to keep the function calls and parameters consistent, but without a guarantee. You can follow the development on Github . Create an issue to leave comments, suggestions or if you find something not working as expected. The library has not been tested on many different operating systems and environments, hence we appreciate you telling us what is good and bad. The library is developed with Python 3.x and we assume that any recent Python distribution should work. If you have any trouble running the library, we are very keen to know why. Please get in touch ( jupyter-info@icos-cp.eu )","title":"Installation"},{"location":"install/#pip-official-release","text":"The recommended way of installation is by using pip: pip install icoscp The installation should take care of any dependencies, but to successfully access any data object from the ICOS Carbon Portal you need to have a working internet connection. We would encourage you to use a virtual environment for python to test this library. For example with mini-conda https://docs.conda.io/en/latest/miniconda.html you can create a new environment with: conda create -n icos python activate icos pip install icoscp","title":"Pip official release"},{"location":"install/#manual-installation","text":"If you would like to install the latest version (branch from Github), you can download / fork the repo navigate to the library folder and start the installation with: pip install . or python setup.py install","title":"Manual installation"},{"location":"install/#cutting-edge","text":"Install directly from our github master branch. Please be aware that this is not reflecting the official release of the library, but includes the latest development. Hence you should think of this as an alpha or beta version of the new release: pip install git+https://github.com/ICOS-Carbon-Portal/pylib.git","title":"Cutting Edge"},{"location":"install/#dependencies","text":"The following modules are required by the library: - requests - pandas - tqdm - folium","title":"Dependencies"},{"location":"modules/","text":"Content The following modules are available in the library to find and access data hosted at the Carbon Portal. After a successful installation into your python environment you should be able to load the modules with: from icoscp.cpb.dobj import Dobj from icoscp.station import station from icoscp.collection import collection from icoscp.stilt import stiltstation from icoscp.sparql.runsparql import RunSparql from icoscp.sparql import sparqls Dobj This is the basic module to load a d igital obj ect (data set) into memory. You need to know a valid persistent identifier (PID/URL) to access the data. Either you can browse the data portal to find PID's or you can use the 'station' package to find PID's programmatically (see section station ). In essence each data object is linked to a unique and persistent identifier in the form of a URL. Hence, each data object has an on-line landing page. If you select any data object on https://data.icos-cp.eu and then navigate to the PID link (which looks like 11676/j7-Lxlln8_ysi4DEV8qine_v ) you end up on the 'landing' page of the document. If you look at the address bar of your browser, you will see a URL similar to https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v . To access the data you need to know this URL or the last part of the URL ( j7-Lxlln8_ysi4DEV8qine_v ). Load the module with: from icoscp.cpb.dobj import Dobj classmethod Dobj(digitalObject='') You can initialise a Dobj with a PID. The following statements yield the same result. myDobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') myDobj = Dobj('11676/j7-Lxlln8_ysi4DEV8qine_v') myDobj = Dobj('j7-Lxlln8_ysi4DEV8qine_v') or create an 'empty' instance and the set the identifier later: myDobj = Dobj() myDobj.dobj = \"j7-Lxlln8_ysi4DEV8qine_v\" Attributes: Dobj.info Please refer to the property .meta . The property .info returns now the same as .meta which was introduced with version 0.1.15. For provenance reasons only the following documentation is kept, but is only valid for installations 0.1.10 to 0.1.14: All Dobj related metadata is available in the following properties. This will return a list of three Pandas DataFrames which contain metadata. info[0] -> information about the dobj like, url, specification, number of rows, related file name. info[1] -> information about the data like colName, value type, unit, kind info[2] -> information about the station, where the data was obtained. Name, id, lat, lon etc.. - Return LIST[Pandas DataFrame] Dobj.meta This property was introduced with version 0.1.15 and is replacing .info . .meta returns a dictionary based on the meta data available from the landing page of the ICOS Caronb Portal website. Every data object has a rich set of meta data available. You can download an example from data portal: https://meta.icos-cp.eu/objects/M8STRfcQfU4Yj7Uy0snHvlve/meta.json . This will then be parsed into a python dictionary representing the metadata from ICOS. Some of the important key properties, like 'previous', 'next', 'citation', etc., are extracted for easy access and made available as properties. Please check this documentation. Dobj.citation Citation string, a simple plain text citation string. Return STR Dobj.get_citation(format) Returns the citation string in different formats. By default a plain formatted string is returned, the same as with with the property Dobj.citation . Possible formats are: plain : (default) a simple string bibtex : wikipedia ris : wikipedia Example: Dobj.get_citation('ris') Dobj.licence Licence associated with the dataset. Return DICT dict_keys(['baseLicence', 'name', 'url', 'webpage']) Dobj.previous If an older version of this data object is available, this returns the pid for this object. Return STR Dobj.next If a newer version of the data object is available, this returns the pid for this object. Return STR Dobj.colNames Available column names. This information is part of the Dobj.meta , which holds all the available metadata. Return LIST Dobj.variables This provides access to all available variables, including the unit, a short description (type) and the 'landing page' for the format used (int, float, chr, ...). The following example shows the variables for a data object of an atmospheric methane concentration: index name unit type format 0 TIMESTAMP None time instant, UTC http://meta.icos-cp.eu/ontologies/cpmeta/iso8601dateTime 1 Flag None quality flag http://meta.icos-cp.eu/ontologies/cpmeta/bmpChar 2 NbPoints None number of points http://meta.icos-cp.eu/ontologies/cpmeta/int32 3 ch4 nmol mol-1 CH4 mixing ratio (dry mole fraction) http://meta.icos-cp.eu/ontologies/cpmeta/float32 4 Stdev nmol mol-1 standard deviation of gas mole fraction http://meta.icos-cp.eu/ontologies/cpmeta/float32 Return Pandas DataFrame Dobj.data Retrieve the actual data for the PID. All available variables will be returned. Return Pandas DataFrame Dobj.get(variables) Retrieve the actual data for the PID. The same as .data but you have the option to retrieve only selected columns (or variables). Only valid and unique entries will be returned. You can see valid entries with .variables['name'] or .colNames . If columns are not provided, or if none of the provided variables are valid, or if you work with local data, the default DataFrame (with all columns) will be returned, which is the same as .data . Parameter variables: LIST[STR] Return Pandas DataFrame Dobj.getColumns(variables) This is exactly the same as .get() . See details above. We keep this for backward compatibility, please do not use. This function will be deprecated over time. Examples to retrieve data : # Create a dobj: do = Dobj('https://meta.icos-cp.eu/objects/9GVNGXhqvmn7UUsxSWp-zLyR') # Access all data, or specific columns: data = do.data # all data is returned<br> data = do.get(['timestamp','ch4']) # only timestamp and ch4 is returned<br> data = do.get(['timestamp','ch4','notValid']) # only timestamp and ch4 is returned<br> data = do.get() # all data is returned<br> Dobj.dateTimeConvert = True Set or retrieve. Default True . The binary data representation provides a UTC Timestamp as Unixtimestamp with start point of 1970-01-01 00:00:00. By default, this is converted to a DateTimeObject ( pandas._libs.tslibs.timestamps.Timestamp ). If you prefer to have the raw Unixtimestamp ( numpy.float64 ), set Dobj.dateTimeConvert = False prior to load the data with .get() or .data or .getColumns() . Return BOOL Dobj.dobj = PID See Dobj.id Dobj.id = PID Set or retrieve the PID for the Dobj, default is empty (\"\"). If a PID is set, an automatic check is performed to find the metadata for the object. If this is successful, the 'valid' property is set to True Return STR Dobj.valid True if PID is set and found at the ICOS Carbon Portal Return BOOL Dobj.lat Latitude for station Return FLOAT Dobj.lon Longitude for station Return FLOAT Dobj.elevation Elevation above sea level for station. Be aware, this is NOT the sampling height for the data points. Return FLOAT Dobj.alt This is exactly the same as .elevation Dobj.station This returns information about the station, where the data was collected/measured, to provide information about the provenance of the data. Further information about sammplingHeight, instruments, documentation, etc. can be found in dobj.meta['specificInfo']['acquisition'] . Please be aware that prior to version 0.1.15 this has returned a string with station id, which is now available as station['id']. An example code snippet on how to extract all 'keys' from a nested dictionary is available in the FAQ Return DICT Dobj.size() The real size of the dobj in [bytes, KB, MB, TB]. Since this object may contain the data, it is no longer just a pointer to data. Return TUPLE (int32, STR), where int32 represents the size and STR the unit. Example output looks like: (4.353, 'MB') Station The station module provides a search facility to explore ICOS stations and find associated data objects and data products. There is a lot of information available about the ICOS stations, partner countries, measured variables and much more in the ICOS Handbook . load the module with: from icoscp.station import station classmethod station.Station() The station object is primarily a data structure to store the associated metadata. The metadata is provided with specific and complex Sparql queries. It is possible to instantiate this class on its own, but we recommend using the convenience functions station.getIdList() station.get('StationID') station.getList() as described further below to create the station object. Once you have a created valid station object a list of attributes are available: Attributes: Station.country Country code Return STR Station.data(level=None) All associated data object for the station are returned. ICOS distinguishes data in terms of how processed they are. - Data level 1: Near Real Time Data (NRT) or Internal Work data (IW). - Data level 2: The final quality checked ICOS RI data set, published by the CFs, to be distributed through the Carbon Portal. This level is the ICOS-data product and free available for users. - Data level 3: All kinds of elaborated products by scientific communities that rely on ICOS data products are called Level 3 data. Return Pandas DataFrame Station.eag Elevation above ground , if available. Please note, this is general information about the height of the tower. This is NOT a sampling height, and it is not guaranteed to be accurate. Return FLOAT Station.eas Elevation above sea level in meter. Return FLOAT Station.icosclass Classification for certified ICOS stations. Please consult the ICOS Handbook for further information about the Class 1&2 certificate. Return STR Station.firstName PI (Principal Investigator) First Name. Return STR Station.lastName PI (Principal Investigator) last name Return STR Station.email PI (Principal Investigator) email address Return STR Station.lat Latitude for the station. Return FLOAT Station.lon Longitude for the station. Return FLOAT Station.name Returns the full name for the station. Return STR Station.project ICOS Carbon Portal is a data portal from and for the ICOS community. However, the data portal does host more than ICOS data. The station association is listed here (if available) Return LIST Station.stationId Set or retrieve the StationId Return STR Station.theme For ICOS stations a 'theme' is provided. Please note that, a station may belong to more than one theme, but with different themes. For example the stationId \"NOR\" (Norunda, Sweden), will give you access to the atmospheric data products, whereas the stationId \"SE-Nor\" will return the Ecosystem data products. AS for Atmospheric Stations ES for Ecosystem Stations OS for Ocean Stations Return STR Station.uri Link to the landing page for the station. Because a station ID may be associated with more than one 'project' this returns a list of URI's Return LIST Station.valid True if stationId is found. Return BOOL Convenience functions The following three functions are recommended to get information about the available stations at the Carbon Portal and how to get a valid station object (or list of): station.getIdList() station.getIdList(project='ICOS', sort='name') This returns a DataFrame with columns: ['uri', 'id', 'name', 'country', 'lat', 'lon', 'elevation', 'project', 'theme'] By default, ICOS certified stations are returned. If project is set to 'all', all known stations (to the Carbon Portal) are returned. By default, the DataFrame is sorted by name. You can provide any column name as sorting parameter. The 'id' of the record, can be used to instantiate a station. Hence, it is easy to adjust and filter these records and use the column 'id' as input for station.get() Return Pandas DataFrame station.getIdList(project='ALL', outfmt='map', icon=None) If the optional argument outfmt='map' is provided, a folium map is created with all the queried stations provided by the project argument. Stations without a fixed location (like measurements collected from instrumented Ships of Opportunity) will not be included in the map. Each marker in the map represents a station and contains station related information. A user can further customize the style of the map by providing the icon argument [None, 'flag', 'path/to/image.png'] . Return Folium Map station.get() station.get('stationID') Provide a valid station id (see getIdList()) to create a Station object. NOTE: stationId is CaseSensitive. Return Station Object station.getList() station.getList(theme=['AS','ES','OS'], ids=None) This is the easiest way to get a list of ICOS stations. By default, a full list of all certified ICOS stations is returned. You can filter the output by provided a list of themes OR you can provide a list of station id's. NOTE: If you provide a list of id's, the theme filter is ignored. station.getList(['as', 'os']) list with ICOS atmospheric and ocean stations station.getList(ids=['NOR', 'HTM', 'HUN']) list with stations NOR (Norunda), HTM (Hyltemossa), HUN (Hegyhatsal) Return LIST[Station Objects] Collection This module supports to load a collection of digital objects. Data products ( https://www.icos-cp.eu/data-products ) or collections are an assembly for a specific theme, or project. For example the ICOS community assembled data to provide a base for the Drought anomaly in 2018. This dataset was then used to study the impact of this extreme event, which ultimately led to a series of publications available as 'theme issue' in The Royal Society . Subsequently, the data sets are now public available at the ICOS Carbon Portal ( Drought-2018 ecosystem eddy covariance flux product for 52 stations and Drought-2018 atmospheric CO2 Mole Fraction product for 48 stations (96 sample heights) . Load the module with: from icoscp.collection import collection classmethod Collection(coll) (where coll represents a pandas.DataFrame , similar to the output from .getIdList()). BUT only similar. We do NOT Recommend to instantiate this class directly. Please use the function .get(CollectionId) . The Purpose of the class documentation is to provide you a list of attributes available, after the .get(CollectionId) return a collection object. Attributes: Collection.id This is the ICOS URI (PID). A link to the landing page on the ICOS data portal. Return STR Collection.doi If available, the official DOI in form of '10.18160/ry7n-3r04'. Return STR Collection.citation For convenience the citation string provided from [https://citation.crosscite.org/] is stored in this attribute. If you like to have a different format, please have a look at .getCitation description below. Return STR Collection.title Return STR Collection.description Return STR Collection.info() For convenience all the attributes above (id, doi, citation, title, description) . You can choose the output format with fmt=[\"dict\" | \"pandas\" | \"html\"]. The default is \"dict\". info(self, fmt='dict') Return FMT, default DICT Collection.datalink This returns a list of PID/URI of digital objects associated with the collection. Return LIST[STR] Collection.data This returns a list of Dobj associated to the collection. Please refer to the module Digital Object above. Return LIST[Dobj] Collection.getCitation() Collection.getCitation(format='apa', lang='en-GB')** If the collection has a DOI, you will get a citation string from https://citation.crosscite.org/ . You may provide any style & language parameters found on the website. Our default style is apa and language en-GB , which is stored in the attribute collection.citation . Use the function getCitation(), if you need a specific format & language adaption. Example to get a Bibtex styled citation: .getCitation('bibtex','de-CH') Convenience functions The following functions are recommended to get information about the available collections as well as creating an instance of a collection. collection.getIdList() collection.getIdList() This will return a pandas.DataFrame , listing all available collections at the data portal. The DataFrame contains the following columns: ['collection', 'doi', 'title', 'description', 'dobj', 'count'] . We would recommend that you pay close attention to the count . We have collections with many data objects associated. If you just want to play around, select a collection with less than 10 objects. collection contains the PID/URI for the collection. This is the ID you need to provide for the .get(CollectionId) function. Please be aware that you need to provide the full URI. Example: .get('https://meta.icos-cp.eu/collections/n7cIMHIyqHJKBeF_3jjgptHP') dobj contains a list (LIST[STR]) of all PID/URI associated data objects. count tells you how many data objects are associated with this collection. Returns a pandas DataFrame collection.get() collection.get(CollectionId) Create a collection object. See the class method above for the attributes available in the collection object. The CollectionId must be either the full ICOS URI of the collection landing page or the DOI (if one is available). Not all collections have a DOI. Both information can be extracted with the function .getIdList() .The following to lines to create 'myCollection' yield the same result : myCollection = get('https://meta.icos-cp.eu/collections/n7cIMHIyqHJKBeF_3jjgptHP') myCollection = get('10.18160/ry7n-3r04') Returns Collection STILT At the ICOS Carbon Portal we offer a service to calculate your own STILT footprints and visualize the results. Find out more on our website https://www.icos-cp.eu/data-services/tools/stilt-footprint . The calculated footprints and time series results are also available through this python library. Please be aware, that the calculated footprints are only available on our servers , including our virtual computational environments. Please read about our public available Jupyter Hub here . Time series can be accessed from outside our servers as well. load the module with: from icoscp.stilt import stiltstation Two functions are available: one to find STILT stations and one to extract the STILT station as an object, which gives access to the data (time series and footprints). stiltstation .find(**kwargs) This is the main function to find STILT stations. By default, it returns a dictionary where each station id is the key to access metadata about the station. The order how you provide keywords is respected and you can influence the result. Keyword arguments are applied sequentially (the result from the first keyword is provided as input to the second and so on). With no keyword provided stiltstation.find() returns a dictionary with ALL Stilt stations. The following keywords are available: id='STR' | ['STR','STR',...] Provide a single id as string, or a list of strings. You can provide either STILT or ICOS id's mixed together. stiltstation.find(id=['NOR', 'GAT344']) stiltstation.find(id='KIT030') search='STR' Arbitrary string search will find any occurrence of STR in the station metadata. stiltstation.find(search='south') stations=DICT all actions are performed on this dictionary, rather than dynamically search for all stilt station on our server. Can be useful for creating a subset of stations from an existing search. myStations = stiltstation.find(search='north') refined = stiltstation.find(stations=myStations, country='Finland') Spatial keywords country='STR' | ['STR','STR',...] Provide a single country id as string, or a list of strings. You can provide alpha-2, alpha-3 code (ISO 3166) or the full country name (some translations are available as well). To find all STILT stations with geolocation in Norway you can search for either NO, NOR, Norway, Norge. stiltstation.find(country=['Swe','norge', 'IT']) project='icos' This option will retrieve all STILT stations that are ICOS stations. bbox=[(lat,lon),(lat,lon)] Bounding Box. Provide two tuples (wgs84), where the box is defined as TopLeftCorner (NorthWest) and BottomRightCorner (SouthEast). The following example returns approximately all stations in Scandinavia. stiltstation.find(bbox=[(70,5),(55,32)]) pinpoint=[lat,lon,distanceKM] Provide a single point (lat, lon) and the Distance in KM, which creates a bounding box. Distance is very roughly translated with 1 degree = 1 km. The bounding box is calculated as distance in all directions. For example distance=200 will create a bounding box of 400 x 400 km with pinpoint in the centre. If you don't provide a distance, a default value of 200 is used. stiltstation.find(pinpoint=[55.7,13.1,500]) # bounding box ~ 1000km x 1000km stiltstation.find(pinpoint=[55.7,13.1]) # bounding box ~ 400km x 400km Temporal keywords Be aware, that the granularity for all temporal keywords is year and month, days are not considered in the search. Input format for the dates entry MUST be convertible to data time object through pandas.to_datetime(). Accepted formats are: datetime.date objs FLOAT or INT representing a unix timestamp (seconds since 1970-01-01) pandas.datetime STR: \"YYYY-MM-DD\" , \"YYYY\", \"YYYY/MM/DD\" sdate='start date' Stations are returned where results are available for >= start date. 'sdate' is a single entry. If you provide sdate AND edate, any station with available data within that date range is returned. (accepted formats see above) stiltstation.find(sdate= '2018-05-01') edate='end date' Stations are returned where results are available for <= end date. 'edate' is a single entry. If you provide sdate AND edate, any station with available data within that date range is returned. (accepted formats see above) stiltstation.find(edate='2018-06-01') dates=[] This will return a list of stations where data is available for any of the provided dates. Input format, see sdate,edate. Remember, that only year and month is checked. stiltstation.find(dates=['2020-01-01', '2020/05/23']) progress = BOOL By default a progress bar is displayed while searching all possible STILT stations. With this keyword you can show/hide the progress bar. stiltstation.find(progress=True) # DEFAULT, progress bar is displayed stiltstation.find(progress=False) # No progress bar outfmt = 'STR' where string is dict | pandas | list | map | avail . This keyword is ALWAYS executed last, regardless of the position within keyword arguments. By default, a dictionary is returned. With pandas a pandas DataFrame is returned where the station id is indexed, each row contains one station with the same metadata as is available in the dictionary https://pandas.pydata.org/docs/ . List however returns a list of STILT station objects. Please see the documentation about stiltstation.get(id=\"\") . The choice map , returns a folium map https://python-visualization.github.io/folium/ . The map can be displayed directly in a Jupyter Notebook, or you can save the map to a html file. stiltstation.find(country='Italy', outfmt='pandas') stiltstation.find(country='Italy', outfmt='pandas').save('mymap.html') Finally, the choice avail will return a pandas DataFrame where availability of timeseries data per STILT station is gathered for each year. .get(id='', progress=False) Returns a stilt station object or a list of stilt station objects. A stilt station object, gives access to the underlying data (timeseries and footprints). You may provide a STR or LIST[STR] of STILT id's or the 'result' of a .find() query. The properties of the returned stilt object is listed further below. id = STR | LIST[STR] Provide a string or list of strings representing a STILT station id's. id = DICT | LIST[DICT] provide a single dictionary, or a list of dictionaries. The dictionaries should be the result of a stiltstation.find() execution. progress = BOOL By default no progress bar is displayed while assembling the stiltstation object. With this keyword you can show/hide the progress bar. This parameter is only effective while providing id's. # return stilt stations based on stiltstation.find(id='STR') stiltstation.get('HTM') stiltstation.get(['KIT','HTM150'], progress = True) # return stilt stations based on dictionary or list of dict with a progressbar a = stiltstation.find(search='north') stiltstation.get(a) OR stiltstation.get(stiltstation.find(search='south')) STILT Object classmethod StiltStation(dict) Please do not use this class directly. You should load from icoscp.stilt import stiltstation and then use the function obj = stiltstation.get('HTM150) which will return a stilt station object. Once you have the object, the following attributes and methods are available: Attributes: .id Return STILT station ID (e.g. 'HTM150') as string. .locIdent String with latitude-longitude-altitude of STILT station (e.g. '35.34Nx025.67Ex00150') .alt Station altitude (in meters above ground level) .lat Station latitude .lon Station longitude .name STILT station long name .icos None | Dict. If the station is an ICOS station, a dictionary with ICOS metadata is available. .years List of years for which STILT results are available. Be aware that even if only one day is calculated for a year, year will be listed. .info Returns the diction with all metadata. .geoinfo Dictionary with geographical (country) information, if the station is within a country border. Methods: .get_ts(start_date, end_date, hours=[], columns=''): STILT concentration time series for a given time period, with optional selection of specific hours and columns. Returns time series as a pandas.DataFrame . start_date : STR, FLOAT/INT (Unix timestamp), datetime object start_date = '2018-01-01' end_date : STR, FLOAT/INT (Unix timestamp), datetime object end_date = '2018-01-31' hours : STR | INT, optional. If hours is empty or None, ALL Timeslots are returned. For backwards compatibility, input of str format hh:mm is accepted hours = [0,3,6,9,12,15,18,21] Valid results are returned with LOWER BOUND values. Example: hours = [\"02:00\",3,4] will return Timeslots for 0, 3 hours = [2,3,4,5,6] will return Timeslots for 0,3 and 6 hours = [] return ALL hours = [\"10\", \"10:00\", 10] returns timeslot 9 columns : STR, optional Valid entries are \"default\", \"co2\", \"co\", \"rn\", \"wind\", \"latlon\", \"all\" default: isodate, co2.stilt, co2.bio, co2.fuel, co2.cement, co2.background co2 isodate, co2.stilt, co2.bio, co2.fuel, co2.cement, co2.bio.gee, co2.bio.resp, co2.fuel.coal, co2.fuel.oil, co2.fuel.gas, co2.fuel.bio, co2.fuel.waste, co2.energy, co2.transport, co2.industry, co2.residential, co2.other_categories, co2.background co isodate, co.stilt, co.fuel, co.cement, co.fuel.coal, co.fuel.oil, co.fuel.gas, co.fuel.bio, co.fuel.waste, co.energy co.transport, co.industry, co.residential, co.other_categories, co.background rn isodate, rn, rn.era, rn.noah wind isodate, wind.dir, wind.u, wind.v latlon isodate, latstart, lonstart all isodate, co2.stilt, co2.bio, co2.fuel, co2.cement, co2.bio.gee, co2.bio.resp, co2.fuel.coal, co2.fuel.oil, co2.fuel.gas, co2.fuel.bio, co2.fuel.waste, co2.energy, co2.transport, co2.industry, co2.residential, co2.other_categories, co2.background, co.stilt, co.fuel, co.cement, co.fuel.coal, co.fuel.oil, co.fuel.gas, co.fuel.bio, co.fuel.waste, co.energy, co.transport, co.industry, co.residential, co.other_categories, co.background, rn, rn.era, rn.noah, wind.dir, wind.u, wind.v, latstart, lonstart .get_fp(start_date, end_date, hours=[]): STILT footprints for a given time period, with optional selection of specific hours. Returns the footprints as xarray http://xarray.pydata.org/en/stable/ with latitude, longitude, time, and ppm per (micromole m-2 s-1). start_date : STR, FLOAT/INT (Unix timestamp), datetime object. start_date = '2018-01-01' end_date : STR, FLOAT/INT (Unix timestamp), datetime object. end_date = '2018-01-31' hours : STR | INT, optional. If hours is empty or None, ALL Timeslots are returned. For backwards compatibility, input of str format hh:mm is accepted hours = [0,3,6,9,12,15,18,21] Valid results are returned with LOWER BOUND values. Example: hours = [\"02:00\",3,4] will return Timeslots for 0, 3 hours = [2,3,4,5,6] will return Timeslots for 0,3 and 6 hours = [] return ALL hours = [\"10\", \"10:00\", 10] returns timeslot 9 Sparql At the ICOS Carbon Portal we store all data and metadata as linked data in a triple store. For more information about this approach refer to Semantic Web , Resource Description Framework (RDF) , and Triple Stores . This module is a simple interface to the SPARQL endpoint at the Carbon Portal. You can write your own queries and use the module to query the database or use some of the provided built-in queries. Load the module with: from icoscp.sparql.runsparql import RunSparql classmethod RunSparql(sparql_query='', output_format='txt') sparql_query needs to be a valid query. You can test a query directly at the online SPARQL endpoint at https://meta.icos-cp.eu/sparqlclient/?type=CSV . The output format is by default (txt/json) but you can adjust with the following formats ['json', 'csv', 'dict', 'pandas', 'array', 'html']. Attributes: RunSparql.data If a query is set and the method .run() was executed, it returns the result from the SPARQL endpoint. If no data is available the method returns False (BOOL). Return BOOL | STR RunSparql.query = 'query' Retrieve or set the query. Return STR RunSparql.format = 'fmt' Retrieve or set the output format. fmt = 'json', 'csv', 'dict', 'pandas', 'array', 'html' Return STR RunSparql.run() This method actually executes the query and formats the result to the output format. If the sparql query is not executable because of syntax errors, for example, a TUPLE is returned (False, 'Bad Request') Return TUPLE | FMT Country Search country information, define global (to icoscp) a common tool to search for country information based on a static local file within the library ( country.json ). Search is facilitated through Alphanumeric 2 & 3 Code characters and arbitrary text search. Credit to https://github.com/mledoze/countries . Further a reverse geocoder search is provided through OSM. (credit to https://nominatim.openstreetmap.org ). Please note: in case you provide more than one parameter, the order of keywords is not respected. The execution order is always like the function signature and as soon as a result is found, it will be returned and the search is stopped. country.get(**kwargs) Accepted keywords: code='', name='', latlon=[], search='' Examples: .get() list of dict: all countries .get(code='CH') dict: Switzerland .get(name='greece') dict: Greece .get(latlon=[48.85, 2.35]) dict: .get(search='europe') Parameters code : STR Search by ISO 3166-1 2-letter or 3-letter country codes name : STR search by country name, including alternativ spellings. It can be the native name or a partial name. latlon : List[] List with two integer or floating point numbers representing latitude and longitude. BE AWARE: using an external service from openstreetmap for reverse geocoding search : STR arbitrary text search, not case sensitiv, search in all fields Returns DICT: if a single country is found LIST[DICT]: list of dictionaries if more than one country is found BOOL (False) if no result","title":"Modules"},{"location":"modules/#content","text":"The following modules are available in the library to find and access data hosted at the Carbon Portal. After a successful installation into your python environment you should be able to load the modules with: from icoscp.cpb.dobj import Dobj from icoscp.station import station from icoscp.collection import collection from icoscp.stilt import stiltstation from icoscp.sparql.runsparql import RunSparql from icoscp.sparql import sparqls","title":"Content"},{"location":"modules/#dobj","text":"This is the basic module to load a d igital obj ect (data set) into memory. You need to know a valid persistent identifier (PID/URL) to access the data. Either you can browse the data portal to find PID's or you can use the 'station' package to find PID's programmatically (see section station ). In essence each data object is linked to a unique and persistent identifier in the form of a URL. Hence, each data object has an on-line landing page. If you select any data object on https://data.icos-cp.eu and then navigate to the PID link (which looks like 11676/j7-Lxlln8_ysi4DEV8qine_v ) you end up on the 'landing' page of the document. If you look at the address bar of your browser, you will see a URL similar to https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v . To access the data you need to know this URL or the last part of the URL ( j7-Lxlln8_ysi4DEV8qine_v ). Load the module with: from icoscp.cpb.dobj import Dobj classmethod Dobj(digitalObject='') You can initialise a Dobj with a PID. The following statements yield the same result. myDobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') myDobj = Dobj('11676/j7-Lxlln8_ysi4DEV8qine_v') myDobj = Dobj('j7-Lxlln8_ysi4DEV8qine_v') or create an 'empty' instance and the set the identifier later: myDobj = Dobj() myDobj.dobj = \"j7-Lxlln8_ysi4DEV8qine_v\"","title":"Dobj"},{"location":"modules/#dobjinfo","text":"Please refer to the property .meta . The property .info returns now the same as .meta which was introduced with version 0.1.15. For provenance reasons only the following documentation is kept, but is only valid for installations 0.1.10 to 0.1.14: All Dobj related metadata is available in the following properties. This will return a list of three Pandas DataFrames which contain metadata. info[0] -> information about the dobj like, url, specification, number of rows, related file name. info[1] -> information about the data like colName, value type, unit, kind info[2] -> information about the station, where the data was obtained. Name, id, lat, lon etc.. - Return LIST[Pandas DataFrame]","title":"Dobj.info"},{"location":"modules/#dobjmeta","text":"This property was introduced with version 0.1.15 and is replacing .info . .meta returns a dictionary based on the meta data available from the landing page of the ICOS Caronb Portal website. Every data object has a rich set of meta data available. You can download an example from data portal: https://meta.icos-cp.eu/objects/M8STRfcQfU4Yj7Uy0snHvlve/meta.json . This will then be parsed into a python dictionary representing the metadata from ICOS. Some of the important key properties, like 'previous', 'next', 'citation', etc., are extracted for easy access and made available as properties. Please check this documentation.","title":"Dobj.meta"},{"location":"modules/#dobjcitation","text":"Citation string, a simple plain text citation string. Return STR","title":"Dobj.citation"},{"location":"modules/#dobjget_citationformat","text":"Returns the citation string in different formats. By default a plain formatted string is returned, the same as with with the property Dobj.citation . Possible formats are: plain : (default) a simple string bibtex : wikipedia ris : wikipedia Example: Dobj.get_citation('ris')","title":"Dobj.get_citation(format)"},{"location":"modules/#dobjlicence","text":"Licence associated with the dataset. Return DICT dict_keys(['baseLicence', 'name', 'url', 'webpage'])","title":"Dobj.licence"},{"location":"modules/#dobjprevious","text":"If an older version of this data object is available, this returns the pid for this object. Return STR","title":"Dobj.previous"},{"location":"modules/#dobjnext","text":"If a newer version of the data object is available, this returns the pid for this object. Return STR","title":"Dobj.next"},{"location":"modules/#dobjcolnames","text":"Available column names. This information is part of the Dobj.meta , which holds all the available metadata. Return LIST","title":"Dobj.colNames"},{"location":"modules/#dobjvariables","text":"This provides access to all available variables, including the unit, a short description (type) and the 'landing page' for the format used (int, float, chr, ...). The following example shows the variables for a data object of an atmospheric methane concentration: index name unit type format 0 TIMESTAMP None time instant, UTC http://meta.icos-cp.eu/ontologies/cpmeta/iso8601dateTime 1 Flag None quality flag http://meta.icos-cp.eu/ontologies/cpmeta/bmpChar 2 NbPoints None number of points http://meta.icos-cp.eu/ontologies/cpmeta/int32 3 ch4 nmol mol-1 CH4 mixing ratio (dry mole fraction) http://meta.icos-cp.eu/ontologies/cpmeta/float32 4 Stdev nmol mol-1 standard deviation of gas mole fraction http://meta.icos-cp.eu/ontologies/cpmeta/float32 Return Pandas DataFrame","title":"Dobj.variables"},{"location":"modules/#dobjdata","text":"Retrieve the actual data for the PID. All available variables will be returned. Return Pandas DataFrame","title":"Dobj.data"},{"location":"modules/#dobjgetvariables","text":"Retrieve the actual data for the PID. The same as .data but you have the option to retrieve only selected columns (or variables). Only valid and unique entries will be returned. You can see valid entries with .variables['name'] or .colNames . If columns are not provided, or if none of the provided variables are valid, or if you work with local data, the default DataFrame (with all columns) will be returned, which is the same as .data . Parameter variables: LIST[STR] Return Pandas DataFrame","title":"Dobj.get(variables)"},{"location":"modules/#dobjgetcolumnsvariables","text":"This is exactly the same as .get() . See details above. We keep this for backward compatibility, please do not use. This function will be deprecated over time. Examples to retrieve data : # Create a dobj: do = Dobj('https://meta.icos-cp.eu/objects/9GVNGXhqvmn7UUsxSWp-zLyR') # Access all data, or specific columns: data = do.data # all data is returned<br> data = do.get(['timestamp','ch4']) # only timestamp and ch4 is returned<br> data = do.get(['timestamp','ch4','notValid']) # only timestamp and ch4 is returned<br> data = do.get() # all data is returned<br>","title":"Dobj.getColumns(variables)"},{"location":"modules/#dobjdatetimeconvert-true","text":"Set or retrieve. Default True . The binary data representation provides a UTC Timestamp as Unixtimestamp with start point of 1970-01-01 00:00:00. By default, this is converted to a DateTimeObject ( pandas._libs.tslibs.timestamps.Timestamp ). If you prefer to have the raw Unixtimestamp ( numpy.float64 ), set Dobj.dateTimeConvert = False prior to load the data with .get() or .data or .getColumns() . Return BOOL","title":"Dobj.dateTimeConvert = True"},{"location":"modules/#dobjdobj-pid","text":"See Dobj.id","title":"Dobj.dobj = PID"},{"location":"modules/#dobjid-pid","text":"Set or retrieve the PID for the Dobj, default is empty (\"\"). If a PID is set, an automatic check is performed to find the metadata for the object. If this is successful, the 'valid' property is set to True Return STR","title":"Dobj.id = PID"},{"location":"modules/#dobjvalid","text":"True if PID is set and found at the ICOS Carbon Portal Return BOOL","title":"Dobj.valid"},{"location":"modules/#dobjlat","text":"Latitude for station Return FLOAT","title":"Dobj.lat"},{"location":"modules/#dobjlon","text":"Longitude for station Return FLOAT","title":"Dobj.lon"},{"location":"modules/#dobjelevation","text":"Elevation above sea level for station. Be aware, this is NOT the sampling height for the data points. Return FLOAT","title":"Dobj.elevation"},{"location":"modules/#dobjalt","text":"This is exactly the same as .elevation","title":"Dobj.alt"},{"location":"modules/#dobjstation","text":"This returns information about the station, where the data was collected/measured, to provide information about the provenance of the data. Further information about sammplingHeight, instruments, documentation, etc. can be found in dobj.meta['specificInfo']['acquisition'] . Please be aware that prior to version 0.1.15 this has returned a string with station id, which is now available as station['id']. An example code snippet on how to extract all 'keys' from a nested dictionary is available in the FAQ Return DICT","title":"Dobj.station"},{"location":"modules/#dobjsize","text":"The real size of the dobj in [bytes, KB, MB, TB]. Since this object may contain the data, it is no longer just a pointer to data. Return TUPLE (int32, STR), where int32 represents the size and STR the unit. Example output looks like: (4.353, 'MB')","title":"Dobj.size()"},{"location":"modules/#station","text":"The station module provides a search facility to explore ICOS stations and find associated data objects and data products. There is a lot of information available about the ICOS stations, partner countries, measured variables and much more in the ICOS Handbook . load the module with: from icoscp.station import station classmethod station.Station() The station object is primarily a data structure to store the associated metadata. The metadata is provided with specific and complex Sparql queries. It is possible to instantiate this class on its own, but we recommend using the convenience functions station.getIdList() station.get('StationID') station.getList() as described further below to create the station object. Once you have a created valid station object a list of attributes are available:","title":"Station"},{"location":"modules/#stationcountry","text":"Country code Return STR","title":"Station.country"},{"location":"modules/#stationdatalevelnone","text":"All associated data object for the station are returned. ICOS distinguishes data in terms of how processed they are. - Data level 1: Near Real Time Data (NRT) or Internal Work data (IW). - Data level 2: The final quality checked ICOS RI data set, published by the CFs, to be distributed through the Carbon Portal. This level is the ICOS-data product and free available for users. - Data level 3: All kinds of elaborated products by scientific communities that rely on ICOS data products are called Level 3 data. Return Pandas DataFrame","title":"Station.data(level=None)"},{"location":"modules/#stationeag","text":"Elevation above ground , if available. Please note, this is general information about the height of the tower. This is NOT a sampling height, and it is not guaranteed to be accurate. Return FLOAT","title":"Station.eag"},{"location":"modules/#stationeas","text":"Elevation above sea level in meter. Return FLOAT","title":"Station.eas"},{"location":"modules/#stationicosclass","text":"Classification for certified ICOS stations. Please consult the ICOS Handbook for further information about the Class 1&2 certificate. Return STR","title":"Station.icosclass"},{"location":"modules/#stationfirstname","text":"PI (Principal Investigator) First Name. Return STR","title":"Station.firstName"},{"location":"modules/#stationlastname","text":"PI (Principal Investigator) last name Return STR","title":"Station.lastName"},{"location":"modules/#stationemail","text":"PI (Principal Investigator) email address Return STR","title":"Station.email"},{"location":"modules/#stationlat","text":"Latitude for the station. Return FLOAT","title":"Station.lat"},{"location":"modules/#stationlon","text":"Longitude for the station. Return FLOAT","title":"Station.lon"},{"location":"modules/#stationname","text":"Returns the full name for the station. Return STR","title":"Station.name"},{"location":"modules/#stationproject","text":"ICOS Carbon Portal is a data portal from and for the ICOS community. However, the data portal does host more than ICOS data. The station association is listed here (if available) Return LIST","title":"Station.project"},{"location":"modules/#stationstationid","text":"Set or retrieve the StationId Return STR","title":"Station.stationId"},{"location":"modules/#stationtheme","text":"For ICOS stations a 'theme' is provided. Please note that, a station may belong to more than one theme, but with different themes. For example the stationId \"NOR\" (Norunda, Sweden), will give you access to the atmospheric data products, whereas the stationId \"SE-Nor\" will return the Ecosystem data products. AS for Atmospheric Stations ES for Ecosystem Stations OS for Ocean Stations Return STR","title":"Station.theme"},{"location":"modules/#stationuri","text":"Link to the landing page for the station. Because a station ID may be associated with more than one 'project' this returns a list of URI's Return LIST","title":"Station.uri"},{"location":"modules/#stationvalid","text":"True if stationId is found. Return BOOL","title":"Station.valid"},{"location":"modules/#convenience-functions","text":"The following three functions are recommended to get information about the available stations at the Carbon Portal and how to get a valid station object (or list of):","title":"Convenience functions"},{"location":"modules/#stationgetidlist","text":"station.getIdList(project='ICOS', sort='name') This returns a DataFrame with columns: ['uri', 'id', 'name', 'country', 'lat', 'lon', 'elevation', 'project', 'theme'] By default, ICOS certified stations are returned. If project is set to 'all', all known stations (to the Carbon Portal) are returned. By default, the DataFrame is sorted by name. You can provide any column name as sorting parameter. The 'id' of the record, can be used to instantiate a station. Hence, it is easy to adjust and filter these records and use the column 'id' as input for station.get() Return Pandas DataFrame station.getIdList(project='ALL', outfmt='map', icon=None) If the optional argument outfmt='map' is provided, a folium map is created with all the queried stations provided by the project argument. Stations without a fixed location (like measurements collected from instrumented Ships of Opportunity) will not be included in the map. Each marker in the map represents a station and contains station related information. A user can further customize the style of the map by providing the icon argument [None, 'flag', 'path/to/image.png'] . Return Folium Map","title":"station.getIdList()"},{"location":"modules/#stationget","text":"station.get('stationID') Provide a valid station id (see getIdList()) to create a Station object. NOTE: stationId is CaseSensitive. Return Station Object","title":"station.get()"},{"location":"modules/#stationgetlist","text":"station.getList(theme=['AS','ES','OS'], ids=None) This is the easiest way to get a list of ICOS stations. By default, a full list of all certified ICOS stations is returned. You can filter the output by provided a list of themes OR you can provide a list of station id's. NOTE: If you provide a list of id's, the theme filter is ignored. station.getList(['as', 'os']) list with ICOS atmospheric and ocean stations station.getList(ids=['NOR', 'HTM', 'HUN']) list with stations NOR (Norunda), HTM (Hyltemossa), HUN (Hegyhatsal) Return LIST[Station Objects]","title":"station.getList()"},{"location":"modules/#collection","text":"This module supports to load a collection of digital objects. Data products ( https://www.icos-cp.eu/data-products ) or collections are an assembly for a specific theme, or project. For example the ICOS community assembled data to provide a base for the Drought anomaly in 2018. This dataset was then used to study the impact of this extreme event, which ultimately led to a series of publications available as 'theme issue' in The Royal Society . Subsequently, the data sets are now public available at the ICOS Carbon Portal ( Drought-2018 ecosystem eddy covariance flux product for 52 stations and Drought-2018 atmospheric CO2 Mole Fraction product for 48 stations (96 sample heights) . Load the module with: from icoscp.collection import collection classmethod Collection(coll) (where coll represents a pandas.DataFrame , similar to the output from .getIdList()). BUT only similar. We do NOT Recommend to instantiate this class directly. Please use the function .get(CollectionId) . The Purpose of the class documentation is to provide you a list of attributes available, after the .get(CollectionId) return a collection object.","title":"Collection"},{"location":"modules/#collectionid","text":"This is the ICOS URI (PID). A link to the landing page on the ICOS data portal. Return STR","title":"Collection.id"},{"location":"modules/#collectiondoi","text":"If available, the official DOI in form of '10.18160/ry7n-3r04'. Return STR","title":"Collection.doi"},{"location":"modules/#collectioncitation","text":"For convenience the citation string provided from [https://citation.crosscite.org/] is stored in this attribute. If you like to have a different format, please have a look at .getCitation description below. Return STR","title":"Collection.citation"},{"location":"modules/#collectiontitle","text":"Return STR","title":"Collection.title"},{"location":"modules/#collectiondescription","text":"Return STR","title":"Collection.description"},{"location":"modules/#collectioninfo","text":"For convenience all the attributes above (id, doi, citation, title, description) . You can choose the output format with fmt=[\"dict\" | \"pandas\" | \"html\"]. The default is \"dict\". info(self, fmt='dict') Return FMT, default DICT","title":"Collection.info()"},{"location":"modules/#collectiondatalink","text":"This returns a list of PID/URI of digital objects associated with the collection. Return LIST[STR]","title":"Collection.datalink"},{"location":"modules/#collectiondata","text":"This returns a list of Dobj associated to the collection. Please refer to the module Digital Object above. Return LIST[Dobj]","title":"Collection.data"},{"location":"modules/#collectiongetcitation","text":"Collection.getCitation(format='apa', lang='en-GB')** If the collection has a DOI, you will get a citation string from https://citation.crosscite.org/ . You may provide any style & language parameters found on the website. Our default style is apa and language en-GB , which is stored in the attribute collection.citation . Use the function getCitation(), if you need a specific format & language adaption. Example to get a Bibtex styled citation: .getCitation('bibtex','de-CH')","title":"Collection.getCitation()"},{"location":"modules/#convenience-functions_1","text":"The following functions are recommended to get information about the available collections as well as creating an instance of a collection.","title":"Convenience functions"},{"location":"modules/#collectiongetidlist","text":"collection.getIdList() This will return a pandas.DataFrame , listing all available collections at the data portal. The DataFrame contains the following columns: ['collection', 'doi', 'title', 'description', 'dobj', 'count'] . We would recommend that you pay close attention to the count . We have collections with many data objects associated. If you just want to play around, select a collection with less than 10 objects. collection contains the PID/URI for the collection. This is the ID you need to provide for the .get(CollectionId) function. Please be aware that you need to provide the full URI. Example: .get('https://meta.icos-cp.eu/collections/n7cIMHIyqHJKBeF_3jjgptHP') dobj contains a list (LIST[STR]) of all PID/URI associated data objects. count tells you how many data objects are associated with this collection. Returns a pandas DataFrame","title":"collection.getIdList()"},{"location":"modules/#collectionget","text":"collection.get(CollectionId) Create a collection object. See the class method above for the attributes available in the collection object. The CollectionId must be either the full ICOS URI of the collection landing page or the DOI (if one is available). Not all collections have a DOI. Both information can be extracted with the function .getIdList() .The following to lines to create 'myCollection' yield the same result : myCollection = get('https://meta.icos-cp.eu/collections/n7cIMHIyqHJKBeF_3jjgptHP') myCollection = get('10.18160/ry7n-3r04') Returns Collection","title":"collection.get()"},{"location":"modules/#stilt","text":"At the ICOS Carbon Portal we offer a service to calculate your own STILT footprints and visualize the results. Find out more on our website https://www.icos-cp.eu/data-services/tools/stilt-footprint . The calculated footprints and time series results are also available through this python library. Please be aware, that the calculated footprints are only available on our servers , including our virtual computational environments. Please read about our public available Jupyter Hub here . Time series can be accessed from outside our servers as well. load the module with: from icoscp.stilt import stiltstation Two functions are available: one to find STILT stations and one to extract the STILT station as an object, which gives access to the data (time series and footprints).","title":"STILT"},{"location":"modules/#stiltstation","text":"","title":"stiltstation"},{"location":"modules/#findkwargs","text":"This is the main function to find STILT stations. By default, it returns a dictionary where each station id is the key to access metadata about the station. The order how you provide keywords is respected and you can influence the result. Keyword arguments are applied sequentially (the result from the first keyword is provided as input to the second and so on). With no keyword provided stiltstation.find() returns a dictionary with ALL Stilt stations. The following keywords are available:","title":".find(**kwargs)"},{"location":"modules/#idstr-strstr","text":"Provide a single id as string, or a list of strings. You can provide either STILT or ICOS id's mixed together. stiltstation.find(id=['NOR', 'GAT344']) stiltstation.find(id='KIT030')","title":"id='STR' | ['STR','STR',...]"},{"location":"modules/#searchstr","text":"Arbitrary string search will find any occurrence of STR in the station metadata. stiltstation.find(search='south')","title":"search='STR'"},{"location":"modules/#stationsdict","text":"all actions are performed on this dictionary, rather than dynamically search for all stilt station on our server. Can be useful for creating a subset of stations from an existing search. myStations = stiltstation.find(search='north') refined = stiltstation.find(stations=myStations, country='Finland')","title":"stations=DICT"},{"location":"modules/#countrystr-strstr","text":"Provide a single country id as string, or a list of strings. You can provide alpha-2, alpha-3 code (ISO 3166) or the full country name (some translations are available as well). To find all STILT stations with geolocation in Norway you can search for either NO, NOR, Norway, Norge. stiltstation.find(country=['Swe','norge', 'IT'])","title":"country='STR' | ['STR','STR',...]"},{"location":"modules/#projecticos","text":"This option will retrieve all STILT stations that are ICOS stations.","title":"project='icos'"},{"location":"modules/#bboxlatlonlatlon","text":"Bounding Box. Provide two tuples (wgs84), where the box is defined as TopLeftCorner (NorthWest) and BottomRightCorner (SouthEast). The following example returns approximately all stations in Scandinavia. stiltstation.find(bbox=[(70,5),(55,32)])","title":"bbox=[(lat,lon),(lat,lon)]"},{"location":"modules/#pinpointlatlondistancekm","text":"Provide a single point (lat, lon) and the Distance in KM, which creates a bounding box. Distance is very roughly translated with 1 degree = 1 km. The bounding box is calculated as distance in all directions. For example distance=200 will create a bounding box of 400 x 400 km with pinpoint in the centre. If you don't provide a distance, a default value of 200 is used. stiltstation.find(pinpoint=[55.7,13.1,500]) # bounding box ~ 1000km x 1000km stiltstation.find(pinpoint=[55.7,13.1]) # bounding box ~ 400km x 400km","title":"pinpoint=[lat,lon,distanceKM]"},{"location":"modules/#sdatestart-date","text":"Stations are returned where results are available for >= start date. 'sdate' is a single entry. If you provide sdate AND edate, any station with available data within that date range is returned. (accepted formats see above) stiltstation.find(sdate= '2018-05-01')","title":"sdate='start date'"},{"location":"modules/#edateend-date","text":"Stations are returned where results are available for <= end date. 'edate' is a single entry. If you provide sdate AND edate, any station with available data within that date range is returned. (accepted formats see above) stiltstation.find(edate='2018-06-01')","title":"edate='end date'"},{"location":"modules/#dates","text":"This will return a list of stations where data is available for any of the provided dates. Input format, see sdate,edate. Remember, that only year and month is checked. stiltstation.find(dates=['2020-01-01', '2020/05/23'])","title":"dates=[]"},{"location":"modules/#progress-bool","text":"By default a progress bar is displayed while searching all possible STILT stations. With this keyword you can show/hide the progress bar. stiltstation.find(progress=True) # DEFAULT, progress bar is displayed stiltstation.find(progress=False) # No progress bar","title":"progress = BOOL"},{"location":"modules/#outfmt-str","text":"where string is dict | pandas | list | map | avail . This keyword is ALWAYS executed last, regardless of the position within keyword arguments. By default, a dictionary is returned. With pandas a pandas DataFrame is returned where the station id is indexed, each row contains one station with the same metadata as is available in the dictionary https://pandas.pydata.org/docs/ . List however returns a list of STILT station objects. Please see the documentation about stiltstation.get(id=\"\") . The choice map , returns a folium map https://python-visualization.github.io/folium/ . The map can be displayed directly in a Jupyter Notebook, or you can save the map to a html file. stiltstation.find(country='Italy', outfmt='pandas') stiltstation.find(country='Italy', outfmt='pandas').save('mymap.html') Finally, the choice avail will return a pandas DataFrame where availability of timeseries data per STILT station is gathered for each year.","title":"outfmt = 'STR'"},{"location":"modules/#getid-progressfalse","text":"Returns a stilt station object or a list of stilt station objects. A stilt station object, gives access to the underlying data (timeseries and footprints). You may provide a STR or LIST[STR] of STILT id's or the 'result' of a .find() query. The properties of the returned stilt object is listed further below.","title":".get(id='', progress=False)"},{"location":"modules/#id-str-liststr","text":"Provide a string or list of strings representing a STILT station id's.","title":"id = STR | LIST[STR]"},{"location":"modules/#id-dict-listdict","text":"provide a single dictionary, or a list of dictionaries. The dictionaries should be the result of a stiltstation.find() execution.","title":"id = DICT | LIST[DICT]"},{"location":"modules/#progress-bool_1","text":"By default no progress bar is displayed while assembling the stiltstation object. With this keyword you can show/hide the progress bar. This parameter is only effective while providing id's. # return stilt stations based on stiltstation.find(id='STR') stiltstation.get('HTM') stiltstation.get(['KIT','HTM150'], progress = True) # return stilt stations based on dictionary or list of dict with a progressbar a = stiltstation.find(search='north') stiltstation.get(a) OR stiltstation.get(stiltstation.find(search='south'))","title":"progress = BOOL"},{"location":"modules/#stilt-object","text":"classmethod StiltStation(dict) Please do not use this class directly. You should load from icoscp.stilt import stiltstation and then use the function obj = stiltstation.get('HTM150) which will return a stilt station object. Once you have the object, the following attributes and methods are available:","title":"STILT Object"},{"location":"modules/#id","text":"Return STILT station ID (e.g. 'HTM150') as string.","title":".id"},{"location":"modules/#locident","text":"String with latitude-longitude-altitude of STILT station (e.g. '35.34Nx025.67Ex00150')","title":".locIdent"},{"location":"modules/#alt","text":"Station altitude (in meters above ground level)","title":".alt"},{"location":"modules/#lat","text":"Station latitude","title":".lat"},{"location":"modules/#lon","text":"Station longitude","title":".lon"},{"location":"modules/#name","text":"STILT station long name","title":".name"},{"location":"modules/#icos","text":"None | Dict. If the station is an ICOS station, a dictionary with ICOS metadata is available.","title":".icos"},{"location":"modules/#years","text":"List of years for which STILT results are available. Be aware that even if only one day is calculated for a year, year will be listed.","title":".years"},{"location":"modules/#info","text":"Returns the diction with all metadata.","title":".info"},{"location":"modules/#geoinfo","text":"Dictionary with geographical (country) information, if the station is within a country border.","title":".geoinfo"},{"location":"modules/#get_tsstart_date-end_date-hours-columns","text":"STILT concentration time series for a given time period, with optional selection of specific hours and columns. Returns time series as a pandas.DataFrame . start_date : STR, FLOAT/INT (Unix timestamp), datetime object start_date = '2018-01-01' end_date : STR, FLOAT/INT (Unix timestamp), datetime object end_date = '2018-01-31' hours : STR | INT, optional. If hours is empty or None, ALL Timeslots are returned. For backwards compatibility, input of str format hh:mm is accepted hours = [0,3,6,9,12,15,18,21] Valid results are returned with LOWER BOUND values. Example: hours = [\"02:00\",3,4] will return Timeslots for 0, 3 hours = [2,3,4,5,6] will return Timeslots for 0,3 and 6 hours = [] return ALL hours = [\"10\", \"10:00\", 10] returns timeslot 9 columns : STR, optional Valid entries are \"default\", \"co2\", \"co\", \"rn\", \"wind\", \"latlon\", \"all\" default: isodate, co2.stilt, co2.bio, co2.fuel, co2.cement, co2.background co2 isodate, co2.stilt, co2.bio, co2.fuel, co2.cement, co2.bio.gee, co2.bio.resp, co2.fuel.coal, co2.fuel.oil, co2.fuel.gas, co2.fuel.bio, co2.fuel.waste, co2.energy, co2.transport, co2.industry, co2.residential, co2.other_categories, co2.background co isodate, co.stilt, co.fuel, co.cement, co.fuel.coal, co.fuel.oil, co.fuel.gas, co.fuel.bio, co.fuel.waste, co.energy co.transport, co.industry, co.residential, co.other_categories, co.background rn isodate, rn, rn.era, rn.noah wind isodate, wind.dir, wind.u, wind.v latlon isodate, latstart, lonstart all isodate, co2.stilt, co2.bio, co2.fuel, co2.cement, co2.bio.gee, co2.bio.resp, co2.fuel.coal, co2.fuel.oil, co2.fuel.gas, co2.fuel.bio, co2.fuel.waste, co2.energy, co2.transport, co2.industry, co2.residential, co2.other_categories, co2.background, co.stilt, co.fuel, co.cement, co.fuel.coal, co.fuel.oil, co.fuel.gas, co.fuel.bio, co.fuel.waste, co.energy, co.transport, co.industry, co.residential, co.other_categories, co.background, rn, rn.era, rn.noah, wind.dir, wind.u, wind.v, latstart, lonstart","title":".get_ts(start_date, end_date, hours=[], columns=''):"},{"location":"modules/#get_fpstart_date-end_date-hours","text":"STILT footprints for a given time period, with optional selection of specific hours. Returns the footprints as xarray http://xarray.pydata.org/en/stable/ with latitude, longitude, time, and ppm per (micromole m-2 s-1). start_date : STR, FLOAT/INT (Unix timestamp), datetime object. start_date = '2018-01-01' end_date : STR, FLOAT/INT (Unix timestamp), datetime object. end_date = '2018-01-31' hours : STR | INT, optional. If hours is empty or None, ALL Timeslots are returned. For backwards compatibility, input of str format hh:mm is accepted hours = [0,3,6,9,12,15,18,21] Valid results are returned with LOWER BOUND values. Example: hours = [\"02:00\",3,4] will return Timeslots for 0, 3 hours = [2,3,4,5,6] will return Timeslots for 0,3 and 6 hours = [] return ALL hours = [\"10\", \"10:00\", 10] returns timeslot 9","title":".get_fp(start_date, end_date, hours=[]):"},{"location":"modules/#sparql","text":"At the ICOS Carbon Portal we store all data and metadata as linked data in a triple store. For more information about this approach refer to Semantic Web , Resource Description Framework (RDF) , and Triple Stores . This module is a simple interface to the SPARQL endpoint at the Carbon Portal. You can write your own queries and use the module to query the database or use some of the provided built-in queries. Load the module with: from icoscp.sparql.runsparql import RunSparql classmethod RunSparql(sparql_query='', output_format='txt') sparql_query needs to be a valid query. You can test a query directly at the online SPARQL endpoint at https://meta.icos-cp.eu/sparqlclient/?type=CSV . The output format is by default (txt/json) but you can adjust with the following formats ['json', 'csv', 'dict', 'pandas', 'array', 'html'].","title":"Sparql"},{"location":"modules/#runsparqldata","text":"If a query is set and the method .run() was executed, it returns the result from the SPARQL endpoint. If no data is available the method returns False (BOOL). Return BOOL | STR","title":"RunSparql.data"},{"location":"modules/#runsparqlquery-query","text":"Retrieve or set the query. Return STR","title":"RunSparql.query = 'query'"},{"location":"modules/#runsparqlformat-fmt","text":"Retrieve or set the output format. fmt = 'json', 'csv', 'dict', 'pandas', 'array', 'html' Return STR","title":"RunSparql.format = 'fmt'"},{"location":"modules/#runsparqlrun","text":"This method actually executes the query and formats the result to the output format. If the sparql query is not executable because of syntax errors, for example, a TUPLE is returned (False, 'Bad Request') Return TUPLE | FMT","title":"RunSparql.run()"},{"location":"modules/#country","text":"Search country information, define global (to icoscp) a common tool to search for country information based on a static local file within the library ( country.json ). Search is facilitated through Alphanumeric 2 & 3 Code characters and arbitrary text search. Credit to https://github.com/mledoze/countries . Further a reverse geocoder search is provided through OSM. (credit to https://nominatim.openstreetmap.org ). Please note: in case you provide more than one parameter, the order of keywords is not respected. The execution order is always like the function signature and as soon as a result is found, it will be returned and the search is stopped.","title":"Country"},{"location":"modules/#countrygetkwargs","text":"Accepted keywords: code='', name='', latlon=[], search='' Examples: .get() list of dict: all countries .get(code='CH') dict: Switzerland .get(name='greece') dict: Greece .get(latlon=[48.85, 2.35]) dict: .get(search='europe')","title":"country.get(**kwargs)"},{"location":"modules/#parameters","text":"code : STR Search by ISO 3166-1 2-letter or 3-letter country codes name : STR search by country name, including alternativ spellings. It can be the native name or a partial name. latlon : List[] List with two integer or floating point numbers representing latitude and longitude. BE AWARE: using an external service from openstreetmap for reverse geocoding search : STR arbitrary text search, not case sensitiv, search in all fields","title":"Parameters"},{"location":"modules/#returns","text":"DICT: if a single country is found LIST[DICT]: list of dictionaries if more than one country is found BOOL (False) if no result","title":"Returns"}]}