{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ICOS Carbon Portal library icoscp_stilt ICOS Carbon Portal offers online services to calculate your own STILT footprints and visualize the results . Find out more on our website https://www.icos-cp.eu/data-services/tools/stilt-footprint . This library offers access to information about the STILT \"stations\", calculated footprints and time series results. Please note that the calculated footprints are only accessible if the code is executed on Carbon Portal's Jupyter notebooks . Background and history This library contains functionality split out of library icoscp prior to 0.2.0 release, in order to relieve the latter of the specialized STILT code and its dependencies. In addition, the library contains a new module icoscp_stilt.stilt with new functionality designed to closer match the server APIs and to be performant. Upgrade notes Releases of icoscp version 0.2.0 and icoscp_stilt version 0.1.0 constitute a substantial change. For STILT functionality, the change implies a necessity to update the existing code by replacing the import from icoscp.stilt import stiltstation with from icoscp_stilt import stiltstation Getting started The library is published to PyPI. As stated above, the legacy functionality is still available, but for new code the developers are encouraged to consider the new module icoscp_stilt.stilt as the first choice. The following code demonstrates the new functionality. from icoscp_stilt import stilt from icoscp_stilt.const import CP_OBSPACK_CO2_SPEC # list of stilt.StiltStation dataclass instances stations = stilt.list_stations() station_info_lookup = {s.id: s for s in stations} # example: Hyltemossa station, altitude 150 m htm_info = station_info_lookup['HTM150'] >>> htm_info StiltStation( id='HTM150', name='Hyltemossa', lat=56.1, lon=13.42, alt=150, countryCode='SE', years=[2006, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022], icosId='HTM', icosHeight=150.0 ) # years for which the station has calculation results htm_years = htm_info.years # grouped STILT time series results, all columns, as pandas DataFrame # can be slow when fetching first time after calculation htm_time_series_result = stilt.fetch_result_ts('HTM150', '2022-01-01', '2022-01-31') # list of time-series columns (~60) ts_columns = htm_time_series_result.columns # fetch selected columns only htm_ts_ch4_basics = stilt.fetch_result_ts('HTM150', '2022-01-01', '2022-01-31', columns=['isodate', 'ch4.stilt', 'metadata']) # raw STILT time series results, all columns, as pandas DataFrame # always slow, as these results are not cached htm_time_series_raw = stilt.fetch_result_ts('HTM150', '2022-01-01', '2022-01-31', raw=True) # list of raw time-series columns (~800) ts_columns_raw = htm_time_series_raw.columns # find months for which calculation was run >>> stilt.available_months('KRE250', 2022) ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'] # find all months for all years for which calculation was run htm_yearmonths = stilt.available_year_months(htm_info) # list footprint time slots that were computed for a station within date interval htm_slots_jan2022 = stilt.list_footprints('HTM150', '2022-01-01', '2022-01-31') # load footprint for one time slot htm_fp_example = stilt.load_footprint('HTM150', htm_slots_jan2022[0]) # filter stations de_stations = [s for s in stations if s.countryCode == 'DE'] # fetch observations for the German stations as numpy array dicts # interesting columns are requested explicitly (all returned otherwise) # using bare numpy gives maximum performance de_co2_numpy = stilt.fetch_observations(CP_OBSPACK_CO2_SPEC, de_stations, ['value', 'time']) # same as previous example, but returning pandas DataFrames instead # performance may be worse, especially on Jupyter de_co2_pandas = stilt.fetch_observations_pandas(CP_OBSPACK_CO2_SPEC, de_stations, ['value', 'time']) Getting help All the methods in the new stilt module have a Python documentation accessible by standard means, for example: help(stilt.fetch_observations)","title":"About"},{"location":"#icos-carbon-portal-library-icoscp_stilt","text":"ICOS Carbon Portal offers online services to calculate your own STILT footprints and visualize the results . Find out more on our website https://www.icos-cp.eu/data-services/tools/stilt-footprint . This library offers access to information about the STILT \"stations\", calculated footprints and time series results. Please note that the calculated footprints are only accessible if the code is executed on Carbon Portal's Jupyter notebooks .","title":"ICOS Carbon Portal library icoscp_stilt"},{"location":"#background-and-history","text":"This library contains functionality split out of library icoscp prior to 0.2.0 release, in order to relieve the latter of the specialized STILT code and its dependencies. In addition, the library contains a new module icoscp_stilt.stilt with new functionality designed to closer match the server APIs and to be performant.","title":"Background and history"},{"location":"#upgrade-notes","text":"Releases of icoscp version 0.2.0 and icoscp_stilt version 0.1.0 constitute a substantial change. For STILT functionality, the change implies a necessity to update the existing code by replacing the import from icoscp.stilt import stiltstation with from icoscp_stilt import stiltstation","title":"Upgrade notes"},{"location":"#getting-started","text":"The library is published to PyPI. As stated above, the legacy functionality is still available, but for new code the developers are encouraged to consider the new module icoscp_stilt.stilt as the first choice. The following code demonstrates the new functionality. from icoscp_stilt import stilt from icoscp_stilt.const import CP_OBSPACK_CO2_SPEC # list of stilt.StiltStation dataclass instances stations = stilt.list_stations() station_info_lookup = {s.id: s for s in stations} # example: Hyltemossa station, altitude 150 m htm_info = station_info_lookup['HTM150'] >>> htm_info StiltStation( id='HTM150', name='Hyltemossa', lat=56.1, lon=13.42, alt=150, countryCode='SE', years=[2006, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022], icosId='HTM', icosHeight=150.0 ) # years for which the station has calculation results htm_years = htm_info.years # grouped STILT time series results, all columns, as pandas DataFrame # can be slow when fetching first time after calculation htm_time_series_result = stilt.fetch_result_ts('HTM150', '2022-01-01', '2022-01-31') # list of time-series columns (~60) ts_columns = htm_time_series_result.columns # fetch selected columns only htm_ts_ch4_basics = stilt.fetch_result_ts('HTM150', '2022-01-01', '2022-01-31', columns=['isodate', 'ch4.stilt', 'metadata']) # raw STILT time series results, all columns, as pandas DataFrame # always slow, as these results are not cached htm_time_series_raw = stilt.fetch_result_ts('HTM150', '2022-01-01', '2022-01-31', raw=True) # list of raw time-series columns (~800) ts_columns_raw = htm_time_series_raw.columns # find months for which calculation was run >>> stilt.available_months('KRE250', 2022) ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'] # find all months for all years for which calculation was run htm_yearmonths = stilt.available_year_months(htm_info) # list footprint time slots that were computed for a station within date interval htm_slots_jan2022 = stilt.list_footprints('HTM150', '2022-01-01', '2022-01-31') # load footprint for one time slot htm_fp_example = stilt.load_footprint('HTM150', htm_slots_jan2022[0]) # filter stations de_stations = [s for s in stations if s.countryCode == 'DE'] # fetch observations for the German stations as numpy array dicts # interesting columns are requested explicitly (all returned otherwise) # using bare numpy gives maximum performance de_co2_numpy = stilt.fetch_observations(CP_OBSPACK_CO2_SPEC, de_stations, ['value', 'time']) # same as previous example, but returning pandas DataFrames instead # performance may be worse, especially on Jupyter de_co2_pandas = stilt.fetch_observations_pandas(CP_OBSPACK_CO2_SPEC, de_stations, ['value', 'time'])","title":"Getting started"},{"location":"#getting-help","text":"All the methods in the new stilt module have a Python documentation accessible by standard means, for example: help(stilt.fetch_observations)","title":"Getting help"},{"location":"modules/","text":"Legacy modules These modules contain code that may be gradually deprecated in favour of new code in icoscp_stilt.stilt . The following documentation and the code it describes have been with minimal changes moved from icoscp library prior to version 0.2.0 stiltstation Load the module with: from icoscp_stilt import stiltstation Two functions are available: one to find STILT stations and one to extract the STILT station as an object, which gives access to the data (time series and footprints). .find(**kwargs) This is the main function to find STILT stations. By default, it returns a dictionary where each station id is the key to access metadata about the station. The order how you provide keywords is respected, and you can influence the result. Keyword arguments are applied sequentially (the result from the first keyword is provided as input to the second and so on). With no keyword provided stiltstation.find() returns a dictionary with ALL STILT stations. The following keywords are available: id='STR' | ['STR','STR',...] Provide a single id as string, or a list of strings. You can provide either STILT or ICOS ids mixed together. stiltstation.find(id=['NOR', 'GAT344']) stiltstation.find(id='KIT030') search='STR' Arbitrary string search will find any occurrence of STR in the station metadata. stiltstation.find(search='south') stations=DICT All actions are performed on this dictionary, rather than dynamically search for all stilt station on our server. Can be useful for creating a subset of stations from an existing search. myStations = stiltstation.find(search='north') refined = stiltstation.find(stations=myStations, country='Finland') Spatial keywords country='STR' | ['STR','STR',...] Provide a single country id as string, or a list of strings. You can provide alpha-2, alpha-3 code (ISO 3166) or the full country name (some translations are available as well). To find all STILT stations with geolocation in Norway you can search for either NO, NOR, Norway, Norge. stiltstation.find(country=['Swe', 'norge', 'IT']) project='icos' This option will retrieve all STILT stations that are ICOS stations. bbox=[(lat, lon), (lat, lon)] Bounding Box. Provide two tuples (wgs84), where the box is defined as TopLeftCorner (NorthWest) and BottomRightCorner (SouthEast). The following example returns approximately all stations in Scandinavia. stiltstation.find(bbox=[(70,5),(55,32)]) pinpoint=[lat, lon, distance in KM] Provide a single point (lat, lon) and the Distance in KM, which creates a bounding box. Distance is very roughly translated with 1 degree = 1 km. The bounding box is calculated as distance in all directions. For example distance=200 will create a bounding box of 400 x 400 km with pinpoint in the centre. If you don't provide a distance, a default value of 200 is used. stiltstation.find(pinpoint=[55.7,13.1,500]) # bounding box ~ 1000km x 1000km stiltstation.find(pinpoint=[55.7,13.1]) # bounding box ~ 400km x 400km Temporal keywords Be aware, that the granularity for all temporal keywords is year and month, days are not considered in the search. Input format for the dates entry MUST be convertible to data time object through pandas.to_datetime(). Accepted formats are: datetime.date objs FLOAT or INT representing a unix timestamp (seconds since 1970-01-01) pandas.datetime STR: \"YYYY-MM-DD\" , \"YYYY\", \"YYYY/MM/DD\" sdate='start date' Stations are returned where results are available for >= start date. 'sdate' is a single entry. If you provide sdate AND edate, any station with available data within that date range is returned. (accepted formats see above) stiltstation.find(sdate= '2018-05-01') edate='end date' Stations are returned where results are available for <= end date. 'edate' is a single entry. If you provide sdate AND edate, any station with available data within that date range is returned. (accepted formats see above) stiltstation.find(edate='2018-06-01') dates=[] This will return a list of stations where data is available for any of the provided dates. Input format, see sdate , edate . Remember, that only year and month is checked. stiltstation.find(dates=['2020-01-01', '2020/05/23']) progress = BOOL By default, a progress bar is displayed while searching all possible STILT stations. With this keyword you can show/hide the progress bar. stiltstation.find(progress=True) # DEFAULT, progress bar is displayed stiltstation.find(progress=False) # No progress bar outfmt = 'STR' Where string is dict | pandas | list | map | avail . This keyword is ALWAYS executed last, regardless of the position within keyword arguments. By default, a dictionary is returned. With pandas a pandas DataFrame is returned where the station id is indexed, each row contains one station with the same metadata as is available in the dictionary https://pandas.pydata.org/docs/ . List however returns a list of STILT station objects. Please see the documentation about stiltstation.get() . The choice map , returns a folium map https://python-visualization.github.io/folium/ . The map can be displayed directly in a Jupyter Notebook, or you can save the map to a html file. stiltstation.find(country='Italy', outfmt='pandas') stiltstation.find(country='Italy', outfmt='pandas').save('my_map.html') Finally, the choice avail will return a pandas DataFrame where availability of timeseries data per STILT station is gathered for each year. .get(id=\"\", progress=False) Returns a stilt station object or a list of stilt station objects. A stilt station object, gives access to the underlying data (timeseries and footprints). You may provide a STR or LIST[STR] of STILT id's or the 'result' of a .find() query. The properties of the returned stilt object is listed further below. id = STR | LIST[STR] Provide a string or list of strings representing a STILT station id. id = DICT | LIST[DICT] Provide a single dictionary, or a list of dictionaries. The dictionaries should be the result of a stiltstation.find() execution. progress = BOOL By default, no progress bar is displayed while assembling the stiltstation object. With this keyword you can show/hide the progress bar. This parameter is only effective while providing ids. # Return stilt stations based on stiltstation.find(id='STR') stiltstation.get('HTM') stiltstation.get(['KIT','HTM150'], progress = True) # Return stilt stations based on dictionary or list of dict with a # progressbar. a = stiltstation.find(search='north') stiltstation.get(a) # OR stiltstation.get(stiltstation.find(search='south')) stiltobj Internal-implementation module STILT Object Class-method StiltStation(dict) Please do not use this class directly. You should load from icoscp_stilt import stiltstation and then use the function obj = stiltstation.get('HTM150) which will return a stilt station object. Once you have the object, the following attributes and methods are available: Attributes .id Return STILT station ID (e.g. 'HTM150') as string. .locIdent String with latitude-longitude-altitude of STILT station (e.g. '35.34Nx025.67Ex00150') .alt Station altitude (in meters above ground level) .lat Station latitude .lon Station longitude .name STILT station long name .icos None | Dict. If the station is an ICOS station, a dictionary with ICOS metadata is available. .years List of years for which STILT results are available. Be aware that even if only one day is calculated for a year, year will be listed. .info Returns a dictionary with all metadata. .geoinfo Dictionary with geographical (country) information, if the station is within a country border. Methods .get_ts(start_date, end_date, hours=None, columns=\" \") STILT concentration time series for a given time period, with optional selection of specific hours and columns. Returns time series as a pandas.DataFrame . start_date : STR, FLOAT/INT (Unix timestamp), datetime object start_date = '2018-01-01' end_date : STR, FLOAT/INT (Unix timestamp), datetime object end_date = '2018-01-31' hours : STR | INT, optional. If hours is empty or None, ALL Timeslots are returned. For backwards compatibility, input of str format hh:mm is accepted hours = [0,3,6,9,12,15,18,21] Valid results are returned with LOWER BOUND values. Example: hours = [\"02:00\",3,4] will return Timeslots for 0, 3 hours = [2,3,4,5,6] will return Timeslots for 0,3 and 6 hours = [] return ALL hours = [\"10\", \"10:00\", 10] returns timeslot 9 columns : STR, optional Valid entries are \"default\", \"co2\", \"co\", \"rn\", \"wind\", \"latlon\", \"all\" default: isodate, co2.stilt, co2.bio, co2.fuel, co2.cement, co2.background co2 isodate, co2.stilt, co2.bio, co2.fuel, co2.cement, co2.bio.gee, co2.bio.resp, co2.fuel.coal, co2.fuel.oil, co2.fuel.gas, co2.fuel.bio, co2.fuel.waste, co2.energy, co2.transport, co2.industry, co2.residential, co2.other_categories, co2.background co isodate, co.stilt, co.fuel, co.cement, co.fuel.coal, co.fuel.oil, co.fuel.gas, co.fuel.bio, co.fuel.waste, co.energy co.transport, co.industry, co.residential, co.other_categories, co.background rn isodate, rn, rn.era, rn.noah wind isodate, wind.dir, wind.u, wind.v latlon isodate, latstart, lonstart all isodate, co2.stilt, co2.bio, co2.fuel, co2.cement, co2.bio.gee, co2.bio.resp, co2.fuel.coal, co2.fuel.oil, co2.fuel.gas, co2.fuel.bio, co2.fuel.waste, co2.energy, co2.transport, co2.industry, co2.residential, co2.other_categories, co2.background, co.stilt, co.fuel, co.cement, co.fuel.coal, co.fuel.oil, co.fuel.gas, co.fuel.bio, co.fuel.waste, co.energy, co.transport, co.industry, co.residential, co.other_categories, co.background, rn, rn.era, rn.noah, wind.dir, wind.u, wind.v, latstart, lonstart .get_fp(start_date, end_date, hours=None) STILT footprints for a given time period, with optional selection of specific hours. Return the footprints as xarray with latitude, longitude, time, and ppm per (micro-mole m-2 s-1). start_date : STR, FLOAT/INT (Unix timestamp), datetime object. start_date = '2018-01-01' end_date : STR, FLOAT/INT (Unix timestamp), datetime object. end_date = '2018-01-31' hours : STR | INT, optional. If hours is empty or None, ALL Timeslots are returned. For backwards compatibility, input of str format hh:mm is accepted hours = [0,3,6,9,12,15,18,21] Valid results are returned with LOWER BOUND values. Example: hours = [\"02:00\",3,4] will return Timeslots for 0, 3 hours = [2,3,4,5,6] will return Timeslots for 0,3 and 6 hours = [] return ALL hours = [\"10\", \"10:00\", 10] returns timeslot 9 .get_dobj_list() If the stiltstation has a corresponding ICOS station, this function will return a dictionary filled with corresponding data objects. A sparql query is executed with ICOS Station id and the sampling height as constraint, returning all data objects (Level 1, 2, 3). Returns: List of DICT Each dictionary with the following keys: [dobj, hasNextVersion, spec, fileName, size, submTime, timeStart, timeEnd] Example output: [{ 'dobj': 'https://meta.icos-cp.eu/objects/1DZZOAmmB8YAfYPvXuHMj7Er', 'hasNextVersion': 'false', 'spec': 'http://meta.icos-cp.eu/resources/cpmeta/atcN2oNrtGrowingDataObject', 'fileName': 'ICOS_ATC_NRT_OXK_2022-03-01_2023-02-27_23.0_534_N2O.zip', 'size': '110076', 'submTime': '2023-02-28T11:16:27.804Z', 'timeStart': '2022-03-01T00:00:00Z', 'timeEnd': '2023-02-27T23:00:00Z' }, ...","title":"Legacy modules"},{"location":"modules/#legacy-modules","text":"These modules contain code that may be gradually deprecated in favour of new code in icoscp_stilt.stilt . The following documentation and the code it describes have been with minimal changes moved from icoscp library prior to version 0.2.0","title":"Legacy modules"},{"location":"modules/#stiltstation","text":"Load the module with: from icoscp_stilt import stiltstation Two functions are available: one to find STILT stations and one to extract the STILT station as an object, which gives access to the data (time series and footprints).","title":"stiltstation"},{"location":"modules/#findkwargs","text":"This is the main function to find STILT stations. By default, it returns a dictionary where each station id is the key to access metadata about the station. The order how you provide keywords is respected, and you can influence the result. Keyword arguments are applied sequentially (the result from the first keyword is provided as input to the second and so on). With no keyword provided stiltstation.find() returns a dictionary with ALL STILT stations. The following keywords are available:","title":".find(**kwargs)"},{"location":"modules/#idstr-strstr","text":"Provide a single id as string, or a list of strings. You can provide either STILT or ICOS ids mixed together. stiltstation.find(id=['NOR', 'GAT344']) stiltstation.find(id='KIT030')","title":"id='STR' | ['STR','STR',...]"},{"location":"modules/#searchstr","text":"Arbitrary string search will find any occurrence of STR in the station metadata. stiltstation.find(search='south')","title":"search='STR'"},{"location":"modules/#stationsdict","text":"All actions are performed on this dictionary, rather than dynamically search for all stilt station on our server. Can be useful for creating a subset of stations from an existing search. myStations = stiltstation.find(search='north') refined = stiltstation.find(stations=myStations, country='Finland')","title":"stations=DICT"},{"location":"modules/#spatial-keywords","text":"","title":"Spatial keywords"},{"location":"modules/#countrystr-strstr","text":"Provide a single country id as string, or a list of strings. You can provide alpha-2, alpha-3 code (ISO 3166) or the full country name (some translations are available as well). To find all STILT stations with geolocation in Norway you can search for either NO, NOR, Norway, Norge. stiltstation.find(country=['Swe', 'norge', 'IT'])","title":"country='STR' | ['STR','STR',...]"},{"location":"modules/#projecticos","text":"This option will retrieve all STILT stations that are ICOS stations.","title":"project='icos'"},{"location":"modules/#bboxlat-lon-lat-lon","text":"Bounding Box. Provide two tuples (wgs84), where the box is defined as TopLeftCorner (NorthWest) and BottomRightCorner (SouthEast). The following example returns approximately all stations in Scandinavia. stiltstation.find(bbox=[(70,5),(55,32)])","title":"bbox=[(lat, lon), (lat, lon)]"},{"location":"modules/#pinpointlat-lon-distance-in-km","text":"Provide a single point (lat, lon) and the Distance in KM, which creates a bounding box. Distance is very roughly translated with 1 degree = 1 km. The bounding box is calculated as distance in all directions. For example distance=200 will create a bounding box of 400 x 400 km with pinpoint in the centre. If you don't provide a distance, a default value of 200 is used. stiltstation.find(pinpoint=[55.7,13.1,500]) # bounding box ~ 1000km x 1000km stiltstation.find(pinpoint=[55.7,13.1]) # bounding box ~ 400km x 400km","title":"pinpoint=[lat, lon, distance in KM]"},{"location":"modules/#temporal-keywords","text":"Be aware, that the granularity for all temporal keywords is year and month, days are not considered in the search. Input format for the dates entry MUST be convertible to data time object through pandas.to_datetime(). Accepted formats are: datetime.date objs FLOAT or INT representing a unix timestamp (seconds since 1970-01-01) pandas.datetime STR: \"YYYY-MM-DD\" , \"YYYY\", \"YYYY/MM/DD\"","title":"Temporal keywords"},{"location":"modules/#sdatestart-date","text":"Stations are returned where results are available for >= start date. 'sdate' is a single entry. If you provide sdate AND edate, any station with available data within that date range is returned. (accepted formats see above) stiltstation.find(sdate= '2018-05-01')","title":"sdate='start date'"},{"location":"modules/#edateend-date","text":"Stations are returned where results are available for <= end date. 'edate' is a single entry. If you provide sdate AND edate, any station with available data within that date range is returned. (accepted formats see above) stiltstation.find(edate='2018-06-01')","title":"edate='end date'"},{"location":"modules/#dates","text":"This will return a list of stations where data is available for any of the provided dates. Input format, see sdate , edate . Remember, that only year and month is checked. stiltstation.find(dates=['2020-01-01', '2020/05/23'])","title":"dates=[]"},{"location":"modules/#progress-bool","text":"By default, a progress bar is displayed while searching all possible STILT stations. With this keyword you can show/hide the progress bar. stiltstation.find(progress=True) # DEFAULT, progress bar is displayed stiltstation.find(progress=False) # No progress bar","title":"progress = BOOL"},{"location":"modules/#outfmt-str","text":"Where string is dict | pandas | list | map | avail . This keyword is ALWAYS executed last, regardless of the position within keyword arguments. By default, a dictionary is returned. With pandas a pandas DataFrame is returned where the station id is indexed, each row contains one station with the same metadata as is available in the dictionary https://pandas.pydata.org/docs/ . List however returns a list of STILT station objects. Please see the documentation about stiltstation.get() . The choice map , returns a folium map https://python-visualization.github.io/folium/ . The map can be displayed directly in a Jupyter Notebook, or you can save the map to a html file. stiltstation.find(country='Italy', outfmt='pandas') stiltstation.find(country='Italy', outfmt='pandas').save('my_map.html') Finally, the choice avail will return a pandas DataFrame where availability of timeseries data per STILT station is gathered for each year.","title":"outfmt = 'STR'"},{"location":"modules/#getid-progressfalse","text":"Returns a stilt station object or a list of stilt station objects. A stilt station object, gives access to the underlying data (timeseries and footprints). You may provide a STR or LIST[STR] of STILT id's or the 'result' of a .find() query. The properties of the returned stilt object is listed further below.","title":".get(id=\"\", progress=False)"},{"location":"modules/#id-str-liststr","text":"Provide a string or list of strings representing a STILT station id.","title":"id = STR | LIST[STR]"},{"location":"modules/#id-dict-listdict","text":"Provide a single dictionary, or a list of dictionaries. The dictionaries should be the result of a stiltstation.find() execution.","title":"id = DICT | LIST[DICT]"},{"location":"modules/#progress-bool_1","text":"By default, no progress bar is displayed while assembling the stiltstation object. With this keyword you can show/hide the progress bar. This parameter is only effective while providing ids. # Return stilt stations based on stiltstation.find(id='STR') stiltstation.get('HTM') stiltstation.get(['KIT','HTM150'], progress = True) # Return stilt stations based on dictionary or list of dict with a # progressbar. a = stiltstation.find(search='north') stiltstation.get(a) # OR stiltstation.get(stiltstation.find(search='south'))","title":"progress = BOOL"},{"location":"modules/#stiltobj","text":"Internal-implementation module","title":"stiltobj"},{"location":"modules/#stilt-object","text":"Class-method StiltStation(dict) Please do not use this class directly. You should load from icoscp_stilt import stiltstation and then use the function obj = stiltstation.get('HTM150) which will return a stilt station object. Once you have the object, the following attributes and methods are available:","title":"STILT Object"},{"location":"modules/#attributes","text":"","title":"Attributes"},{"location":"modules/#id","text":"Return STILT station ID (e.g. 'HTM150') as string.","title":".id"},{"location":"modules/#locident","text":"String with latitude-longitude-altitude of STILT station (e.g. '35.34Nx025.67Ex00150')","title":".locIdent"},{"location":"modules/#alt","text":"Station altitude (in meters above ground level)","title":".alt"},{"location":"modules/#lat","text":"Station latitude","title":".lat"},{"location":"modules/#lon","text":"Station longitude","title":".lon"},{"location":"modules/#name","text":"STILT station long name","title":".name"},{"location":"modules/#icos","text":"None | Dict. If the station is an ICOS station, a dictionary with ICOS metadata is available.","title":".icos"},{"location":"modules/#years","text":"List of years for which STILT results are available. Be aware that even if only one day is calculated for a year, year will be listed.","title":".years"},{"location":"modules/#info","text":"Returns a dictionary with all metadata.","title":".info"},{"location":"modules/#geoinfo","text":"Dictionary with geographical (country) information, if the station is within a country border.","title":".geoinfo"},{"location":"modules/#methods","text":"","title":"Methods"},{"location":"modules/#get_tsstart_date-end_date-hoursnone-columns","text":"STILT concentration time series for a given time period, with optional selection of specific hours and columns. Returns time series as a pandas.DataFrame . start_date : STR, FLOAT/INT (Unix timestamp), datetime object start_date = '2018-01-01' end_date : STR, FLOAT/INT (Unix timestamp), datetime object end_date = '2018-01-31' hours : STR | INT, optional. If hours is empty or None, ALL Timeslots are returned. For backwards compatibility, input of str format hh:mm is accepted hours = [0,3,6,9,12,15,18,21] Valid results are returned with LOWER BOUND values. Example: hours = [\"02:00\",3,4] will return Timeslots for 0, 3 hours = [2,3,4,5,6] will return Timeslots for 0,3 and 6 hours = [] return ALL hours = [\"10\", \"10:00\", 10] returns timeslot 9 columns : STR, optional Valid entries are \"default\", \"co2\", \"co\", \"rn\", \"wind\", \"latlon\", \"all\" default: isodate, co2.stilt, co2.bio, co2.fuel, co2.cement, co2.background co2 isodate, co2.stilt, co2.bio, co2.fuel, co2.cement, co2.bio.gee, co2.bio.resp, co2.fuel.coal, co2.fuel.oil, co2.fuel.gas, co2.fuel.bio, co2.fuel.waste, co2.energy, co2.transport, co2.industry, co2.residential, co2.other_categories, co2.background co isodate, co.stilt, co.fuel, co.cement, co.fuel.coal, co.fuel.oil, co.fuel.gas, co.fuel.bio, co.fuel.waste, co.energy co.transport, co.industry, co.residential, co.other_categories, co.background rn isodate, rn, rn.era, rn.noah wind isodate, wind.dir, wind.u, wind.v latlon isodate, latstart, lonstart all isodate, co2.stilt, co2.bio, co2.fuel, co2.cement, co2.bio.gee, co2.bio.resp, co2.fuel.coal, co2.fuel.oil, co2.fuel.gas, co2.fuel.bio, co2.fuel.waste, co2.energy, co2.transport, co2.industry, co2.residential, co2.other_categories, co2.background, co.stilt, co.fuel, co.cement, co.fuel.coal, co.fuel.oil, co.fuel.gas, co.fuel.bio, co.fuel.waste, co.energy, co.transport, co.industry, co.residential, co.other_categories, co.background, rn, rn.era, rn.noah, wind.dir, wind.u, wind.v, latstart, lonstart","title":".get_ts(start_date, end_date, hours=None, columns=\" \")"},{"location":"modules/#get_fpstart_date-end_date-hoursnone","text":"STILT footprints for a given time period, with optional selection of specific hours. Return the footprints as xarray with latitude, longitude, time, and ppm per (micro-mole m-2 s-1). start_date : STR, FLOAT/INT (Unix timestamp), datetime object. start_date = '2018-01-01' end_date : STR, FLOAT/INT (Unix timestamp), datetime object. end_date = '2018-01-31' hours : STR | INT, optional. If hours is empty or None, ALL Timeslots are returned. For backwards compatibility, input of str format hh:mm is accepted hours = [0,3,6,9,12,15,18,21] Valid results are returned with LOWER BOUND values. Example: hours = [\"02:00\",3,4] will return Timeslots for 0, 3 hours = [2,3,4,5,6] will return Timeslots for 0,3 and 6 hours = [] return ALL hours = [\"10\", \"10:00\", 10] returns timeslot 9","title":".get_fp(start_date, end_date, hours=None)"},{"location":"modules/#get_dobj_list","text":"If the stiltstation has a corresponding ICOS station, this function will return a dictionary filled with corresponding data objects. A sparql query is executed with ICOS Station id and the sampling height as constraint, returning all data objects (Level 1, 2, 3). Returns: List of DICT Each dictionary with the following keys: [dobj, hasNextVersion, spec, fileName, size, submTime, timeStart, timeEnd] Example output: [{ 'dobj': 'https://meta.icos-cp.eu/objects/1DZZOAmmB8YAfYPvXuHMj7Er', 'hasNextVersion': 'false', 'spec': 'http://meta.icos-cp.eu/resources/cpmeta/atcN2oNrtGrowingDataObject', 'fileName': 'ICOS_ATC_NRT_OXK_2022-03-01_2023-02-27_23.0_534_N2O.zip', 'size': '110076', 'submTime': '2023-02-28T11:16:27.804Z', 'timeStart': '2022-03-01T00:00:00Z', 'timeEnd': '2023-02-27T23:00:00Z' }, ...","title":".get_dobj_list()"}]}