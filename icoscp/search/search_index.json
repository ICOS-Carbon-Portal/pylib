{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the ICOS Carbon Portal Python Library ICOS The Integrated Carbon Observation System (ICOS) is a European-wide greenhouse gas research infrastructure. ICOS produces standardised data on greenhouse gas concentrations in the atmosphere, as well as on carbon fluxes between the atmosphere, the earth and oceans. This information is being used by scientists as well as by decision-makers in predicting and mitigating climate change. The ICOS Station Network consists of over 170 measurement stations in three domains located in 16 countries in Europe. For more information please visit https://www.icos-cp.eu/ . icoscp Python library This library provides full metadata and partial data access to the data objects hosted at the ICOS Carbon Portal ( https://data.icos-cp.eu/ ). A benefit of this library is to relieve the data users from downloading the files and parsing their content. It is provisioned to Carbon Portal's Jupyter Hub services, making it possible to use supported types of ICOS data without installing any software. To download full original data of all types, the users are referred to data portal web application to find, preview and download the data objects. The history and the new role of the library This library has a history of being developed somewhat empirically, resulting in mismatch with the Carbon Portal metadata model and APIs, and suboptimal performance. Starting from version 0.2.0 , it is being put on a more principled foundation in the form of a new library icoscp_core , also developed by the Carbon Portal. The new library is now a dependency of icoscp , meaning that by installing icoscp one automatically gains access to all the functionality of icoscp_core . As the latter happens to have all the functionality expected to be required by most use cases, the majority of icoscp code written prior to version 0.2.0 is being assigned a legacy status. Legacy in this context means that it is not recommended for new projects, but will be preserved to keep all the existing code, that depends on older versions of icoscp , working in the foreseeable future. For new projects, developers are advised to consider icoscp_core as the first choice, unless it is explicitly known that some specific icoscp feature is required. However, it should be recognized that icoscp_core , though making possible with little code to achieve results that were previously impossible or lengthy with icoscp , is a somewhat lower-level library. Notably, icoscp_core does not depend on pandas library, which means the developers who want to work with pandas DataFrames, may need to take one extra step (albeit short and easy) to produce them from icoscp_core outputs. Additionally, icoscp_core was designed to serve not only ICOS, but also other data repositories based on Carbon Portal server software, which makes it inappropriate to add much ICOS-specific functionality to icoscp_core . Hence, the new role of icoscp library is three-fold: keeping the legacy functionality intact, to prevent breakage of Jupyter notebooks and Python scripts that depend on the older library versions providing convenient high-level ICOS-specific functionality, built on top of icoscp_core ; future examples of that are: the latest near-real-time data for comparison across stations concatenation of latest L2 release with corresponding latest near-real-time dataset making all the icoscp_core functionality available as a dependency ICOS data licence Please be aware, that by either downloading or accessing the data directly through this library, you acknowledge that all ICOS data are provided under a CC BY 4.0 licence , and accept the licence. When using the library standalone (not on a Carbon-Portal-provided Jupyter instance) to access the data , you are required to authenticate as a user with ICOS licence accepted in your Carbon Portal profile ( https://cpauth.icos-cp.eu/ ). Metadata access, on the other hand, is provided for anonymous users as well as for registered ones. (older) Notes The ICOS Carbon Portal provides persistent digital object identifiers for each data set or file to improve the FAIR-ness of data and to give all the users easy to use tools for provenance, citation and reproducibility, etc. Hence, you only need to store a list of PID's (persistent digital object identifiers), or you can use one of the built-in SPARQL queries, to reproduce always the same result, regardless of the computer you run it on. You can share your code with colleagues, without the need of moving data around. You bring the software to the data, rather than data to the software. This is especially true if you create a Jupyter Notebook hosted at the Carbon Portal. You can follow the development on the GitHub repository . Create an issue to report bugs or request new features. The library has not been thoroughly tested on many different operating systems and environments, hence we appreciate feedback. The library is developed with Python 3.10, and we assume that any recent Python distribution should work. If you have any trouble running the library, we would like to hear about it. Please get in touch: jupyter-info@icos-cp.eu","title":"About"},{"location":"#welcome-to-the-icos-carbon-portal-python-library","text":"","title":"Welcome to the ICOS Carbon Portal Python Library"},{"location":"#icos","text":"The Integrated Carbon Observation System (ICOS) is a European-wide greenhouse gas research infrastructure. ICOS produces standardised data on greenhouse gas concentrations in the atmosphere, as well as on carbon fluxes between the atmosphere, the earth and oceans. This information is being used by scientists as well as by decision-makers in predicting and mitigating climate change. The ICOS Station Network consists of over 170 measurement stations in three domains located in 16 countries in Europe. For more information please visit https://www.icos-cp.eu/ .","title":"ICOS"},{"location":"#icoscp-python-library","text":"This library provides full metadata and partial data access to the data objects hosted at the ICOS Carbon Portal ( https://data.icos-cp.eu/ ). A benefit of this library is to relieve the data users from downloading the files and parsing their content. It is provisioned to Carbon Portal's Jupyter Hub services, making it possible to use supported types of ICOS data without installing any software. To download full original data of all types, the users are referred to data portal web application to find, preview and download the data objects.","title":"icoscp Python library"},{"location":"#the-history-and-the-new-role-of-the-library","text":"This library has a history of being developed somewhat empirically, resulting in mismatch with the Carbon Portal metadata model and APIs, and suboptimal performance. Starting from version 0.2.0 , it is being put on a more principled foundation in the form of a new library icoscp_core , also developed by the Carbon Portal. The new library is now a dependency of icoscp , meaning that by installing icoscp one automatically gains access to all the functionality of icoscp_core . As the latter happens to have all the functionality expected to be required by most use cases, the majority of icoscp code written prior to version 0.2.0 is being assigned a legacy status. Legacy in this context means that it is not recommended for new projects, but will be preserved to keep all the existing code, that depends on older versions of icoscp , working in the foreseeable future. For new projects, developers are advised to consider icoscp_core as the first choice, unless it is explicitly known that some specific icoscp feature is required. However, it should be recognized that icoscp_core , though making possible with little code to achieve results that were previously impossible or lengthy with icoscp , is a somewhat lower-level library. Notably, icoscp_core does not depend on pandas library, which means the developers who want to work with pandas DataFrames, may need to take one extra step (albeit short and easy) to produce them from icoscp_core outputs. Additionally, icoscp_core was designed to serve not only ICOS, but also other data repositories based on Carbon Portal server software, which makes it inappropriate to add much ICOS-specific functionality to icoscp_core . Hence, the new role of icoscp library is three-fold: keeping the legacy functionality intact, to prevent breakage of Jupyter notebooks and Python scripts that depend on the older library versions providing convenient high-level ICOS-specific functionality, built on top of icoscp_core ; future examples of that are: the latest near-real-time data for comparison across stations concatenation of latest L2 release with corresponding latest near-real-time dataset making all the icoscp_core functionality available as a dependency","title":"The history and the new role of the library"},{"location":"#icos-data-licence","text":"Please be aware, that by either downloading or accessing the data directly through this library, you acknowledge that all ICOS data are provided under a CC BY 4.0 licence , and accept the licence. When using the library standalone (not on a Carbon-Portal-provided Jupyter instance) to access the data , you are required to authenticate as a user with ICOS licence accepted in your Carbon Portal profile ( https://cpauth.icos-cp.eu/ ). Metadata access, on the other hand, is provided for anonymous users as well as for registered ones.","title":"ICOS data licence"},{"location":"#older-notes","text":"The ICOS Carbon Portal provides persistent digital object identifiers for each data set or file to improve the FAIR-ness of data and to give all the users easy to use tools for provenance, citation and reproducibility, etc. Hence, you only need to store a list of PID's (persistent digital object identifiers), or you can use one of the built-in SPARQL queries, to reproduce always the same result, regardless of the computer you run it on. You can share your code with colleagues, without the need of moving data around. You bring the software to the data, rather than data to the software. This is especially true if you create a Jupyter Notebook hosted at the Carbon Portal. You can follow the development on the GitHub repository . Create an issue to report bugs or request new features. The library has not been thoroughly tested on many different operating systems and environments, hence we appreciate feedback. The library is developed with Python 3.10, and we assume that any recent Python distribution should work. If you have any trouble running the library, we would like to hear about it. Please get in touch: jupyter-info@icos-cp.eu","title":"(older) Notes"},{"location":"authentication/","text":"Authentication To ensure users' licence acceptance when accessing data objects through the icoscp Python library, authentication is required. Users must either have ICOS Carbon Portal login credentials or log in to Carbon Portal using another mechanism https://cpauth.icos-cp.eu/login/ to obtain the token to access ICOS data. Users also need to read and accept the ICOS Data Licence in their user profile . Metadata-only access does not require authentication. Users with direct access to the data files, namely, users of our ICOS Jupyter services , are not required to configure authentication . In order to fetch data, users make their requests to data objects and must provide an API token to do so. For security reasons the API token is valid for 100'000 seconds (27 hours) and may therefore need to be refreshed; this process is automated when using credentials-based authentication (see below). Authentication can be initialized in a number of ways. Please note that when using other approaches than the default one (see below), it becomes necessary to use the data value (instance of DataClient class) obtained in the process of authentication bootstrap, rather than the default instance obtained by import from icoscp_core.icos import data used in the code examples in this documentation. By credentials file (default) This approach should only be used on machines the developer trusts. A username/password account for the ICOS authentication service is required for this. Obfuscated (not readable by humans) password is stored in a file on the local machine in a default user-specific folder . To initialize this file, run the following code interactively (only needs to be done once for every machine): from icoscp_core.icos import auth auth.init_config_file() After the initialization step is done in this way, access to the data can be achieved using both the new icoscp_core machinery and the legacy Dobj classes . By custom credentials file The developer may wish to use a specific file to store obfuscated credentials and token cache. In this scenario, data and metadata access are achieved as follows: from icoscp_core.icos import bootstrap auth, meta, data = bootstrap.fromPasswordFile(\"<desired path to the file>\") # The next line needs to be run interactively (only once per file). auth.init_config_file() If the legacy library functionality will be used, the following extra step is needed as well: from icoscp import cpauth cpauth.init_by(auth) By authentication token (prototyping) This option is good for testing, on a public machine or in general. Its only disadvantage is that the tokens have limited period of validity (100'000 seconds, less than 28 hours), but this is precisely what makes it acceptable to include them directly in the Python source code. The token can be obtained from the \"My Account\" page ( ICOS ), which can be accessed by logging in using one of the supported authentication mechanisms (username/password, university sign-in, OAuth sign in). After this the bootstrapping can be done as follows: from icoscp_core.icos import bootstrap cookie_token = 'cpauthToken=WzE2OTY2NzQ5OD...' meta, data = bootstrap.fromCookieToken(cookie_token) If the legacy library functionality will be used, the following extra step is needed as well: from icoscp import cpauth cpauth.init_by(data.auth) By explicit credentials (advanced option) The user may choose to use their own mechanism of providing the credentials to initialize the authentication. This should be considered as an advanced option. (Please do not put your password as clear text in your Python code!) This can be achieved as follows: from icoscp_core.icos import bootstrap meta, data = bootstrap.fromCredentials(username_variable, password_containing_variable) If the legacy library functionality will be used, the following extra step is needed as well: from icoscp import cpauth cpauth.init_by(data.auth)","title":"Authentication"},{"location":"authentication/#authentication","text":"To ensure users' licence acceptance when accessing data objects through the icoscp Python library, authentication is required. Users must either have ICOS Carbon Portal login credentials or log in to Carbon Portal using another mechanism https://cpauth.icos-cp.eu/login/ to obtain the token to access ICOS data. Users also need to read and accept the ICOS Data Licence in their user profile . Metadata-only access does not require authentication. Users with direct access to the data files, namely, users of our ICOS Jupyter services , are not required to configure authentication . In order to fetch data, users make their requests to data objects and must provide an API token to do so. For security reasons the API token is valid for 100'000 seconds (27 hours) and may therefore need to be refreshed; this process is automated when using credentials-based authentication (see below). Authentication can be initialized in a number of ways. Please note that when using other approaches than the default one (see below), it becomes necessary to use the data value (instance of DataClient class) obtained in the process of authentication bootstrap, rather than the default instance obtained by import from icoscp_core.icos import data used in the code examples in this documentation.","title":"Authentication"},{"location":"authentication/#by-credentials-file-default","text":"This approach should only be used on machines the developer trusts. A username/password account for the ICOS authentication service is required for this. Obfuscated (not readable by humans) password is stored in a file on the local machine in a default user-specific folder . To initialize this file, run the following code interactively (only needs to be done once for every machine): from icoscp_core.icos import auth auth.init_config_file() After the initialization step is done in this way, access to the data can be achieved using both the new icoscp_core machinery and the legacy Dobj classes .","title":"By credentials file (default)"},{"location":"authentication/#by-custom-credentials-file","text":"The developer may wish to use a specific file to store obfuscated credentials and token cache. In this scenario, data and metadata access are achieved as follows: from icoscp_core.icos import bootstrap auth, meta, data = bootstrap.fromPasswordFile(\"<desired path to the file>\") # The next line needs to be run interactively (only once per file). auth.init_config_file() If the legacy library functionality will be used, the following extra step is needed as well: from icoscp import cpauth cpauth.init_by(auth)","title":"By custom credentials file"},{"location":"authentication/#by-authentication-token-prototyping","text":"This option is good for testing, on a public machine or in general. Its only disadvantage is that the tokens have limited period of validity (100'000 seconds, less than 28 hours), but this is precisely what makes it acceptable to include them directly in the Python source code. The token can be obtained from the \"My Account\" page ( ICOS ), which can be accessed by logging in using one of the supported authentication mechanisms (username/password, university sign-in, OAuth sign in). After this the bootstrapping can be done as follows: from icoscp_core.icos import bootstrap cookie_token = 'cpauthToken=WzE2OTY2NzQ5OD...' meta, data = bootstrap.fromCookieToken(cookie_token) If the legacy library functionality will be used, the following extra step is needed as well: from icoscp import cpauth cpauth.init_by(data.auth)","title":"By authentication token (prototyping)"},{"location":"authentication/#by-explicit-credentials-advanced-option","text":"The user may choose to use their own mechanism of providing the credentials to initialize the authentication. This should be considered as an advanced option. (Please do not put your password as clear text in your Python code!) This can be achieved as follows: from icoscp_core.icos import bootstrap meta, data = bootstrap.fromCredentials(username_variable, password_containing_variable) If the legacy library functionality will be used, the following extra step is needed as well: from icoscp import cpauth cpauth.init_by(data.auth)","title":"By explicit credentials (advanced option)"},{"location":"changelog/","text":"Changelog 0.2.0 cpauth module Remove legacy authentication. Authenticate via icoscp_core . stilt module The module is moved out to a new library icoscp_stilt . countries module The module has been removed, as its only usage was from the stilt module. Within the new icoscp_stilt library, the geo information handling has been radically simplified, making the countries module redundant. dependencies Dependencies fiona and geopandas are gone due to stilt module removal. documentation Move the cpauth module to the Getting started section. Add Upgrade guide to the installation section. Add substantial amount of content to the About page . Add Getting started examples and move the old examples to a separate section as legacy. Remove most of the old FAQ, add a few new ones. 0.1.20 country module Make the reverse geocoding functionality available only to users with access to the ICOS Jupyter Hub. Replace the nominatim reverse geocoder with on-server access to shapefiles. cpauth module Enforce secure data access via mandatory authentication. sparql module Accept cached SPARQL responses by default. stilt module Obtain country information more accurately. 0.1.19 stilt module Filter out .zip data files from stiltweb data structure. documentation Apply Tyler's changes in the file README.md . project-structure Introduce a streamlined development workflow for the library, using pytest , ruff , and hatch . 0.1.18 cpauth module Implement authentication for secure data access. The full documentation of the authentication module can be found here . cpb module Rework code in Dobj() class to correctly add series to pandas DataFrame and avoid pandas performance warning. Verify timestamp format of binary files and convert accordingly to avoid error in data accessing. stilt module Remove mutable default arguments from functions in the stilt module. Update availability table, such that only 'real' ICOS stations get an ICOS id. Add ICOS sampling height to the ICOS dictionary. Add corresponding data files to the ICOS dictionary. Increase performance when reading STILT footprints. Replace eval() statement to prevent security risks. Make function station.get() case-insensitive. station module Remove elevation above ground attribute from Station() class. Update documentation on how to correctly retrieve station names when iterating over pandas DataFrames' rows. 0.1.17 station module The station class has been somewhat optimized: station.getList() is faster station.getIdList() has a new parameter theme (as in getList ) sparql module In the background the station class use sparql queries, and sparqls.py has been endowed with station query function: sparqls.station_query() , the function has a filter parameter with which the experienced user for example can use to fetch stations in a list of countries. stilt module Update xarray call in stiltobj.py . other changes Fix library's building problems which resulted in an empty project description here: https://pypi.org/project/icoscp/ 0.1.16 sparql Remove methods with unused queries cpbGetInfo(dobj) and cpbGetSchemaDetail(formatSpec) . Speed up queries in functions objectSpec(spec='atcCo2L2DataObject', station='', limit=0) , getStations(station = '') , get_coords_icos_stations_atc() , and get_icos_stations_atc_L1() . Update query in getStations(station = '') to correctly retrieve stations. Add deprecation warning for stations_with_pi() query. station module Filter out non icos stations when querying themed stations in getList() . stilt module Regenerate STILT module's static file stations.json . 0.1.15 cpb module Dobj change to read metadata from http request. Instead of using sparql queries, a http request is used to load the same meta data as available from the website. Add new script to extract metadata from server metadata.py . Add new property .meta returns a dictionary based on the meta data available from the landing page of a data object containing a very rich set of information. An example: https://meta.icos-cp.eu/objects/M8STRfcQfU4Yj7Uy0snHvlve/meta.json Add new property: .previous Return the pid/url of the previous version of this file if available. Add new property: .next -> Return the pid/url of the next version of this file if available. Add new property: .variables Return a PandasDataFrame with metadata for all variables ['name', 'unit', 'type', 'format']. Add new property: .alt Returns altitude of station, the same as .elevation . Remove properties: ._info1 , ._info2 , ._info3 from Dobj. Change .info (consisted of info 1,2,3,) and return .meta instead. Change .station : Returns a dictionary with a subset of .meta describing the station. Change of .colNames : returns now a list of strings with all variable names instead of a pandas core series. License is extracted dynamically from the metadata per object. Add new method get_citation(format='plain') . Returns the citation by default as plain string, the same as .citation (property) which internally calls this method. Argument options are ('bibtex', 'ris', 'plain') -> .citation('bibtex'|'ris'|'plain') . print(Dobj) output of __str__ changed to plain citation string, instead of pid. References to server calls moved to const.py . Rename file dtype_dict.py to dtype.py for better readability. add simple unit test and implement initial assertions for the cpb module. access to data .data [property] will always return all columns. .get(columns=None) [method] returns all data by default. Provides the possibility to extract specific columns from the data set. Expected is a list of column names, which then returns only the selected columns. Non valid entries are removed from the list (if only non valid entries are provided, an empty list by default returns all columns). Please be aware, that .get() will ALWAYS return ALL columns if executed on the Carbon Portal server. Valid entries can be obtained with .colNames or `.variables['name']. .getColumns(columns=None) , this is exactly the same as .get(columns='None'). We keep this function for compatibility to previous versions. other changes add icon argument to station.getIdList() function. regenerate STILT module's static stations.json . resolve deprecation warnings from numpy calls. implement stiltstation.find() by project . add outfmt='avail' argument to stiltstation.find() function to generate an availability table for STILT stations . fix stiltstation.find(outfmt='list') . fix print(stiltobj) by removing country information. Country information can still be retrieved using the .info attribute of the StilStation object. 0.1.14 update get_ts() to case-insensitive and include co2.bio.gee and co2.bio.resp in the co2 results correctly redirect nominatim requests when icos nominatim is unable to reverse geocode. 0.1.13 rework directory listing of STILT stations and ignore queued but empty stations 0.1.12 fix stiltstation.find() to return all STILT stations switch to ICOS reverse geocoder as default precompute all known stations to speed up search functions if possible, use ICOS station's latitude/longitude when reverse geocoding a STILT station for precision 0.1.11 rework process of requesting stilt stations add a progress bar when requesting stilt stations update user information when using the stilt module add stilt data reporting to the back-end 0.1.10 adjust pylib version reported to the back-end include non-code files to distribution inform users when wrongly accessing the Stilt module locally 0.1.9 add Stilt module and documentation add local country information add folium map extension to getIdList() function 0.1.8 change licence on https://pypi.org/project/icoscp/ to https://www.icos-cp.eu/data-services/about-data-portal/data-license adjust portal use internal flag 0.1.7 add licence attribute to Dobj() handle single str input to station.getList() stats report distinguish between intern/external usage remove _checkdata flag from station.info() update documentation 0.1.6 2021/03/29 add sparql queries for availability table typos and additions to documentation move changelog to separate file 0.1.5 2020/10/20 fix bug introduced with v 0.1.4 datasets with optional columns where not loaded if data object specifications mismatched the list of columns 0.1.4 -2020/10/16 - add support for regex columns 0.1.3 2020/10/01 Add module 'collection' to support loading data products. See Modules / collection Change behaviour of Dobj to keep data persistent. The pandas data frame is now persistent stored as pandas dataframe in the object. Older versions did query the server every time for the data. A new attribute is available: Dobj.data which returns the pandas dataframe. This change in behaviour is controlled with Dobj._datapersistent = True (default), and can be reverted by setting it to False. A new attribute Dobj.id is available (which is equivalent to Dobj.dobj) but is more human understandable. Dobj.id retrieves or sets the PID/URI. 0.1.2 2020/07/15 first public version to pypi.org","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#020","text":"","title":"0.2.0"},{"location":"changelog/#cpauth-module","text":"Remove legacy authentication. Authenticate via icoscp_core .","title":"cpauth module"},{"location":"changelog/#stilt-module","text":"The module is moved out to a new library icoscp_stilt .","title":"stilt module"},{"location":"changelog/#countries-module","text":"The module has been removed, as its only usage was from the stilt module. Within the new icoscp_stilt library, the geo information handling has been radically simplified, making the countries module redundant.","title":"countries module"},{"location":"changelog/#dependencies","text":"Dependencies fiona and geopandas are gone due to stilt module removal.","title":"dependencies"},{"location":"changelog/#documentation","text":"Move the cpauth module to the Getting started section. Add Upgrade guide to the installation section. Add substantial amount of content to the About page . Add Getting started examples and move the old examples to a separate section as legacy. Remove most of the old FAQ, add a few new ones.","title":"documentation"},{"location":"changelog/#0120","text":"","title":"0.1.20"},{"location":"changelog/#country-module","text":"Make the reverse geocoding functionality available only to users with access to the ICOS Jupyter Hub. Replace the nominatim reverse geocoder with on-server access to shapefiles.","title":"country module"},{"location":"changelog/#cpauth-module_1","text":"Enforce secure data access via mandatory authentication.","title":"cpauth module"},{"location":"changelog/#sparql-module","text":"Accept cached SPARQL responses by default.","title":"sparql module"},{"location":"changelog/#stilt-module_1","text":"Obtain country information more accurately.","title":"stilt module"},{"location":"changelog/#0119","text":"","title":"0.1.19"},{"location":"changelog/#stilt-module_2","text":"Filter out .zip data files from stiltweb data structure.","title":"stilt module"},{"location":"changelog/#documentation_1","text":"Apply Tyler's changes in the file README.md .","title":"documentation"},{"location":"changelog/#project-structure","text":"Introduce a streamlined development workflow for the library, using pytest , ruff , and hatch .","title":"project-structure"},{"location":"changelog/#0118","text":"","title":"0.1.18"},{"location":"changelog/#cpauth-module_2","text":"Implement authentication for secure data access. The full documentation of the authentication module can be found here .","title":"cpauth module"},{"location":"changelog/#cpb-module","text":"Rework code in Dobj() class to correctly add series to pandas DataFrame and avoid pandas performance warning. Verify timestamp format of binary files and convert accordingly to avoid error in data accessing.","title":"cpb module"},{"location":"changelog/#stilt-module_3","text":"Remove mutable default arguments from functions in the stilt module. Update availability table, such that only 'real' ICOS stations get an ICOS id. Add ICOS sampling height to the ICOS dictionary. Add corresponding data files to the ICOS dictionary. Increase performance when reading STILT footprints. Replace eval() statement to prevent security risks. Make function station.get() case-insensitive.","title":"stilt module"},{"location":"changelog/#station-module","text":"Remove elevation above ground attribute from Station() class. Update documentation on how to correctly retrieve station names when iterating over pandas DataFrames' rows.","title":"station module"},{"location":"changelog/#0117","text":"","title":"0.1.17"},{"location":"changelog/#station-module_1","text":"The station class has been somewhat optimized: station.getList() is faster station.getIdList() has a new parameter theme (as in getList )","title":"station module"},{"location":"changelog/#sparql-module_1","text":"In the background the station class use sparql queries, and sparqls.py has been endowed with station query function: sparqls.station_query() , the function has a filter parameter with which the experienced user for example can use to fetch stations in a list of countries.","title":"sparql module"},{"location":"changelog/#stilt-module_4","text":"Update xarray call in stiltobj.py .","title":"stilt module"},{"location":"changelog/#other-changes","text":"Fix library's building problems which resulted in an empty project description here: https://pypi.org/project/icoscp/","title":"other changes"},{"location":"changelog/#0116","text":"","title":"0.1.16"},{"location":"changelog/#sparql","text":"Remove methods with unused queries cpbGetInfo(dobj) and cpbGetSchemaDetail(formatSpec) . Speed up queries in functions objectSpec(spec='atcCo2L2DataObject', station='', limit=0) , getStations(station = '') , get_coords_icos_stations_atc() , and get_icos_stations_atc_L1() . Update query in getStations(station = '') to correctly retrieve stations. Add deprecation warning for stations_with_pi() query.","title":"sparql"},{"location":"changelog/#station-module_2","text":"Filter out non icos stations when querying themed stations in getList() .","title":"station module"},{"location":"changelog/#stilt-module_5","text":"Regenerate STILT module's static file stations.json .","title":"stilt module"},{"location":"changelog/#0115","text":"","title":"0.1.15"},{"location":"changelog/#cpb-module_1","text":"Dobj change to read metadata from http request. Instead of using sparql queries, a http request is used to load the same meta data as available from the website. Add new script to extract metadata from server metadata.py . Add new property .meta returns a dictionary based on the meta data available from the landing page of a data object containing a very rich set of information. An example: https://meta.icos-cp.eu/objects/M8STRfcQfU4Yj7Uy0snHvlve/meta.json Add new property: .previous Return the pid/url of the previous version of this file if available. Add new property: .next -> Return the pid/url of the next version of this file if available. Add new property: .variables Return a PandasDataFrame with metadata for all variables ['name', 'unit', 'type', 'format']. Add new property: .alt Returns altitude of station, the same as .elevation . Remove properties: ._info1 , ._info2 , ._info3 from Dobj. Change .info (consisted of info 1,2,3,) and return .meta instead. Change .station : Returns a dictionary with a subset of .meta describing the station. Change of .colNames : returns now a list of strings with all variable names instead of a pandas core series. License is extracted dynamically from the metadata per object. Add new method get_citation(format='plain') . Returns the citation by default as plain string, the same as .citation (property) which internally calls this method. Argument options are ('bibtex', 'ris', 'plain') -> .citation('bibtex'|'ris'|'plain') . print(Dobj) output of __str__ changed to plain citation string, instead of pid. References to server calls moved to const.py . Rename file dtype_dict.py to dtype.py for better readability. add simple unit test and implement initial assertions for the cpb module.","title":"cpb module"},{"location":"changelog/#access-to-data","text":".data [property] will always return all columns. .get(columns=None) [method] returns all data by default. Provides the possibility to extract specific columns from the data set. Expected is a list of column names, which then returns only the selected columns. Non valid entries are removed from the list (if only non valid entries are provided, an empty list by default returns all columns). Please be aware, that .get() will ALWAYS return ALL columns if executed on the Carbon Portal server. Valid entries can be obtained with .colNames or `.variables['name']. .getColumns(columns=None) , this is exactly the same as .get(columns='None'). We keep this function for compatibility to previous versions.","title":"access to data"},{"location":"changelog/#other-changes_1","text":"add icon argument to station.getIdList() function. regenerate STILT module's static stations.json . resolve deprecation warnings from numpy calls. implement stiltstation.find() by project . add outfmt='avail' argument to stiltstation.find() function to generate an availability table for STILT stations . fix stiltstation.find(outfmt='list') . fix print(stiltobj) by removing country information. Country information can still be retrieved using the .info attribute of the StilStation object.","title":"other changes"},{"location":"changelog/#0114","text":"update get_ts() to case-insensitive and include co2.bio.gee and co2.bio.resp in the co2 results correctly redirect nominatim requests when icos nominatim is unable to reverse geocode.","title":"0.1.14"},{"location":"changelog/#0113","text":"rework directory listing of STILT stations and ignore queued but empty stations","title":"0.1.13"},{"location":"changelog/#0112","text":"fix stiltstation.find() to return all STILT stations switch to ICOS reverse geocoder as default precompute all known stations to speed up search functions if possible, use ICOS station's latitude/longitude when reverse geocoding a STILT station for precision","title":"0.1.12"},{"location":"changelog/#0111","text":"rework process of requesting stilt stations add a progress bar when requesting stilt stations update user information when using the stilt module add stilt data reporting to the back-end","title":"0.1.11"},{"location":"changelog/#0110","text":"adjust pylib version reported to the back-end include non-code files to distribution inform users when wrongly accessing the Stilt module locally","title":"0.1.10"},{"location":"changelog/#019","text":"add Stilt module and documentation add local country information add folium map extension to getIdList() function","title":"0.1.9"},{"location":"changelog/#018","text":"change licence on https://pypi.org/project/icoscp/ to https://www.icos-cp.eu/data-services/about-data-portal/data-license adjust portal use internal flag","title":"0.1.8"},{"location":"changelog/#017","text":"add licence attribute to Dobj() handle single str input to station.getList() stats report distinguish between intern/external usage remove _checkdata flag from station.info() update documentation","title":"0.1.7"},{"location":"changelog/#016","text":"2021/03/29 add sparql queries for availability table typos and additions to documentation move changelog to separate file","title":"0.1.6"},{"location":"changelog/#015","text":"2020/10/20 fix bug introduced with v 0.1.4 datasets with optional columns where not loaded if data object specifications mismatched the list of columns","title":"0.1.5"},{"location":"changelog/#014","text":"-2020/10/16 - add support for regex columns","title":"0.1.4"},{"location":"changelog/#013","text":"2020/10/01 Add module 'collection' to support loading data products. See Modules / collection Change behaviour of Dobj to keep data persistent. The pandas data frame is now persistent stored as pandas dataframe in the object. Older versions did query the server every time for the data. A new attribute is available: Dobj.data which returns the pandas dataframe. This change in behaviour is controlled with Dobj._datapersistent = True (default), and can be reverted by setting it to False. A new attribute Dobj.id is available (which is equivalent to Dobj.dobj) but is more human understandable. Dobj.id retrieves or sets the PID/URI.","title":"0.1.3"},{"location":"changelog/#012","text":"2020/07/15 first public version to pypi.org","title":"0.1.2"},{"location":"examples/","text":"Examples Monthly CO2 averages This example uses icoscp_core functionality to merge, monthly-average and plot CO2 molar fraction data from selected stations, sampled at certain heights. See discover data types to find out how to discover a URL for a data type. from icoscp_core.icos import data, meta, ATMO_STATION import pandas as pd import numpy as np # Swedish atmospheric stations whose metadata is supplied to the Carbon Portal # by the Atmospheric Thematic Center se_atmo_stations = [ s for s in meta.list_stations(ATMO_STATION) if s.country_code=='SE' ] # Find basic metadata for CO2 release data sampled at at least 100 m above the ground se_co2_from_100 = [ dobj for dobj in meta.list_data_objects( # URL for official ICOS CO2 molar fraction release data datatype='http://meta.icos-cp.eu/resources/cpmeta/atcCo2L2DataObject', station=se_atmo_stations ) if dobj.sampling_height >= 100 ] # prepare an empty pandas DataFrame to merge the data into merged_co2 = pd.DataFrame(columns=['TIMESTAMP', 'co2']) # batch-fetch the interesting columns and iterate through the results for dobj, arrs in data.batch_get_columns_as_arrays(se_co2_from_100, ['TIMESTAMP', 'co2']): st_uri = dobj.station_uri # ICOS atmospheric station URIs end with underscore followed by a 3-letter station ID # this ID is convenient to use as a suffix to rename 'co2' with station_id = st_uri[st_uri.rfind('_'):] df = pd.DataFrame(arrs) # next line would be needed if `keep_bad_data` flag in batch_get_columns_as_arrays was set to True #df.loc[df['Flag'] != 'O', 'co2'] = np.nan del df['Flag'] merged_co2 = pd.merge(merged_co2, df, on='TIMESTAMP', how='outer', suffixes=('', station_id)) del merged_co2['co2'] # compute monthly averages by_month = merged_co2.groupby(pd.Grouper(key='TIMESTAMP', freq='M')).mean().reset_index() # Let us retrieve column metadata to construct Y-axis plot label # fetch detailed metadata for one of the data objects (they all have same columns) dobj_meta = meta.get_dobj_meta(se_co2_from_100[0]) # get 'value type' part of column metadata for co2 column columns_meta = dobj_meta.specificInfo.columns co2_value_type = [col for col in columns_meta if col.label=='co2'][0].valueType # construct the Y-axis label from the value type data structure co2_axis_label = f'{co2_value_type.self.label} [{co2_value_type.unit}]' # plotting should work in Jupyter by_month.plot(x='TIMESTAMP', ylabel=co2_axis_label);","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#monthly-co2-averages","text":"This example uses icoscp_core functionality to merge, monthly-average and plot CO2 molar fraction data from selected stations, sampled at certain heights. See discover data types to find out how to discover a URL for a data type. from icoscp_core.icos import data, meta, ATMO_STATION import pandas as pd import numpy as np # Swedish atmospheric stations whose metadata is supplied to the Carbon Portal # by the Atmospheric Thematic Center se_atmo_stations = [ s for s in meta.list_stations(ATMO_STATION) if s.country_code=='SE' ] # Find basic metadata for CO2 release data sampled at at least 100 m above the ground se_co2_from_100 = [ dobj for dobj in meta.list_data_objects( # URL for official ICOS CO2 molar fraction release data datatype='http://meta.icos-cp.eu/resources/cpmeta/atcCo2L2DataObject', station=se_atmo_stations ) if dobj.sampling_height >= 100 ] # prepare an empty pandas DataFrame to merge the data into merged_co2 = pd.DataFrame(columns=['TIMESTAMP', 'co2']) # batch-fetch the interesting columns and iterate through the results for dobj, arrs in data.batch_get_columns_as_arrays(se_co2_from_100, ['TIMESTAMP', 'co2']): st_uri = dobj.station_uri # ICOS atmospheric station URIs end with underscore followed by a 3-letter station ID # this ID is convenient to use as a suffix to rename 'co2' with station_id = st_uri[st_uri.rfind('_'):] df = pd.DataFrame(arrs) # next line would be needed if `keep_bad_data` flag in batch_get_columns_as_arrays was set to True #df.loc[df['Flag'] != 'O', 'co2'] = np.nan del df['Flag'] merged_co2 = pd.merge(merged_co2, df, on='TIMESTAMP', how='outer', suffixes=('', station_id)) del merged_co2['co2'] # compute monthly averages by_month = merged_co2.groupby(pd.Grouper(key='TIMESTAMP', freq='M')).mean().reset_index() # Let us retrieve column metadata to construct Y-axis plot label # fetch detailed metadata for one of the data objects (they all have same columns) dobj_meta = meta.get_dobj_meta(se_co2_from_100[0]) # get 'value type' part of column metadata for co2 column columns_meta = dobj_meta.specificInfo.columns co2_value_type = [col for col in columns_meta if col.label=='co2'][0].valueType # construct the Y-axis label from the value type data structure co2_axis_label = f'{co2_value_type.self.label} [{co2_value_type.unit}]' # plotting should work in Jupyter by_month.plot(x='TIMESTAMP', ylabel=co2_axis_label);","title":"Monthly CO2 averages"},{"location":"faq/","text":"(potentially) Frequently Asked Questions Please see Getting started for possible answers to questions not covered here. icoscp_core is very different from the old icoscp , do I have to rewrite everything? No, your code depending on the older version will continue working. Apart from moving stilt-related functionality to a new dedicated library and overhauling authentication that was present in later versions of 0.1.x series, no code got removed from icoscp with release 0.2.0 . But you should use the new icoscp_core features for new developments, and can benefit from gradual porting of at least some of your older code to using icoscp_core . How can I retrieve the latest/newest version of a dataset? from icoscp_core.icos import meta dobj = meta.get_dobj_meta('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') latest_version_uri = dobj.latestVersion Please note that latest_version_uri can be either a URI, or a list of URIs, because in ICOS metadata it is possible for a number of objects to collectively deprecate a single one. How to obtain ICOS station class of a station? from icoscp_core.icos import station_class_lookup station_uri = 'http://meta.icos-cp.eu/resources/stations/AS_HTM' station_class = station_class_lookup().get(station_uri) station_class_lookup method caches its output, so it is fast to call it repeatedly. How do I suppress warnings? Internally the icoscp python library uses the warnings module to provide useful information to the users. future warning messages are connected to components of the library that will change in a future release. Here is an example of a future warning message: /pylib/icoscp/cpauth/exceptions.py:28: FutureWarning: Due to updates in the python library of the ICOS carbon portal, starting from the next version, user authentication might be required. warnings.warn(warning, category=FutureWarning) To suppress such a message, users need to add the code below in their scripts before calling the warning-inducing module: import warnings warnings.simplefilter(\"ignore\", FutureWarning) user warning messages are used to notify the user that there is something potentially incorrect or risky in the program, but that the program is still able to run. Here is an example of a user warning message: /pylib/icoscp/cpauth/exceptions.py:39: UserWarning: Your authentication was unsuccessful. Falling back to anonymous data access. Please, revisit your authentication configuration or have a look at the documentation. Authentication will become mandatory for data access. warnings.warn(warning, category=UserWarning) To suppress such a message, users need to add the code below in their scripts before calling the warning-inducing module: import warnings warnings.simplefilter(\"ignore\", UserWarning) Where is the documentation for the cpauth module? The documentation for the authentication module can be found in the installation section here .","title":"FAQ"},{"location":"faq/#potentially-frequently-asked-questions","text":"Please see Getting started for possible answers to questions not covered here.","title":"(potentially) Frequently Asked Questions"},{"location":"faq/#icoscp_core-is-very-different-from-the-old-icoscp-do-i-have-to-rewrite-everything","text":"No, your code depending on the older version will continue working. Apart from moving stilt-related functionality to a new dedicated library and overhauling authentication that was present in later versions of 0.1.x series, no code got removed from icoscp with release 0.2.0 . But you should use the new icoscp_core features for new developments, and can benefit from gradual porting of at least some of your older code to using icoscp_core .","title":"icoscp_core is very different from the old icoscp, do I have to rewrite everything?"},{"location":"faq/#how-can-i-retrieve-the-latestnewest-version-of-a-dataset","text":"from icoscp_core.icos import meta dobj = meta.get_dobj_meta('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') latest_version_uri = dobj.latestVersion Please note that latest_version_uri can be either a URI, or a list of URIs, because in ICOS metadata it is possible for a number of objects to collectively deprecate a single one.","title":"How can I retrieve the latest/newest version of a dataset?"},{"location":"faq/#how-to-obtain-icos-station-class-of-a-station","text":"from icoscp_core.icos import station_class_lookup station_uri = 'http://meta.icos-cp.eu/resources/stations/AS_HTM' station_class = station_class_lookup().get(station_uri) station_class_lookup method caches its output, so it is fast to call it repeatedly.","title":"How to obtain ICOS station class of a station?"},{"location":"faq/#how-do-i-suppress-warnings","text":"Internally the icoscp python library uses the warnings module to provide useful information to the users. future warning messages are connected to components of the library that will change in a future release. Here is an example of a future warning message: /pylib/icoscp/cpauth/exceptions.py:28: FutureWarning: Due to updates in the python library of the ICOS carbon portal, starting from the next version, user authentication might be required. warnings.warn(warning, category=FutureWarning) To suppress such a message, users need to add the code below in their scripts before calling the warning-inducing module: import warnings warnings.simplefilter(\"ignore\", FutureWarning) user warning messages are used to notify the user that there is something potentially incorrect or risky in the program, but that the program is still able to run. Here is an example of a user warning message: /pylib/icoscp/cpauth/exceptions.py:39: UserWarning: Your authentication was unsuccessful. Falling back to anonymous data access. Please, revisit your authentication configuration or have a look at the documentation. Authentication will become mandatory for data access. warnings.warn(warning, category=UserWarning) To suppress such a message, users need to add the code below in their scripts before calling the warning-inducing module: import warnings warnings.simplefilter(\"ignore\", UserWarning)","title":"How do I suppress warnings?"},{"location":"faq/#where-is-the-documentation-for-the-cpauth-module","text":"The documentation for the authentication module can be found in the installation section here .","title":"Where is the documentation for the cpauth module?"},{"location":"getting_started/","text":"Getting started with icoscp_core The examples in this section can be tried on a public Jupyter Hub running Python3 notebooks, where the library is preinstalled, for example https://exploredata.icos-cp.eu/ Please, click here to request access to the Explore-Data service. If run on a standalone machine rather than an ICOS Carbon Portal Jupyter Hub instance, the data access examples assume that the authentication has been configured as explained in the next section. General note on metadata An important background information on ICOS metadata is that all the metadata-represented entities (data objects, data types, documents, collections, measurement stations, people, etc) are identified by URIs. The metadata-access methods usually accept these URIs (or their lists) as input arguments. Discover data types Data type is the main \"dimension\" used to classify the ICOS data objects. It's an \"umbrella\" term aggregating a number of other metadata properties, such as label, data level, project, theme, object format, etc. from icoscp_core.icos import meta # fetches the list of known data types, including metadata associated with them data_types = meta.list_datatypes() data_type_names = [dt.label for dt in data_types] data_type_uris = [dt.uri for dt in data_types] # data types with data access previewable_datatypes = [dt for dt in data_types if dt.has_data_access] Discover stations All measurement stations in ICOS metadata have a property called station id. However, this id is not guaranteed to be unique to a station, as it is sometimes reused by co-located stations, and sometimes two \"incarnations\" of a station, ICOS and \"pre-ICOS\" one, coexist in the metadata for a while. The only true id is a URI. from icoscp_core.icos import meta, ATMO_STATION # fetch lists of stations, with basic metadata icos_stations = meta.list_stations() atmo_stations = meta.list_stations(ATMO_STATION) all_known_stations = meta.list_stations(False) # get fully detailed metadata for a station htm_uri = 'http://meta.icos-cp.eu/resources/stations/AS_HTM' htm_station_meta = meta.get_station_meta(htm_uri) List data objects To select and filter (using various criteria), sort and list data objects, one can use list_data_objects method. All its arguments are optional, and by default it returns 100 latest (by upload time) data objects. from icoscp_core.icos import meta # discovered/chosen data type uri for ICOS ATC CO2 Release co2_release_dt = 'http://meta.icos-cp.eu/resources/cpmeta/atcCo2L2DataObject' latest_co2_release = meta.list_data_objects(datatype=co2_release_dt) latest_htm_co2_release = meta.list_data_objects(datatype=co2_release_dt, station=htm_uri) Batch data access For lists of uniform data objects of the same data type (or, more generally and exactly, sharing variable metadata), like latest_co2_release from the previous example, the most efficient way of fetching the data is as follows: from icoscp_core.icos import data co2_release_data = data.batch_get_columns_as_arrays(latest_co2_release, ['TIMESTAMP', 'co2']) The result of this call is an iterator (\"lazy\" sequence) that gets evaluated when used (iterated). Each element of the iterator is a pair, where the first value is an element from latest_co2_release , and the second value is a dictionary mapping variable names to numpy arrays with their values. This output can be used as is for many purposes, but if it is desirable to convert it to pandas DataFrames, it can be done like so (preserving the \"lazyness\"): import pandas as pd co2_release_data_pd = ( (dobj, pd.DataFrame(arrs)) for dobj, arrs in co2_release_data) Examples See Examples for more lengthy examples using all of the functionality introduced above. Accessing documentation As this library depends on icoscp_core , all the functionality of the latter can be used, not only the examples from above. It is introduced on the PyPi project page , and the source code is available from GitHub . To discover all the rich possibilities of filtering, sorting and paging the lists of the data objects, it is helpful to read the Python docstring of list_data_objects method: from icoscp_core.icos import meta help(meta.list_data_objects) The method signature is not easily readable due to expansion of type annotations, but the docstring explains the method parameters in detail. The output from list_data_objects is a list of DataObjectLite instances. Documentation of this class can be accessed as follows: from icoscp_core.metaclient import DataObjectLite help(DataObjectLite) Similarly, the output from list_datatypes is a list of DobjSpecLite instances, whose docstring is accessible like so: from icoscp_core.metaclient import DobjSpecLite help(DobjSpecLite) Naturally, one can also request Python help on the whole meta constant (which is in fact an instance of class MetaClient ), and on data constant (which is an instance of DataClient ), and on all the methods therein: from icoscp_core.icos import meta, data help(meta) help(meta.get_dobj_meta) help(meta.get_collection_meta) help(meta.get_station_meta) help(data) help(data.batch_get_columns_as_arrays) help(data.get_columns_as_arrays) Finally, MetaClient 's methods fetching detailed metadata (e.g. get_dobj_meta , get_collection_meta , get_station_meta ) return classes who are (or whose constituents are) defined inside module icoscp_core.metacore . This module is not available in the source code on GitHub because it is autogenerated and auto-imported, but can be very instructive to examine and use as a reference. Due to type annotations, it effectively contains metadata specification for all the entities available from the metadata repository. Standalone library users can find it inside their Python installation folder (can be venv or .venv if using a virtual Python environment) at location lib/icoscp_core/metacore.py . Jupyter users can inspect the classes in this module by calling help on it: from icoscp_core import metacore help(metacore)","title":"Getting started with icoscp_core"},{"location":"getting_started/#getting-started-with-icoscp_core","text":"The examples in this section can be tried on a public Jupyter Hub running Python3 notebooks, where the library is preinstalled, for example https://exploredata.icos-cp.eu/ Please, click here to request access to the Explore-Data service. If run on a standalone machine rather than an ICOS Carbon Portal Jupyter Hub instance, the data access examples assume that the authentication has been configured as explained in the next section.","title":"Getting started with icoscp_core"},{"location":"getting_started/#general-note-on-metadata","text":"An important background information on ICOS metadata is that all the metadata-represented entities (data objects, data types, documents, collections, measurement stations, people, etc) are identified by URIs. The metadata-access methods usually accept these URIs (or their lists) as input arguments.","title":"General note on metadata"},{"location":"getting_started/#discover-data-types","text":"Data type is the main \"dimension\" used to classify the ICOS data objects. It's an \"umbrella\" term aggregating a number of other metadata properties, such as label, data level, project, theme, object format, etc. from icoscp_core.icos import meta # fetches the list of known data types, including metadata associated with them data_types = meta.list_datatypes() data_type_names = [dt.label for dt in data_types] data_type_uris = [dt.uri for dt in data_types] # data types with data access previewable_datatypes = [dt for dt in data_types if dt.has_data_access]","title":"Discover data types"},{"location":"getting_started/#discover-stations","text":"All measurement stations in ICOS metadata have a property called station id. However, this id is not guaranteed to be unique to a station, as it is sometimes reused by co-located stations, and sometimes two \"incarnations\" of a station, ICOS and \"pre-ICOS\" one, coexist in the metadata for a while. The only true id is a URI. from icoscp_core.icos import meta, ATMO_STATION # fetch lists of stations, with basic metadata icos_stations = meta.list_stations() atmo_stations = meta.list_stations(ATMO_STATION) all_known_stations = meta.list_stations(False) # get fully detailed metadata for a station htm_uri = 'http://meta.icos-cp.eu/resources/stations/AS_HTM' htm_station_meta = meta.get_station_meta(htm_uri)","title":"Discover stations"},{"location":"getting_started/#list-data-objects","text":"To select and filter (using various criteria), sort and list data objects, one can use list_data_objects method. All its arguments are optional, and by default it returns 100 latest (by upload time) data objects. from icoscp_core.icos import meta # discovered/chosen data type uri for ICOS ATC CO2 Release co2_release_dt = 'http://meta.icos-cp.eu/resources/cpmeta/atcCo2L2DataObject' latest_co2_release = meta.list_data_objects(datatype=co2_release_dt) latest_htm_co2_release = meta.list_data_objects(datatype=co2_release_dt, station=htm_uri)","title":"List data objects"},{"location":"getting_started/#batch-data-access","text":"For lists of uniform data objects of the same data type (or, more generally and exactly, sharing variable metadata), like latest_co2_release from the previous example, the most efficient way of fetching the data is as follows: from icoscp_core.icos import data co2_release_data = data.batch_get_columns_as_arrays(latest_co2_release, ['TIMESTAMP', 'co2']) The result of this call is an iterator (\"lazy\" sequence) that gets evaluated when used (iterated). Each element of the iterator is a pair, where the first value is an element from latest_co2_release , and the second value is a dictionary mapping variable names to numpy arrays with their values. This output can be used as is for many purposes, but if it is desirable to convert it to pandas DataFrames, it can be done like so (preserving the \"lazyness\"): import pandas as pd co2_release_data_pd = ( (dobj, pd.DataFrame(arrs)) for dobj, arrs in co2_release_data)","title":"Batch data access"},{"location":"getting_started/#examples","text":"See Examples for more lengthy examples using all of the functionality introduced above.","title":"Examples"},{"location":"getting_started/#accessing-documentation","text":"As this library depends on icoscp_core , all the functionality of the latter can be used, not only the examples from above. It is introduced on the PyPi project page , and the source code is available from GitHub . To discover all the rich possibilities of filtering, sorting and paging the lists of the data objects, it is helpful to read the Python docstring of list_data_objects method: from icoscp_core.icos import meta help(meta.list_data_objects) The method signature is not easily readable due to expansion of type annotations, but the docstring explains the method parameters in detail. The output from list_data_objects is a list of DataObjectLite instances. Documentation of this class can be accessed as follows: from icoscp_core.metaclient import DataObjectLite help(DataObjectLite) Similarly, the output from list_datatypes is a list of DobjSpecLite instances, whose docstring is accessible like so: from icoscp_core.metaclient import DobjSpecLite help(DobjSpecLite) Naturally, one can also request Python help on the whole meta constant (which is in fact an instance of class MetaClient ), and on data constant (which is an instance of DataClient ), and on all the methods therein: from icoscp_core.icos import meta, data help(meta) help(meta.get_dobj_meta) help(meta.get_collection_meta) help(meta.get_station_meta) help(data) help(data.batch_get_columns_as_arrays) help(data.get_columns_as_arrays) Finally, MetaClient 's methods fetching detailed metadata (e.g. get_dobj_meta , get_collection_meta , get_station_meta ) return classes who are (or whose constituents are) defined inside module icoscp_core.metacore . This module is not available in the source code on GitHub because it is autogenerated and auto-imported, but can be very instructive to examine and use as a reference. Due to type annotations, it effectively contains metadata specification for all the entities available from the metadata repository. Standalone library users can find it inside their Python installation folder (can be venv or .venv if using a virtual Python environment) at location lib/icoscp_core/metacore.py . Jupyter users can inspect the classes in this module by calling help on it: from icoscp_core import metacore help(metacore)","title":"Accessing documentation"},{"location":"install/","text":"Installation The library requires Python version 3.10 or later. Pip official release The recommended way of installation is by using pip: pip install icoscp The installation should take care of any dependencies, but to successfully access any data object from the ICOS Carbon Portal you need to have a working internet connection. We would encourage you to use a virtual environment for python to test this library. For example with mini-conda https://docs.conda.io/en/latest/miniconda.html you can create a new environment with: conda create -n icos python activate icos pip install icoscp Upgrade guide This concerns users of icoscp of versions prior to 0.2.0 . For standalone library users (i.e. outside of a Carbon Portal Jupyter environment), the package installation (or rather upgrade) procedure must be followed by the authentication setup (unless you have used icoscp_core previously, and configured authentication with it using the default method). After that all the working code that depended on older versions should work (with the exception of STILT-related code, see below ), and no code changes are necessary, but it is highly recommended to replace the following import from icoscp.cpb.dobj import Dobj with from icoscp.dobj import Dobj (i.e. drop .cpb from this import's path) everywhere in your scripts and notebooks. The new Dobj class has a legacy status (see the library history ), like the old one, but contains an improved implementation of the same API. The advantages are: support for metadata access of all data objects (not only the ones whose data is accessible with the library) better performance when fetching the data new metadata property that contains DataObject dataclass from icoscp_core.metaclient module, which is a type-annotated nested structure that was (mostly) automatically produced to faithfully reflect the JSON metadata available for the data object from the metadata server. An effort was made to ensure identical functionality of the new Dobj class when compared with the old one, but there are some differences described elsewhere in the documentation . STILT-related code update Starting from version 0.2.0 , stilt module has been moved out into a dedicated library icoscp_stilt . STILT functionality has normally been only used on Carbon Portal Jupyter, and the new library is going to be provisioned there. The legacy STILT functionality is preserved in the new library with only minor changes. However, the import statements containing icoscp.stilt need to be changed by replacing icoscp.stilt with icoscp_stilt (dot replaced with underscore). After this change all the working legacy STILT notebooks should work. However, the developers are encouraged to consult icoscp_stilt library documentation to discover new functionality that has been added to it. Manual installation If you would like to install the latest version (branch from GitHub), you can download / fork the repo navigate to the library folder and start the installation with: pip install . Cutting Edge Install directly from our GitHub master branch. Please be aware that this is not reflecting the official release of the library, but includes the latest development. Hence, you should think of this as an alpha or beta version of the new release: pip install git+https://github.com/ICOS-Carbon-Portal/pylib.git Dependencies The following modules are required by the library: folium icoscp_core pandas requests tqdm","title":"Installation"},{"location":"install/#installation","text":"The library requires Python version 3.10 or later.","title":"Installation"},{"location":"install/#pip-official-release","text":"The recommended way of installation is by using pip: pip install icoscp The installation should take care of any dependencies, but to successfully access any data object from the ICOS Carbon Portal you need to have a working internet connection. We would encourage you to use a virtual environment for python to test this library. For example with mini-conda https://docs.conda.io/en/latest/miniconda.html you can create a new environment with: conda create -n icos python activate icos pip install icoscp","title":"Pip official release"},{"location":"install/#upgrade-guide","text":"This concerns users of icoscp of versions prior to 0.2.0 . For standalone library users (i.e. outside of a Carbon Portal Jupyter environment), the package installation (or rather upgrade) procedure must be followed by the authentication setup (unless you have used icoscp_core previously, and configured authentication with it using the default method). After that all the working code that depended on older versions should work (with the exception of STILT-related code, see below ), and no code changes are necessary, but it is highly recommended to replace the following import from icoscp.cpb.dobj import Dobj with from icoscp.dobj import Dobj (i.e. drop .cpb from this import's path) everywhere in your scripts and notebooks. The new Dobj class has a legacy status (see the library history ), like the old one, but contains an improved implementation of the same API. The advantages are: support for metadata access of all data objects (not only the ones whose data is accessible with the library) better performance when fetching the data new metadata property that contains DataObject dataclass from icoscp_core.metaclient module, which is a type-annotated nested structure that was (mostly) automatically produced to faithfully reflect the JSON metadata available for the data object from the metadata server. An effort was made to ensure identical functionality of the new Dobj class when compared with the old one, but there are some differences described elsewhere in the documentation .","title":"Upgrade guide"},{"location":"install/#stilt-related-code-update","text":"Starting from version 0.2.0 , stilt module has been moved out into a dedicated library icoscp_stilt . STILT functionality has normally been only used on Carbon Portal Jupyter, and the new library is going to be provisioned there. The legacy STILT functionality is preserved in the new library with only minor changes. However, the import statements containing icoscp.stilt need to be changed by replacing icoscp.stilt with icoscp_stilt (dot replaced with underscore). After this change all the working legacy STILT notebooks should work. However, the developers are encouraged to consult icoscp_stilt library documentation to discover new functionality that has been added to it.","title":"STILT-related code update"},{"location":"install/#manual-installation","text":"If you would like to install the latest version (branch from GitHub), you can download / fork the repo navigate to the library folder and start the installation with: pip install .","title":"Manual installation"},{"location":"install/#cutting-edge","text":"Install directly from our GitHub master branch. Please be aware that this is not reflecting the official release of the library, but includes the latest development. Hence, you should think of this as an alpha or beta version of the new release: pip install git+https://github.com/ICOS-Carbon-Portal/pylib.git","title":"Cutting Edge"},{"location":"install/#dependencies","text":"The following modules are required by the library: folium icoscp_core pandas requests tqdm","title":"Dependencies"},{"location":"legacy_examples/","text":"Legacy examples The following documents legacy code deprecated since library version 0.2.0 . Digital Object For the example below, we assume that you know how to get hold of the PID/URI used at the Carbon Portal. You can read more about this in the Modules section. Each object in the data portal has a unique and persistent identification in form of a URI. The following examples will use the URI https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc , which is an ICOS Atmosphere Level 2 data set from Norunda, release 2019-1. Go to the landing page to find more information about this data set. Data Object from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') Information (metadata) is automatically stored in a dictionary (the json -file from the landing page) with the object, accessible with Dobj.meta . More about the content of meta and other attributes are in the modules section . Common used properties are as well available directly. Following are a few examples: dobj.colNames ['TIMESTAMP', 'Flag', 'NbPoints', 'ch4', 'Stdev'] or get the citation string for this object: dobj.citation \"Lehner, I., M\u00f6lder, M., ICOS RI, 2019. ICOS ATC CH4 Release, Norunda (59.0 m), 2017-04-01\u20132019-04-30, https://hdl.handle.net/11676/lNJPHqvsMuTAh-3DOvJejgYc\" DataFrame Extracting the data as pandas data frame: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') display(dobj.data.head(10)) Printing the first 10 rows of the data ( data.head(10) ) should yield the following table: id Flag NbPoints Stdev TIMESTAMP ch4 0 N 0 -9.990 2017-04-01 00:00:00 NaN 1 N 0 -9.990 2017-04-01 01:00:00 NaN 2 O 9 0.079 2017-04-01 02:00:00 1948.660034 3 O 16 1.070 2017-04-01 03:00:00 1950.900024 4 O 17 0.817 2017-04-01 04:00:00 1953.229980 5 O 16 0.271 2017-04-01 05:00:00 1956.319946 6 O 16 0.590 2017-04-01 06:00:00 1957.810059 7 O 16 0.736 2017-04-01 07:00:00 1960.550049 8 O 16 0.429 2017-04-01 08:00:00 1962.540039 9 O 17 0.861 2017-04-01 09:00:00 1965.349976 Minimalistic Plot This first example shows how to extract a data file and create a plot. It is the easiest way to load the data into a Pandas DataFrame in your Python environment. The DataFrame contains the following columNames: Flag, NbPoints, Stdev, TIMESTAMP, ch4. Let's load the data and create a plot for measured methane concentrations over time. from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') dobj.data.plot(x='TIMESTAMP', y='ch4', grid=True) Plot with Title and Units To get a useful plot, at the very least we should have a title and the unit of measurement: import matplotlib.pyplot as plt from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') # Extract information from the dobj meta data. # Look at dobj.meta for a full list of metadata. unit = dobj.variables[dobj.variables.name == 'ch4'].unit.values[0] name = dobj.station['org']['name'] uri = dobj.station['org']['self']['uri'] title = f\"{name} \\n {uri}\" plot = dobj.data.plot(x='TIMESTAMP', y='ch4', grid=True, title=title) plot.set(ylabel=unit) plt.show() Stations Station Id's The function to get the station id's might be something you will use a lot. Based on a station id you can get all the dobj id's (PID/URI) and hence access to the data. So if you have no idea whatsoever what stations are available, you came to the right place: from icoscp.station import station station_list = station.getIdList() # Returns a Pandas DataFrame. station_list.columns # What information do we get back? Index(['uri', 'id', 'name', 'country', 'lat', 'lon', 'elevation', 'project', 'theme'], dtype='object') station_list.head(5) uri id name ... project theme ... SE-Sto Abisko-Stordalen Palsa Bog ... ICOS ES ... IT-Noe Arca di Noe - Le Prigionette ... ICOS ES ... UK-AMo Auchencorth Moss ... ICOS ES ... FR-Aur Aurade ... ICOS ES ... 11BE BE-SOOP-Belgica ... ICOS OS Now you have basic information about a station, but most important you got the station id as well. NOTE: to create a station object you need to provide the station id as is CaseSensitive A station Object Let's create a station object and have a look what information is provided with the function .info() . Each entry from \"info\" is an attribute and can be extracted with \"myStation.attribute\". In the following example you can access the station name with myStation.name from icoscp.station import station my_station = station.get('SE-Nor') my_station.info() { 'stationId': 'SE-Nor', 'name': 'Norunda', 'theme': 'ES', 'icosclass': '2', 'siteType': 'Forest', 'lat': 60.0865, 'lon': 17.4795, 'eas': None, 'firstName': 'Meelis', 'lastName': 'M\u00f6lder', 'email': 'meelis.molder@nateko.lu.se', 'country': 'SE', 'project': ['ICOS'], 'uri': ['http://meta.icos-cp.eu/resources/stations/ES_SE-Nor'] } # Return a DataFrame with all products available from this station. myStation.products() id specification 0 Drought 2018 Archive Product 1 Ecosystem meteo time series (ICOS Sweden) 2 Ecosystem fluxes time series (ICOS Sweden) 3 Ecosystem eco time series (ICOS Sweden) 4 Drought 2018 FLUXNET Product 5 ICOS ETC Archive Product 6 ICOS ETC FLUXNET Product All the dobj URI's (ultimately containing the data itself) can be retrieved with myStation.data() let see what columns are provided. The most important information will be the 'dobj' column. This contains the link to the data and can be used to extract the data. from icoscp.station import station myStation = station.get('SE-Nor') myStation.data().columns Index(['station', 'dobj', 'spec', 'timeStart', 'timeEnd', 'specLabel', 'samplingheight', 'datalevel', 'bytes'], dtype='object') # Return a DataFrame with Level 2 data objects for the station. myStation.data(level='2') station dobj spec ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/KfJjYyksI2nxCiJU36UfYVY_ .../dought2018ArchiveProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/L-in6TpOcGjmXruwi3ESD9G2 .../drought2018FluxnetProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/mBPKiB9tIQZQGrsy8ehAinvz .../etcArchiveProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/XA_Ifq7BKqS0tkQd4dGVEFnM .../etcFluxnetProduct This is not the full output, just an excerpt. List of Stations There is a built-in function to extract a list of stations. Be aware that if you extract all ICOS stations, a lot of information is gathered and retrieved. At the time of writing there are over a 170 stations and in can take up to a minute to extract all. from icoscp.station import station icosStations = station.getList() for s in icosStations: print(s.stationId, s.name, s.lat, s.lon) SE-Sto Abisko-Stordalen Palsa Bog 68.35596 19.04521 IT-Noe Arca di Noe - Le Prigionette 40.60617 8.15117 UK-AMo Auchencorth Moss 55.7925 -3.24362 FR-Aur Aurade 43.54965 1.106103 ... Collections Find a collection from icoscp.collection import collection collection.getIdList() Output is a pandas data frame, where each row contains information about a collection. The column collection or doi can be used to create a collection representation. The column dobj contains a list of all associated digital objects (the data) and the column count tells you how many data files are associated. collection doi title description dobj count https://meta.icos-cp.eu/collections/WM5ShdLFqP... 10.18160/P7E9-EKEA Ambient atmospheric methane observations from ... This dataset for historic ambient CH4 mole fra... [https://meta.icos-cp.eu/objects/pWqX-lRUsilS_... 30 Create a collection representation With the information from above, you can use either the collection or doi to initialize a collection representation and print some information. Have a look at Modules / collection for a full list of attributes. my_collection = collection.get('10.18160/P7E9-EKEA') my_collection.info() { 'id': 'https://meta.icos-cp.eu/collections/WM5ShdLFqPSI0coyVa57G1_Z', 'doi': '10.18160/P7E9-EKEA', 'citation': 'Integrated Non-CO2 Observing System (INGOS). (2018). Ambient atmospheric methane observations from the ICOS/InGOS network 2000-2015. ICOS ERIC - Carbon Portal. https://doi.org/10.18160/P7E9-EKEA\\n', 'title': 'Ambient atmospheric methane observations from the ICOS/InGOS network 2000-2015', 'description': 'This dataset for historic ambient CH4 mole fractions is an important outcome of the FP7 InGOS project (http://www.ingos-infrastructure.eu, Grant Agreement Number 284274). Data from 17 stations have been reprocessed for the period 2000-2015; in some cases involving re-integration of chromatograms and in all cases re-calibrating the time series using updated assigned values for standard gases and target gases. All data have been brought to the same concentration scale (NOAA-2006A). Data have been flagged for identified periods with instrumental or sampling problems. Next to added estimations for measurement uncertainty based on repeatability of the working standards also error estimates are added that represent uncertainty due to lab internal scale consistency, monthly reproducibility, scale transfer and where available comparison with concurrent flask sampling.' } A more in depth example and how to plot data from the collection can be found on https://exploredata.icos-cp.eu","title":"Legacy icoscp examples"},{"location":"legacy_examples/#legacy-examples","text":"The following documents legacy code deprecated since library version 0.2.0 .","title":"Legacy examples"},{"location":"legacy_examples/#digital-object","text":"For the example below, we assume that you know how to get hold of the PID/URI used at the Carbon Portal. You can read more about this in the Modules section. Each object in the data portal has a unique and persistent identification in form of a URI. The following examples will use the URI https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc , which is an ICOS Atmosphere Level 2 data set from Norunda, release 2019-1. Go to the landing page to find more information about this data set.","title":"Digital Object"},{"location":"legacy_examples/#data-object","text":"from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') Information (metadata) is automatically stored in a dictionary (the json -file from the landing page) with the object, accessible with Dobj.meta . More about the content of meta and other attributes are in the modules section . Common used properties are as well available directly. Following are a few examples: dobj.colNames ['TIMESTAMP', 'Flag', 'NbPoints', 'ch4', 'Stdev'] or get the citation string for this object: dobj.citation \"Lehner, I., M\u00f6lder, M., ICOS RI, 2019. ICOS ATC CH4 Release, Norunda (59.0 m), 2017-04-01\u20132019-04-30, https://hdl.handle.net/11676/lNJPHqvsMuTAh-3DOvJejgYc\"","title":"Data Object"},{"location":"legacy_examples/#dataframe","text":"Extracting the data as pandas data frame: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') display(dobj.data.head(10)) Printing the first 10 rows of the data ( data.head(10) ) should yield the following table: id Flag NbPoints Stdev TIMESTAMP ch4 0 N 0 -9.990 2017-04-01 00:00:00 NaN 1 N 0 -9.990 2017-04-01 01:00:00 NaN 2 O 9 0.079 2017-04-01 02:00:00 1948.660034 3 O 16 1.070 2017-04-01 03:00:00 1950.900024 4 O 17 0.817 2017-04-01 04:00:00 1953.229980 5 O 16 0.271 2017-04-01 05:00:00 1956.319946 6 O 16 0.590 2017-04-01 06:00:00 1957.810059 7 O 16 0.736 2017-04-01 07:00:00 1960.550049 8 O 16 0.429 2017-04-01 08:00:00 1962.540039 9 O 17 0.861 2017-04-01 09:00:00 1965.349976","title":"DataFrame"},{"location":"legacy_examples/#minimalistic-plot","text":"This first example shows how to extract a data file and create a plot. It is the easiest way to load the data into a Pandas DataFrame in your Python environment. The DataFrame contains the following columNames: Flag, NbPoints, Stdev, TIMESTAMP, ch4. Let's load the data and create a plot for measured methane concentrations over time. from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') dobj.data.plot(x='TIMESTAMP', y='ch4', grid=True)","title":"Minimalistic Plot"},{"location":"legacy_examples/#plot-with-title-and-units","text":"To get a useful plot, at the very least we should have a title and the unit of measurement: import matplotlib.pyplot as plt from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') # Extract information from the dobj meta data. # Look at dobj.meta for a full list of metadata. unit = dobj.variables[dobj.variables.name == 'ch4'].unit.values[0] name = dobj.station['org']['name'] uri = dobj.station['org']['self']['uri'] title = f\"{name} \\n {uri}\" plot = dobj.data.plot(x='TIMESTAMP', y='ch4', grid=True, title=title) plot.set(ylabel=unit) plt.show()","title":"Plot with Title and Units"},{"location":"legacy_examples/#stations","text":"","title":"Stations"},{"location":"legacy_examples/#station-ids","text":"The function to get the station id's might be something you will use a lot. Based on a station id you can get all the dobj id's (PID/URI) and hence access to the data. So if you have no idea whatsoever what stations are available, you came to the right place: from icoscp.station import station station_list = station.getIdList() # Returns a Pandas DataFrame. station_list.columns # What information do we get back? Index(['uri', 'id', 'name', 'country', 'lat', 'lon', 'elevation', 'project', 'theme'], dtype='object') station_list.head(5) uri id name ... project theme ... SE-Sto Abisko-Stordalen Palsa Bog ... ICOS ES ... IT-Noe Arca di Noe - Le Prigionette ... ICOS ES ... UK-AMo Auchencorth Moss ... ICOS ES ... FR-Aur Aurade ... ICOS ES ... 11BE BE-SOOP-Belgica ... ICOS OS Now you have basic information about a station, but most important you got the station id as well. NOTE: to create a station object you need to provide the station id as is CaseSensitive","title":"Station Id's"},{"location":"legacy_examples/#a-station-object","text":"Let's create a station object and have a look what information is provided with the function .info() . Each entry from \"info\" is an attribute and can be extracted with \"myStation.attribute\". In the following example you can access the station name with myStation.name from icoscp.station import station my_station = station.get('SE-Nor') my_station.info() { 'stationId': 'SE-Nor', 'name': 'Norunda', 'theme': 'ES', 'icosclass': '2', 'siteType': 'Forest', 'lat': 60.0865, 'lon': 17.4795, 'eas': None, 'firstName': 'Meelis', 'lastName': 'M\u00f6lder', 'email': 'meelis.molder@nateko.lu.se', 'country': 'SE', 'project': ['ICOS'], 'uri': ['http://meta.icos-cp.eu/resources/stations/ES_SE-Nor'] } # Return a DataFrame with all products available from this station. myStation.products() id specification 0 Drought 2018 Archive Product 1 Ecosystem meteo time series (ICOS Sweden) 2 Ecosystem fluxes time series (ICOS Sweden) 3 Ecosystem eco time series (ICOS Sweden) 4 Drought 2018 FLUXNET Product 5 ICOS ETC Archive Product 6 ICOS ETC FLUXNET Product All the dobj URI's (ultimately containing the data itself) can be retrieved with myStation.data() let see what columns are provided. The most important information will be the 'dobj' column. This contains the link to the data and can be used to extract the data. from icoscp.station import station myStation = station.get('SE-Nor') myStation.data().columns Index(['station', 'dobj', 'spec', 'timeStart', 'timeEnd', 'specLabel', 'samplingheight', 'datalevel', 'bytes'], dtype='object') # Return a DataFrame with Level 2 data objects for the station. myStation.data(level='2') station dobj spec ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/KfJjYyksI2nxCiJU36UfYVY_ .../dought2018ArchiveProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/L-in6TpOcGjmXruwi3ESD9G2 .../drought2018FluxnetProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/mBPKiB9tIQZQGrsy8ehAinvz .../etcArchiveProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/XA_Ifq7BKqS0tkQd4dGVEFnM .../etcFluxnetProduct This is not the full output, just an excerpt.","title":"A station Object"},{"location":"legacy_examples/#list-of-stations","text":"There is a built-in function to extract a list of stations. Be aware that if you extract all ICOS stations, a lot of information is gathered and retrieved. At the time of writing there are over a 170 stations and in can take up to a minute to extract all. from icoscp.station import station icosStations = station.getList() for s in icosStations: print(s.stationId, s.name, s.lat, s.lon) SE-Sto Abisko-Stordalen Palsa Bog 68.35596 19.04521 IT-Noe Arca di Noe - Le Prigionette 40.60617 8.15117 UK-AMo Auchencorth Moss 55.7925 -3.24362 FR-Aur Aurade 43.54965 1.106103 ...","title":"List of Stations"},{"location":"legacy_examples/#collections","text":"","title":"Collections"},{"location":"legacy_examples/#find-a-collection","text":"from icoscp.collection import collection collection.getIdList() Output is a pandas data frame, where each row contains information about a collection. The column collection or doi can be used to create a collection representation. The column dobj contains a list of all associated digital objects (the data) and the column count tells you how many data files are associated. collection doi title description dobj count https://meta.icos-cp.eu/collections/WM5ShdLFqP... 10.18160/P7E9-EKEA Ambient atmospheric methane observations from ... This dataset for historic ambient CH4 mole fra... [https://meta.icos-cp.eu/objects/pWqX-lRUsilS_... 30","title":"Find a collection"},{"location":"legacy_examples/#create-a-collection-representation","text":"With the information from above, you can use either the collection or doi to initialize a collection representation and print some information. Have a look at Modules / collection for a full list of attributes. my_collection = collection.get('10.18160/P7E9-EKEA') my_collection.info() { 'id': 'https://meta.icos-cp.eu/collections/WM5ShdLFqPSI0coyVa57G1_Z', 'doi': '10.18160/P7E9-EKEA', 'citation': 'Integrated Non-CO2 Observing System (INGOS). (2018). Ambient atmospheric methane observations from the ICOS/InGOS network 2000-2015. ICOS ERIC - Carbon Portal. https://doi.org/10.18160/P7E9-EKEA\\n', 'title': 'Ambient atmospheric methane observations from the ICOS/InGOS network 2000-2015', 'description': 'This dataset for historic ambient CH4 mole fractions is an important outcome of the FP7 InGOS project (http://www.ingos-infrastructure.eu, Grant Agreement Number 284274). Data from 17 stations have been reprocessed for the period 2000-2015; in some cases involving re-integration of chromatograms and in all cases re-calibrating the time series using updated assigned values for standard gases and target gases. All data have been brought to the same concentration scale (NOAA-2006A). Data have been flagged for identified periods with instrumental or sampling problems. Next to added estimations for measurement uncertainty based on repeatability of the working standards also error estimates are added that represent uncertainty due to lab internal scale consistency, monthly reproducibility, scale transfer and where available comparison with concurrent flask sampling.' } A more in depth example and how to plot data from the collection can be found on https://exploredata.icos-cp.eu","title":"Create a collection representation"},{"location":"modules/","text":"Legacy modules The following legacy modules are available in the library to find and access data hosted at the Carbon Portal. After a successful installation into your python environment you should be able to load the modules with: from icoscp.dobj import Dobj (recommended) from icoscp.cpb.dobj import Dobj from icoscp.station import station from icoscp.collection import collection from icoscp.sparql.runsparql import RunSparql from icoscp.sparql import sparqls Dobj This is the basic module to load a d igital obj ect (data set) into memory. You need to know a valid persistent identifier (PID/URL) to access the data. Either you can browse the data portal to find PIDs or you can use the \"station\" package to find PIDs programmatically (see section station ). In essence each data object is linked to a unique and persistent identifier in the form of a URL. Hence, each data object has an online landing page. If you select any data object on https://data.icos-cp.eu and then navigate to the PID link (which looks like 11676/pli1C0sX-HE2KpQQIvuYhX01 ) you end up on the 'landing' page of the document. If you look at the address bar of your browser, you will see a URL similar to https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01 . To access the data you need to know this URL or the last part of the URL ( pli1C0sX-HE2KpQQIvuYhX01 ). Load the module and initialise the Dobj class with a PID. The following statements yield the same result: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') dobj = Dobj('11676/pli1C0sX-HE2KpQQIvuYhX01') dobj = Dobj('pli1C0sX-HE2KpQQIvuYhX01') Properties Dobj.alt Retrieve the float value representing the altitude above sea level of the station associated with the Dobj. Be aware, this is not the sampling height for the data. If the station does not have a specified altitude, return None . Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') altitude = dobj.alt Dobj.citation Return the citation string linked to the Dobj in plain string format. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') citation = dobj.citation See also class method Dobj.get_citation() Dobj.colNames Return a list of available column names for a station-specific time series data object or None if no column names are available. This information is part of the Dobj.meta property, which holds all the available metadata. Raise a MetaTypeError exception for spatiotemporal data objects. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') column_names = dobj.colNames Dobj.data Retrieve the actual data for the PID in Pandas DataFrame format. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') data = dobj.data Dobj.dobj Retrieve the PID for the Dobj. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') pid = dobj.dobj See also Dobj.id Dobj.elevation Retrieve the float value representing the elevation above sea level of the station associated with the Dobj. Be aware, this is not the sampling height for the data. If the station does not have a specified elevation, return None . This property will be deprecated in the next release. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') elevation = dobj.elevation See also Dobj.alt Dobj.id Retrieve the PID for the Dobj. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') pid = dobj.id See also Dobj.dobj Dobj.info Return a dictionary based on the metadata available from the landing page of the ICOS Carbon Portal website. This property will be deprecated in the next release. Example: from icoscp.dobj import Dobj from pprint import pprint dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') pprint(dobj.info) See also Dobj.meta Dobj.lat Retrieve the float value representing the latitude of the station associated with the Dobj. If the station does not have a specified latitude, return None . Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') latitude = dobj.lat Dobj.licence Return a dictionary with these keys: 'baseLicence', 'name', 'url', 'webpage', containing information about the dataset's associated license. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') latitude = dobj.lat Dobj.lon Retrieve the float value representing the longitude of the station associated with the Dobj. If the station does not have a specified longitude, return None . Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') longitude = dobj.lon Dobj.meta Return a dictionary based on the metadata available from the landing page of the ICOS Carbon Portal website. Every data object has a rich set of metadata available. You can download an example from the data portal. This will then be parsed into a python dictionary representing the metadata from ICOS. Some of the important key properties, like 'previous', 'next', 'citation', e.t.c., are extracted for easy access and made available as properties. Example: from icoscp.dobj import Dobj from pprint import pprint dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') pprint(dobj.meta) Dobj.next Return a landing page in the form of a string, featuring the next version of this data object if it exists. Return None if a next version does not exist. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') next_version = dobj.next Dobj.previous Return a landing page in the form of a string, featuring the previous version of this data object if it exists. Return None if a previous version does not exist. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') previous_version = dobj.previous Dobj.station Return a dictionary containing metadata associated with the station corresponding to the Dobj. Please be aware that prior to version 0.1.15 this has returned a string with station id, which is now available as station['id']. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') station_meta = dobj.station Dobj.valid Return the validity of a Dobj as a boolean. This is kept for backwards compatibility reasons. From icoscp 0.2.0 and onwards, the Dobj class cannot be instantiated with an invalid PID, thus this will always return True . This property will be deprecated in the next release. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') validity = dobj.valid Dobj.variables Return a Pandas DataFrame providing access to all available variables, including the name, unit, type, and the landing page for the format used (int, float, char, ...). Raise a MetaValueError exception if no variable information is available. The following example and its output shows the variables of an atmospheric methane concentration data object: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/zjNZLdVDcVUNwonvJIN5GQ3b') variables = dobj.variables print(variables) Output: index name unit type format 0 TIMESTAMP None time instant, UTC http://meta.icos-cp.eu/ontologies/cpmeta/iso8601dateTime 1 Flag None quality flag http://meta.icos-cp.eu/ontologies/cpmeta/bmpChar 2 NbPoints None number of points http://meta.icos-cp.eu/ontologies/cpmeta/int32 3 ch4 nmol mol-1 CH4 mixing ratio (dry mole fraction) http://meta.icos-cp.eu/ontologies/cpmeta/float32 4 Stdev nmol mol-1 standard deviation of gas mole fraction http://meta.icos-cp.eu/ontologies/cpmeta/float32 Methods Dobj.get(columns) Retrieve the actual data for the PID in Pandas DataFrame format. You have the option to retrieve only selected columns (or variables) using a list of variables as an input argument. Only valid and unique entries will be returned. You can see valid entries with Dobj.colNames or Dobj.variables . If columns are not provided, or if none of the provided variables are valid, or if you work with local data, the default DataFrame (with all columns) will be returned. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') col_names = dobj.colNames # or # col_names = dobj.variables['name'].to_list() data = dobj.get(columns=col_names) Dobj.getColumns(columns) Retrieve the actual data for the PID in Pandas DataFrame format. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') col_names = dobj.colNames # or # col_names = dobj.variables['name'].to_list() data = dobj.getColumns(columns=col_names) See also Dobj.get(columns) and Dobj.data Dobj.get_citation(format) Return the citation string in different formats. By default, a plain formatted string is returned. Possible formats are: plain : (default) a simple string bibtex : wikipedia ris : wikipedia Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') ris_citation = dobj.get_citation('ris') See also Dobj.citation Original legacy Dobj The actual original legacy (prior to version 0.2.0 ) Dobj class resides in module icoscp.cpb.dobj . Most code is recommended to migrate to the new implementation of this class residing in module icoscp.dobj , but the old class is preserved to avoid breaking any dependent code by library update, and additionally, there are some known differences between the versions, documented below. Dobj initialization Using from icoscp.cpb.dobj import Dobj , you can initialize the Dobj class in one of the following ways: from icoscp.cpb.dobj import Dobj my_dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') my_dobj = Dobj('11676/pli1C0sX-HE2KpQQIvuYhX01') my_dobj = Dobj('pli1C0sX-HE2KpQQIvuYhX01') or create an 'empty' Dobj instance and set the identifier later: from icoscp.cpb.dobj import Dobj dobj = Dobj() dobj.dobj = 'https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01' Using from icoscp.dobj import Dobj , instantiating an 'empty' Dobj class, and setting the identifier later will result in a TypeError . This functionality was removed to preserve the Dobj class state and prevent unexpected behavior. Dobj datetime conversion control (Not available in the new implementation, as all datetime conversions are handled by pandas library in a uniform way) Dobj.dateTimeConvert = True The binary data representation provides a UTC Timestamp as Unix-timestamp with start point of 1970-01-01 00:00:00. By default, when using from icoscp.cpb.dobj import Dobj this is converted to a DateTimeObject of type pandas._libs.tslibs.timestamps.Timestamp . If you prefer to have the raw Unix-timestamp ( numpy.float64 ), set Dobj.dateTimeConvert = False prior to load the data with .get() or .data or .getColumns() . Return BOOL Dobj.size() (Not available in the new implementation. To get data object size in bytes from the new Dobj class, call Dobj.metadata.size or Dobj.meta['size'] ) The real size of the dobj in [bytes, KB, MB, TB]. Since this object may contain the data, it is no longer just a pointer to data. Return TUPLE (int32, STR), where int32 represents the size and STR the unit. Example output looks like: (4.353, 'MB') Station The station module provides a search facility to explore ICOS stations and find associated data objects and data products. There is a lot of information available about the ICOS stations, partner countries, measured variables and much more in the ICOS Handbook . load the module with: from icoscp.station import station classmethod station.Station() The station object is primarily a data structure to store the associated metadata. The metadata is provided with specific and complex Sparql queries. It is possible to instantiate this class on its own, but we recommend using the convenience functions station.getIdList() station.get('StationID') station.getList() as described further below to create the station object. Once you have a created valid station object a list of attributes are available: Attributes: Station.country Country code Return STR Station.data(level=None) All associated data object for the station are returned. ICOS distinguishes data in terms of how processed they are. - Data level 1: Near Real Time Data (NRT) or Internal Work data (IW). - Data level 2: The final quality checked ICOS RI data set, published by the CFs, to be distributed through the Carbon Portal. This level is the ICOS-data product and free available for users. - Data level 3: All kinds of elaborated products by scientific communities that rely on ICOS data products are called Level 3 data. Return Pandas DataFrame Station.eas Elevation above sea level in meter. Return FLOAT Station.icosclass Classification for certified ICOS stations. Please consult the ICOS Handbook for further information about the Class 1&2 certificate. Return STR Station.firstName PI (Principal Investigator) First Name. Return STR Station.lastName PI (Principal Investigator) last name Return STR Station.email PI (Principal Investigator) email address Return STR Station.lat Latitude for the station. Return FLOAT Station.lon Longitude for the station. Return FLOAT Station.name Returns the full name for the station. Return STR Station.project ICOS Carbon Portal is a data portal from and for the ICOS community. However, the data portal does host more than ICOS data. The station association is listed here (if available) Return LIST Station.stationId Set or retrieve the StationId Return STR Station.theme For ICOS stations a 'theme' is provided. Please note that, a station may belong to more than one theme, but with different themes. For example the stationId \"NOR\" (Norunda, Sweden), will give you access to the atmospheric data products, whereas the stationId \"SE-Nor\" will return the Ecosystem data products. AS for Atmospheric Stations ES for Ecosystem Stations OS for Ocean Stations Return STR Station.uri Link to the landing page for the station. Because a station ID may be associated with more than one 'project' this returns a list of URI's Return LIST Station.valid True if stationId is found. Return BOOL Convenience functions The following three functions are recommended to get information about the available stations at the Carbon Portal and how to get a valid station object (or list of): station.getIdList() The station.getIdList takes several parameters: project: str = 'ICOS' theme: list = None sort: str = 'name' outfmt: str = 'pandas' icon=None The default call station.getIdList() , which is the same as station.getIdList(project='ICOS', sort='name') returns a Pandas DataFrame with columns: ['uri', 'id', 'name', 'icosClass', 'country', 'lat', 'lon', 'elevation', 'stationTheme', 'firstName', 'lastName', 'email', 'siteType', 'project', 'theme'] By default, ICOS certified stations are returned. If project is set to 'all' , all known stations (to the Carbon Portal) are returned. By default, the DataFrame is sorted by the column name . You can provide any column name as sorting parameter. The 'id' of the record, can be used to instantiate a station. Hence, it is easy to adjust and filter these records and use the column 'id' as input for station.get() . The theme parameter can be set to either 'AS' , 'ES' or 'OS' , or a list with a combination of these strings. Here 'AS' , 'ES and 'OS' are short for atmospheric, ecosystem and ocean stations. Thus, station.getIdList(theme='AS') will return a DataFrame with all atmospheric ICOS stations. If the optional argument outfmt='map' is provided station.getIdList(project='ALL', outfmt='map', icon=None) a folium map is created with, in this case, all stations (since we use project='ALL' ). Stations without a fixed location (like measurements collected from instrumented Ships of Opportunity) will not be included in the map. Each marker in the map represents a station and contains station related information. A user can further customize the style of the map by providing the icon argument [None, 'flag', 'path/to/image.png'] . Return Folium Map station.get() station.get('stationID') Provide a valid station id (see getIdList()) to create a Station object. NOTE: stationId is CaseSensitive. Return Station Object station.getList() station.getList(theme=['AS','ES','OS'], ids=None) This is the easiest way to get a list of ICOS stations. By default, a full list of all certified ICOS stations is returned. You can filter the output by provided a list of themes OR you can provide a list of station id's. NOTE: If you provide a list of id's, the theme filter is ignored. station.getList(['as', 'os']) list with ICOS atmospheric and ocean stations station.getList(ids=['NOR', 'HTM', 'HUN']) list with stations NOR (Norunda), HTM (Hyltemossa), HUN (Hegyhatsal) Return LIST[Station Objects] Collection This module supports to load a collection of digital objects. Data products ( https://www.icos-cp.eu/data-products ) or collections are an assembly for a specific theme, or project. For example the ICOS community assembled data to provide a base for the Drought anomaly in 2018. This dataset was then used to study the impact of this extreme event, which ultimately led to a series of publications available as 'theme issue' in The Royal Society . Subsequently, the data sets are now public available at the ICOS Carbon Portal ( Drought-2018 ecosystem eddy covariance flux product for 52 stations and Drought-2018 atmospheric CO2 Mole Fraction product for 48 stations (96 sample heights) . Load the module with: from icoscp.collection import collection classmethod Collection(coll) (where coll represents a pandas.DataFrame , similar to the output from .getIdList()). BUT only similar. We do NOT Recommend to instantiate this class directly. Please use the function .get(CollectionId) . The Purpose of the class documentation is to provide you a list of attributes available, after the .get(CollectionId) return a collection object. Attributes: Collection.id This is the ICOS URI (PID). A link to the landing page on the ICOS data portal. Return STR Collection.doi If available, the official DOI in form of '10.18160/ry7n-3r04'. Return STR Collection.citation For convenience the citation string provided from [https://citation.crosscite.org/] is stored in this attribute. If you like to have a different format, please have a look at .getCitation description below. Return STR Collection.title Return STR Collection.description Return STR Collection.info() For convenience all the attributes above (id, doi, citation, title, description) . You can choose the output format with fmt=[\"dict\" | \"pandas\" | \"html\"]. The default is \"dict\". info(self, fmt='dict') Return FMT, default DICT Collection.datalink This returns a list of PID/URI of digital objects associated with the collection. Return LIST[STR] Collection.data This returns a list of Dobj associated to the collection. Please refer to the module Digital Object above. Return LIST[Dobj] Collection.getCitation() Collection.getCitation(format='apa', lang='en-GB')** If the collection has a DOI, you will get a citation string from https://citation.crosscite.org/ . You may provide any style & language parameters found on the website. Our default style is apa and language en-GB , which is stored in the attribute collection.citation . Use the function getCitation(), if you need a specific format & language adaption. Example to get a Bibtex styled citation: .getCitation('bibtex','de-CH') Convenience functions The following functions are recommended to get information about the available collections as well as creating an instance of a collection. collection.getIdList() collection.getIdList() This will return a pandas.DataFrame , listing all available collections at the data portal. The DataFrame contains the following columns: ['collection', 'doi', 'title', 'description', 'dobj', 'count'] . We would recommend that you pay close attention to the count . We have collections with many data objects associated. If you just want to play around, select a collection with less than 10 objects. collection contains the PID/URI for the collection. This is the ID you need to provide for the .get(CollectionId) function. Please be aware that you need to provide the full URI. Example: .get('https://meta.icos-cp.eu/collections/n7cIMHIyqHJKBeF_3jjgptHP') dobj contains a list (LIST[STR]) of all PID/URI associated data objects. count tells you how many data objects are associated with this collection. Returns a pandas DataFrame collection.get() collection.get(CollectionId) Create a collection object. See the class method above for the attributes available in the collection object. The CollectionId must be either the full ICOS URI of the collection landing page or the DOI (if one is available). Not all collections have a DOI. Both information can be extracted with the function .getIdList() .The following to lines to create 'myCollection' yield the same result : myCollection = get('https://meta.icos-cp.eu/collections/n7cIMHIyqHJKBeF_3jjgptHP') myCollection = get('10.18160/ry7n-3r04') Returns Collection Sparql At the ICOS Carbon Portal we store all data and metadata as linked data in a triple store. For more information about this approach refer to Semantic Web , Resource Description Framework (RDF) , and Triple Stores . This module is a simple interface to the SPARQL endpoint at the Carbon Portal. You can write your own queries and use the module to query the database or use some of the provided built-in queries. Load the module with: from icoscp.sparql.runsparql import RunSparql classmethod RunSparql(sparql_query='', output_format='txt') sparql_query needs to be a valid query. You can test a query directly at the online SPARQL endpoint at https://meta.icos-cp.eu/sparqlclient/?type=CSV . The output format is by default (txt/json) but you can adjust with the following formats ['json', 'csv', 'dict', 'pandas', 'array', 'html']. Attributes: RunSparql.data If a query is set and the method .run() was executed, it returns the result from the SPARQL endpoint. If no data is available the method returns False (BOOL). Return BOOL | STR RunSparql.query = 'query' Retrieve or set the query. Return STR RunSparql.format = 'fmt' Retrieve or set the output format. fmt = 'json', 'csv', 'dict', 'pandas', 'array', 'html' Return STR RunSparql.run() This method actually executes the query and formats the result to the output format. If the sparql query is not executable because of syntax errors, for example, a TUPLE is returned (False, 'Bad Request') Return TUPLE | FMT","title":"Legacy icoscp modules"},{"location":"modules/#legacy-modules","text":"The following legacy modules are available in the library to find and access data hosted at the Carbon Portal. After a successful installation into your python environment you should be able to load the modules with: from icoscp.dobj import Dobj (recommended) from icoscp.cpb.dobj import Dobj from icoscp.station import station from icoscp.collection import collection from icoscp.sparql.runsparql import RunSparql from icoscp.sparql import sparqls","title":"Legacy modules"},{"location":"modules/#dobj","text":"This is the basic module to load a d igital obj ect (data set) into memory. You need to know a valid persistent identifier (PID/URL) to access the data. Either you can browse the data portal to find PIDs or you can use the \"station\" package to find PIDs programmatically (see section station ). In essence each data object is linked to a unique and persistent identifier in the form of a URL. Hence, each data object has an online landing page. If you select any data object on https://data.icos-cp.eu and then navigate to the PID link (which looks like 11676/pli1C0sX-HE2KpQQIvuYhX01 ) you end up on the 'landing' page of the document. If you look at the address bar of your browser, you will see a URL similar to https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01 . To access the data you need to know this URL or the last part of the URL ( pli1C0sX-HE2KpQQIvuYhX01 ). Load the module and initialise the Dobj class with a PID. The following statements yield the same result: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') dobj = Dobj('11676/pli1C0sX-HE2KpQQIvuYhX01') dobj = Dobj('pli1C0sX-HE2KpQQIvuYhX01')","title":"Dobj"},{"location":"modules/#properties","text":"","title":"Properties"},{"location":"modules/#dobjalt","text":"Retrieve the float value representing the altitude above sea level of the station associated with the Dobj. Be aware, this is not the sampling height for the data. If the station does not have a specified altitude, return None . Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') altitude = dobj.alt","title":"Dobj.alt"},{"location":"modules/#dobjcitation","text":"Return the citation string linked to the Dobj in plain string format. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') citation = dobj.citation See also class method Dobj.get_citation()","title":"Dobj.citation"},{"location":"modules/#dobjcolnames","text":"Return a list of available column names for a station-specific time series data object or None if no column names are available. This information is part of the Dobj.meta property, which holds all the available metadata. Raise a MetaTypeError exception for spatiotemporal data objects. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') column_names = dobj.colNames","title":"Dobj.colNames"},{"location":"modules/#dobjdata","text":"Retrieve the actual data for the PID in Pandas DataFrame format. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') data = dobj.data","title":"Dobj.data"},{"location":"modules/#dobjdobj","text":"Retrieve the PID for the Dobj. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') pid = dobj.dobj See also Dobj.id","title":"Dobj.dobj"},{"location":"modules/#dobjelevation","text":"Retrieve the float value representing the elevation above sea level of the station associated with the Dobj. Be aware, this is not the sampling height for the data. If the station does not have a specified elevation, return None . This property will be deprecated in the next release. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') elevation = dobj.elevation See also Dobj.alt","title":"Dobj.elevation"},{"location":"modules/#dobjid","text":"Retrieve the PID for the Dobj. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') pid = dobj.id See also Dobj.dobj","title":"Dobj.id"},{"location":"modules/#dobjinfo","text":"Return a dictionary based on the metadata available from the landing page of the ICOS Carbon Portal website. This property will be deprecated in the next release. Example: from icoscp.dobj import Dobj from pprint import pprint dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') pprint(dobj.info) See also Dobj.meta","title":"Dobj.info"},{"location":"modules/#dobjlat","text":"Retrieve the float value representing the latitude of the station associated with the Dobj. If the station does not have a specified latitude, return None . Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') latitude = dobj.lat","title":"Dobj.lat"},{"location":"modules/#dobjlicence","text":"Return a dictionary with these keys: 'baseLicence', 'name', 'url', 'webpage', containing information about the dataset's associated license. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') latitude = dobj.lat","title":"Dobj.licence"},{"location":"modules/#dobjlon","text":"Retrieve the float value representing the longitude of the station associated with the Dobj. If the station does not have a specified longitude, return None . Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') longitude = dobj.lon","title":"Dobj.lon"},{"location":"modules/#dobjmeta","text":"Return a dictionary based on the metadata available from the landing page of the ICOS Carbon Portal website. Every data object has a rich set of metadata available. You can download an example from the data portal. This will then be parsed into a python dictionary representing the metadata from ICOS. Some of the important key properties, like 'previous', 'next', 'citation', e.t.c., are extracted for easy access and made available as properties. Example: from icoscp.dobj import Dobj from pprint import pprint dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') pprint(dobj.meta)","title":"Dobj.meta"},{"location":"modules/#dobjnext","text":"Return a landing page in the form of a string, featuring the next version of this data object if it exists. Return None if a next version does not exist. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') next_version = dobj.next","title":"Dobj.next"},{"location":"modules/#dobjprevious","text":"Return a landing page in the form of a string, featuring the previous version of this data object if it exists. Return None if a previous version does not exist. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') previous_version = dobj.previous","title":"Dobj.previous"},{"location":"modules/#dobjstation","text":"Return a dictionary containing metadata associated with the station corresponding to the Dobj. Please be aware that prior to version 0.1.15 this has returned a string with station id, which is now available as station['id']. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') station_meta = dobj.station","title":"Dobj.station"},{"location":"modules/#dobjvalid","text":"Return the validity of a Dobj as a boolean. This is kept for backwards compatibility reasons. From icoscp 0.2.0 and onwards, the Dobj class cannot be instantiated with an invalid PID, thus this will always return True . This property will be deprecated in the next release. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') validity = dobj.valid","title":"Dobj.valid"},{"location":"modules/#dobjvariables","text":"Return a Pandas DataFrame providing access to all available variables, including the name, unit, type, and the landing page for the format used (int, float, char, ...). Raise a MetaValueError exception if no variable information is available. The following example and its output shows the variables of an atmospheric methane concentration data object: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/zjNZLdVDcVUNwonvJIN5GQ3b') variables = dobj.variables print(variables) Output: index name unit type format 0 TIMESTAMP None time instant, UTC http://meta.icos-cp.eu/ontologies/cpmeta/iso8601dateTime 1 Flag None quality flag http://meta.icos-cp.eu/ontologies/cpmeta/bmpChar 2 NbPoints None number of points http://meta.icos-cp.eu/ontologies/cpmeta/int32 3 ch4 nmol mol-1 CH4 mixing ratio (dry mole fraction) http://meta.icos-cp.eu/ontologies/cpmeta/float32 4 Stdev nmol mol-1 standard deviation of gas mole fraction http://meta.icos-cp.eu/ontologies/cpmeta/float32","title":"Dobj.variables"},{"location":"modules/#methods","text":"","title":"Methods"},{"location":"modules/#dobjgetcolumns","text":"Retrieve the actual data for the PID in Pandas DataFrame format. You have the option to retrieve only selected columns (or variables) using a list of variables as an input argument. Only valid and unique entries will be returned. You can see valid entries with Dobj.colNames or Dobj.variables . If columns are not provided, or if none of the provided variables are valid, or if you work with local data, the default DataFrame (with all columns) will be returned. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') col_names = dobj.colNames # or # col_names = dobj.variables['name'].to_list() data = dobj.get(columns=col_names)","title":"Dobj.get(columns)"},{"location":"modules/#dobjgetcolumnscolumns","text":"Retrieve the actual data for the PID in Pandas DataFrame format. Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') col_names = dobj.colNames # or # col_names = dobj.variables['name'].to_list() data = dobj.getColumns(columns=col_names) See also Dobj.get(columns) and Dobj.data","title":"Dobj.getColumns(columns)"},{"location":"modules/#dobjget_citationformat","text":"Return the citation string in different formats. By default, a plain formatted string is returned. Possible formats are: plain : (default) a simple string bibtex : wikipedia ris : wikipedia Example: from icoscp.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') ris_citation = dobj.get_citation('ris') See also Dobj.citation","title":"Dobj.get_citation(format)"},{"location":"modules/#original-legacy-dobj","text":"The actual original legacy (prior to version 0.2.0 ) Dobj class resides in module icoscp.cpb.dobj . Most code is recommended to migrate to the new implementation of this class residing in module icoscp.dobj , but the old class is preserved to avoid breaking any dependent code by library update, and additionally, there are some known differences between the versions, documented below.","title":"Original legacy Dobj"},{"location":"modules/#dobj-initialization","text":"Using from icoscp.cpb.dobj import Dobj , you can initialize the Dobj class in one of the following ways: from icoscp.cpb.dobj import Dobj my_dobj = Dobj('https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01') my_dobj = Dobj('11676/pli1C0sX-HE2KpQQIvuYhX01') my_dobj = Dobj('pli1C0sX-HE2KpQQIvuYhX01') or create an 'empty' Dobj instance and set the identifier later: from icoscp.cpb.dobj import Dobj dobj = Dobj() dobj.dobj = 'https://meta.icos-cp.eu/objects/pli1C0sX-HE2KpQQIvuYhX01' Using from icoscp.dobj import Dobj , instantiating an 'empty' Dobj class, and setting the identifier later will result in a TypeError . This functionality was removed to preserve the Dobj class state and prevent unexpected behavior.","title":"Dobj initialization"},{"location":"modules/#dobj-datetime-conversion-control","text":"(Not available in the new implementation, as all datetime conversions are handled by pandas library in a uniform way) Dobj.dateTimeConvert = True The binary data representation provides a UTC Timestamp as Unix-timestamp with start point of 1970-01-01 00:00:00. By default, when using from icoscp.cpb.dobj import Dobj this is converted to a DateTimeObject of type pandas._libs.tslibs.timestamps.Timestamp . If you prefer to have the raw Unix-timestamp ( numpy.float64 ), set Dobj.dateTimeConvert = False prior to load the data with .get() or .data or .getColumns() . Return BOOL","title":"Dobj datetime conversion control"},{"location":"modules/#dobjsize","text":"(Not available in the new implementation. To get data object size in bytes from the new Dobj class, call Dobj.metadata.size or Dobj.meta['size'] ) The real size of the dobj in [bytes, KB, MB, TB]. Since this object may contain the data, it is no longer just a pointer to data. Return TUPLE (int32, STR), where int32 represents the size and STR the unit. Example output looks like: (4.353, 'MB')","title":"Dobj.size()"},{"location":"modules/#station","text":"The station module provides a search facility to explore ICOS stations and find associated data objects and data products. There is a lot of information available about the ICOS stations, partner countries, measured variables and much more in the ICOS Handbook . load the module with: from icoscp.station import station classmethod station.Station() The station object is primarily a data structure to store the associated metadata. The metadata is provided with specific and complex Sparql queries. It is possible to instantiate this class on its own, but we recommend using the convenience functions station.getIdList() station.get('StationID') station.getList() as described further below to create the station object. Once you have a created valid station object a list of attributes are available:","title":"Station"},{"location":"modules/#stationcountry","text":"Country code Return STR","title":"Station.country"},{"location":"modules/#stationdatalevelnone","text":"All associated data object for the station are returned. ICOS distinguishes data in terms of how processed they are. - Data level 1: Near Real Time Data (NRT) or Internal Work data (IW). - Data level 2: The final quality checked ICOS RI data set, published by the CFs, to be distributed through the Carbon Portal. This level is the ICOS-data product and free available for users. - Data level 3: All kinds of elaborated products by scientific communities that rely on ICOS data products are called Level 3 data. Return Pandas DataFrame","title":"Station.data(level=None)"},{"location":"modules/#stationeas","text":"Elevation above sea level in meter. Return FLOAT","title":"Station.eas"},{"location":"modules/#stationicosclass","text":"Classification for certified ICOS stations. Please consult the ICOS Handbook for further information about the Class 1&2 certificate. Return STR","title":"Station.icosclass"},{"location":"modules/#stationfirstname","text":"PI (Principal Investigator) First Name. Return STR","title":"Station.firstName"},{"location":"modules/#stationlastname","text":"PI (Principal Investigator) last name Return STR","title":"Station.lastName"},{"location":"modules/#stationemail","text":"PI (Principal Investigator) email address Return STR","title":"Station.email"},{"location":"modules/#stationlat","text":"Latitude for the station. Return FLOAT","title":"Station.lat"},{"location":"modules/#stationlon","text":"Longitude for the station. Return FLOAT","title":"Station.lon"},{"location":"modules/#stationname","text":"Returns the full name for the station. Return STR","title":"Station.name"},{"location":"modules/#stationproject","text":"ICOS Carbon Portal is a data portal from and for the ICOS community. However, the data portal does host more than ICOS data. The station association is listed here (if available) Return LIST","title":"Station.project"},{"location":"modules/#stationstationid","text":"Set or retrieve the StationId Return STR","title":"Station.stationId"},{"location":"modules/#stationtheme","text":"For ICOS stations a 'theme' is provided. Please note that, a station may belong to more than one theme, but with different themes. For example the stationId \"NOR\" (Norunda, Sweden), will give you access to the atmospheric data products, whereas the stationId \"SE-Nor\" will return the Ecosystem data products. AS for Atmospheric Stations ES for Ecosystem Stations OS for Ocean Stations Return STR","title":"Station.theme"},{"location":"modules/#stationuri","text":"Link to the landing page for the station. Because a station ID may be associated with more than one 'project' this returns a list of URI's Return LIST","title":"Station.uri"},{"location":"modules/#stationvalid","text":"True if stationId is found. Return BOOL","title":"Station.valid"},{"location":"modules/#convenience-functions","text":"The following three functions are recommended to get information about the available stations at the Carbon Portal and how to get a valid station object (or list of):","title":"Convenience functions"},{"location":"modules/#stationgetidlist","text":"The station.getIdList takes several parameters: project: str = 'ICOS' theme: list = None sort: str = 'name' outfmt: str = 'pandas' icon=None The default call station.getIdList() , which is the same as station.getIdList(project='ICOS', sort='name') returns a Pandas DataFrame with columns: ['uri', 'id', 'name', 'icosClass', 'country', 'lat', 'lon', 'elevation', 'stationTheme', 'firstName', 'lastName', 'email', 'siteType', 'project', 'theme'] By default, ICOS certified stations are returned. If project is set to 'all' , all known stations (to the Carbon Portal) are returned. By default, the DataFrame is sorted by the column name . You can provide any column name as sorting parameter. The 'id' of the record, can be used to instantiate a station. Hence, it is easy to adjust and filter these records and use the column 'id' as input for station.get() . The theme parameter can be set to either 'AS' , 'ES' or 'OS' , or a list with a combination of these strings. Here 'AS' , 'ES and 'OS' are short for atmospheric, ecosystem and ocean stations. Thus, station.getIdList(theme='AS') will return a DataFrame with all atmospheric ICOS stations. If the optional argument outfmt='map' is provided station.getIdList(project='ALL', outfmt='map', icon=None) a folium map is created with, in this case, all stations (since we use project='ALL' ). Stations without a fixed location (like measurements collected from instrumented Ships of Opportunity) will not be included in the map. Each marker in the map represents a station and contains station related information. A user can further customize the style of the map by providing the icon argument [None, 'flag', 'path/to/image.png'] . Return Folium Map","title":"station.getIdList()"},{"location":"modules/#stationget","text":"station.get('stationID') Provide a valid station id (see getIdList()) to create a Station object. NOTE: stationId is CaseSensitive. Return Station Object","title":"station.get()"},{"location":"modules/#stationgetlist","text":"station.getList(theme=['AS','ES','OS'], ids=None) This is the easiest way to get a list of ICOS stations. By default, a full list of all certified ICOS stations is returned. You can filter the output by provided a list of themes OR you can provide a list of station id's. NOTE: If you provide a list of id's, the theme filter is ignored. station.getList(['as', 'os']) list with ICOS atmospheric and ocean stations station.getList(ids=['NOR', 'HTM', 'HUN']) list with stations NOR (Norunda), HTM (Hyltemossa), HUN (Hegyhatsal) Return LIST[Station Objects]","title":"station.getList()"},{"location":"modules/#collection","text":"This module supports to load a collection of digital objects. Data products ( https://www.icos-cp.eu/data-products ) or collections are an assembly for a specific theme, or project. For example the ICOS community assembled data to provide a base for the Drought anomaly in 2018. This dataset was then used to study the impact of this extreme event, which ultimately led to a series of publications available as 'theme issue' in The Royal Society . Subsequently, the data sets are now public available at the ICOS Carbon Portal ( Drought-2018 ecosystem eddy covariance flux product for 52 stations and Drought-2018 atmospheric CO2 Mole Fraction product for 48 stations (96 sample heights) . Load the module with: from icoscp.collection import collection classmethod Collection(coll) (where coll represents a pandas.DataFrame , similar to the output from .getIdList()). BUT only similar. We do NOT Recommend to instantiate this class directly. Please use the function .get(CollectionId) . The Purpose of the class documentation is to provide you a list of attributes available, after the .get(CollectionId) return a collection object.","title":"Collection"},{"location":"modules/#collectionid","text":"This is the ICOS URI (PID). A link to the landing page on the ICOS data portal. Return STR","title":"Collection.id"},{"location":"modules/#collectiondoi","text":"If available, the official DOI in form of '10.18160/ry7n-3r04'. Return STR","title":"Collection.doi"},{"location":"modules/#collectioncitation","text":"For convenience the citation string provided from [https://citation.crosscite.org/] is stored in this attribute. If you like to have a different format, please have a look at .getCitation description below. Return STR","title":"Collection.citation"},{"location":"modules/#collectiontitle","text":"Return STR","title":"Collection.title"},{"location":"modules/#collectiondescription","text":"Return STR","title":"Collection.description"},{"location":"modules/#collectioninfo","text":"For convenience all the attributes above (id, doi, citation, title, description) . You can choose the output format with fmt=[\"dict\" | \"pandas\" | \"html\"]. The default is \"dict\". info(self, fmt='dict') Return FMT, default DICT","title":"Collection.info()"},{"location":"modules/#collectiondatalink","text":"This returns a list of PID/URI of digital objects associated with the collection. Return LIST[STR]","title":"Collection.datalink"},{"location":"modules/#collectiondata","text":"This returns a list of Dobj associated to the collection. Please refer to the module Digital Object above. Return LIST[Dobj]","title":"Collection.data"},{"location":"modules/#collectiongetcitation","text":"Collection.getCitation(format='apa', lang='en-GB')** If the collection has a DOI, you will get a citation string from https://citation.crosscite.org/ . You may provide any style & language parameters found on the website. Our default style is apa and language en-GB , which is stored in the attribute collection.citation . Use the function getCitation(), if you need a specific format & language adaption. Example to get a Bibtex styled citation: .getCitation('bibtex','de-CH')","title":"Collection.getCitation()"},{"location":"modules/#convenience-functions_1","text":"The following functions are recommended to get information about the available collections as well as creating an instance of a collection.","title":"Convenience functions"},{"location":"modules/#collectiongetidlist","text":"collection.getIdList() This will return a pandas.DataFrame , listing all available collections at the data portal. The DataFrame contains the following columns: ['collection', 'doi', 'title', 'description', 'dobj', 'count'] . We would recommend that you pay close attention to the count . We have collections with many data objects associated. If you just want to play around, select a collection with less than 10 objects. collection contains the PID/URI for the collection. This is the ID you need to provide for the .get(CollectionId) function. Please be aware that you need to provide the full URI. Example: .get('https://meta.icos-cp.eu/collections/n7cIMHIyqHJKBeF_3jjgptHP') dobj contains a list (LIST[STR]) of all PID/URI associated data objects. count tells you how many data objects are associated with this collection. Returns a pandas DataFrame","title":"collection.getIdList()"},{"location":"modules/#collectionget","text":"collection.get(CollectionId) Create a collection object. See the class method above for the attributes available in the collection object. The CollectionId must be either the full ICOS URI of the collection landing page or the DOI (if one is available). Not all collections have a DOI. Both information can be extracted with the function .getIdList() .The following to lines to create 'myCollection' yield the same result : myCollection = get('https://meta.icos-cp.eu/collections/n7cIMHIyqHJKBeF_3jjgptHP') myCollection = get('10.18160/ry7n-3r04') Returns Collection","title":"collection.get()"},{"location":"modules/#sparql","text":"At the ICOS Carbon Portal we store all data and metadata as linked data in a triple store. For more information about this approach refer to Semantic Web , Resource Description Framework (RDF) , and Triple Stores . This module is a simple interface to the SPARQL endpoint at the Carbon Portal. You can write your own queries and use the module to query the database or use some of the provided built-in queries. Load the module with: from icoscp.sparql.runsparql import RunSparql classmethod RunSparql(sparql_query='', output_format='txt') sparql_query needs to be a valid query. You can test a query directly at the online SPARQL endpoint at https://meta.icos-cp.eu/sparqlclient/?type=CSV . The output format is by default (txt/json) but you can adjust with the following formats ['json', 'csv', 'dict', 'pandas', 'array', 'html'].","title":"Sparql"},{"location":"modules/#runsparqldata","text":"If a query is set and the method .run() was executed, it returns the result from the SPARQL endpoint. If no data is available the method returns False (BOOL). Return BOOL | STR","title":"RunSparql.data"},{"location":"modules/#runsparqlquery-query","text":"Retrieve or set the query. Return STR","title":"RunSparql.query = 'query'"},{"location":"modules/#runsparqlformat-fmt","text":"Retrieve or set the output format. fmt = 'json', 'csv', 'dict', 'pandas', 'array', 'html' Return STR","title":"RunSparql.format = 'fmt'"},{"location":"modules/#runsparqlrun","text":"This method actually executes the query and formats the result to the output format. If the sparql query is not executable because of syntax errors, for example, a TUPLE is returned (False, 'Bad Request') Return TUPLE | FMT","title":"RunSparql.run()"}]}